  CREATE OR REPLACE FUNCTION "SYS"."IBM_PASSWORD_VERIFY_FUNC" (
   username varchar2,
   password varchar2,
   old_password varchar2)
   RETURN boolean IS
   n boolean;
   m integer;
   x integer;
   differ integer;
   isdigit boolean;
   ischar  boolean;
   ispunct boolean;
   isfirstchardig boolean;
   islastchardig boolean;
   digitarray varchar2(20);
   punctarray varchar2(25);
   chararray varchar2(52);
   nonalphaarray varchar2(45);
   alphaarray varchar2(52);
BEGIN
   digitarray:= '0123456789';
   chararray:= 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
   punctarray:='!"#$%&()''*+,-/:;<=>?_';
   alphaarray:= 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
   nonalphaarray:= '0123456789!"#$%&()''*+,-/:;<=>?_';

--Check if the password is same as the username
IF NLS_UPPER(password) = NLS_UPPER(username) THEN
   raise_application_error(-20001, 'Password same as user');
END IF;

--Check for the minimum length of the password
IF length(password) < 6 THEN
   raise_application_error(-20002, 'Password length less than 6');
END IF;

--Check if password is too simple. A dictionary of words may be maintained and c
heck made so as
--not to allow the words that are too simple for the password.
IF NLS_LOWER(password) IN ('welcome', 'database', 'account', 'user',
   'password', 'oracle', 'computer', 'abcd')
   THEN raise_application_error(-20002, 'Password too simple');
END IF;

--Check if password has Non-numeric in first and last positions
isfirstchardig:=FALSE;
islastchardig:=FALSE;
FOR i IN 1..length(digitarray) LOOP
   IF substr(password,1,1) = substr(digitarray,i,1) THEN
       isfirstchardig:=TRUE;
   END IF;
   x:=length(password);
   IF substr(password,x,1) = substr(digitarray,i,1) THEN
       islastchardig:=TRUE;
   END IF;
END LOOP;
IF isfirstchardig = TRUE THEN
  raise_application_error(-20005, 'Password should have Non-numeric in 1st and l
ast positions');
END IF;

IF islastchardig = TRUE THEN
  raise_application_error(-20005, 'Password should have Non-numeric in 1st and l
ast positions');
END IF;

--Check for Maximum 2 identical consecutive characters
-- TO BE DONE --

--Check if contains at least one alpha character and one non-alpha character

-- Check for the alpha character

--<<findalpha>>
m := length(password);
ischar:=FALSE;
FOR i IN 1..length(alphaarray) LOOP
  FOR j IN 1..m LOOP
    IF substr(password,j,1) = substr(alphaarray,i,1) THEN
       ischar:=TRUE;
         GOTO findnonalpha;
       END IF;
    END LOOP;
END LOOP;
IF ischar = FALSE THEN
  raise_application_error(-20003, 'Password should contain at least one alphabet
ic,\
    one non-alphabetic character');
END IF;

-- Check for the non-alpha character

<<findnonalpha>>
ispunct:=FALSE;
FOR i IN 1..length(nonalphaarray) LOOP
  FOR j IN 1..m LOOP
    IF substr(password,j,1) = substr(nonalphaarray,i,1) THEN
       ispunct:=TRUE;
         GOTO endsearch;
       END IF;
   END LOOP;
END LOOP;
IF ispunct = FALSE THEN raise_application_error(-20003, 'Password should contain
 at \
   least one alphabetic, one non-alphabetic character');
END IF;

<<endsearch>>

--Check if the password differs from the previous password by at least 3 letters

   IF old_password IS NOT NULL THEN
     differ := length(old_password) - length(password);

     IF abs(differ) < 3 THEN
       IF length(password) < length(old_password) THEN
         m := length(password);
       ELSE
         m := length(old_password);
       END IF;

       differ := abs(differ);
       FOR i IN 1..m LOOP
         IF substr(password,i,1) != substr(old_password,i,1) THEN
           differ := differ + 1;
         END IF;
       END LOOP;

       IF differ < 3 THEN
         raise_application_error(-20004, 'Password should differ by at \
         least 3 characters');
       END IF;
     END IF;
   END IF;

--Everything is fine; return TRUE ;
RETURN(TRUE);
END;
