=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2010.09.22 20:27:03 =~=~=~=~=~=~=~=~=~=~=~=
Using username "e032090".

                             NOTICE

This is a private computer system.

It is for authorized use only. Users (authorized or unauthorized)
have no explicit or implicit expectation of privacy.

Any or all uses of this system and all files on this system may be
intercepted, monitored, recorded, copied, audited, inspected, and disclosed to
authorized site, information security, and law enforcement personnel,
as well as authorized officials of other agencies, both domestic and foreign.
By using this system, the user consents to such interception, monitoring,
recording, copying, auditing, inspection, and disclosure at the discretion of
authorized site or personnel.

Unauthorized or improper use of this system may result in administrative
disciplinary action and civil and criminal penalties. By continuing to use
this system you indicate your awareness of and consent to these terms and
conditions of use. DISCONNECT IMMEDIATELY if you do not agree to the conditions
stated in this warning.

Using keyboard-interactive authentication.
Enter PASSCODE:
Last unsuccessful login: Sat Mar 27 12:09:35 2010 on ssh from 172.17.121.131
Last login: Sat Mar 27 12:09:41 2010 on /dev/pts/0 from 172.17.121.131
*******************************************************************************
*                                                                             *
*                                                                             *
*  Welcome to AIX Version 6.1!                                                *
*                                                                             *
*                                                                             *
*  Please see the README file in /usr/lpp/bos for information pertinent to    *
*  this release of the AIX Operating System.                                  *
*                                                                             *
*                                                                             *
*******************************************************************************
$ sesudo oracle
$ id
uid=200(oracle) gid=200(dba)
$ SetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 2

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [OMS_HOME]  ORACLE_HOME = [/oracle/product/oem/oms10g]

OMS_HOME @ oem0stl0:/oracle/home
$ SEtetDb
ksh: SEt^?^?etDb:  not found
OMS_HOME @ oem0stl0:/oracle/home
$ uname -a
AIX oem0stl0 1 6 00CDA6D44C00
OMS_HOME @ oem0stl0:/oracle/home
$ SETetDb
ksh: SET^?^?etDb:  not found
OMS_HOME @ oem0stl0:/oracle/home
$ k
OMS_HOME @ oem0stl0:/oracle/home
$  SetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 3

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [doem1s]    ORACLE_HOME = [/oracle/product/v10.2.0.4]

doem1s @ oem0stl0:/oracle/home
$ sqlplus "/ as sysdba"

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Sep 22 10:03:00 2010

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.


Connected to:
Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL> show parameter fal

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
fal_client                           string
fal_server                           string
SQL> exit
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
doem1s @ oem0stl0:/oracle/home
$ kk
doem1s @ oem0stl0:/oracle/home
$ 
doem1s @ oem0stl0:/oracle/home
$ 
doem1s @ oem0stl0:/oracle/home
$ Set
doem1s @ oem0stl0:/oracle/home
$ SetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 4

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [drct0s]    ORACLE_HOME = [/oracle/product/v11.1.0.7]

drct0s @ oem0stl0:/oracle/home
$ k
drct0s @ oem0stl0:/oracle/home
$ 
drct0s @ oem0stl0:/oracle/home
$ 
drct0s @ oem0stl0:/oracle/home
$ sqllusplus "/ as sysdba"
ksh: sqllus^?^?^?plus:  not found
drct0s @ oem0stl0:/oracle/home
$ sqlplus "/ as sysdba"

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 10:03:45 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL> !uname -a
AIX oem0stl0 1 6 00CDA6D44C00

SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/home
$ /usr/bin/vpd   info
ksh: /usr/bin/vpd:  not found
drct0s @ oem0stl0:/oracle/home
$ export PATH=$PATH:$ORACLE_HOME/OPatch
drct0s @ oem0stl0:/oracle/home
$ cd $ORACLE_HOME/OPatch
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/OPatch
$ opatch version
Invoking OPatch 11.1.0.6.2

OPatch Version: 11.1.0.6.2

OPatch succeeded.
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/OPatch
$ SETetDb
ksh: SET^?^?etDb:  not found
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/OPatch
$ SetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 3

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [doem1s]    ORACLE_HOME = [/oracle/product/v10.2.0.4]

doem1s @ oem0stl0:/oracle/product/v11.1.0.7/OPatch
$ export PATH=$PATH:$ORACLE_HOME/OPatch
doem1s @ oem0stl0:/oracle/product/v11.1.0.7/OPatch
$  cd $ORACLE_HOME/OPatch
ksh: /oracle/product/v10.2.0.4/OPatch:  not found
doem1s @ oem0stl0:/oracle/product/v11.1.0.7/OPatch
$ cd $ORACLE_HOME/OPatch
ksh: /oracle/product/v10.2.0.4/OPatch:  not found
doem1s @ oem0stl0:/oracle/product/v11.1.0.7/OPatch
$ cat 
doem1s @ oem0stl0:/oracle/product/v11.1.0.7/OPatch
$ cd /var/opt/oracle
doem1s @ oem0stl0:/var/opt/oracle
$ ls -lrt
total 312
-rw-r--r--    1 oracle   dba           11037 May 21 2005  tnsnames.ora.20050521
-rw-r--r--    1 oracle   dba           11073 May 21 2005  tnsnames.ora_D2005-09-19
-rw-r--r--    1 oracle   dba            1746 Sep 19 2005  sqlnet.log
drwxr-xr-x    2 oracle   dba             256 Sep 20 2005  passwds/
lrwxrwxrwx    1 root     system           11 Oct 12 2009  oratab@ -> /etc/oratab
-rw-r--r--    1 oracle   dba             982 Dec 15 2009  appsinit.log.old
-rw-r--r--    1 oracle   dba            1124 Jan 25 2010  typescript
-rw-r--r--    1 oracle   dba             147 Apr 29 10:12 oratab.042910
-rw-r--r--    1 oracle   dba             573 Apr 29 13:32 listener.ora042910
-rw-r--r--    1 oracle   dba             650 May 21 11:09 listener.ora
-rw-r--r--    1 oracle   dba           12410 May 22 14:02 tnsnames.ora_772010
-rw-r--r--    1 oracle   dba           13264 Jul 26 11:18 tnsnames.ora
-rw-r--r--    1 oracle   dba           27651 Aug 14 05:12 orainit.log
-rw-r--r--    1 oracle   dba           18500 Aug 14 05:12 lsnr.log
-rw-r--r--    1 oracle   dba           26214 Aug 14 05:13 appsinit.log
doem1s @ oem0stl0:/var/opt/oracle
$ cd /$ORACLE_HOME
ksh: /^?/oracle/product/v10.2.0.4:  not found
doem1s @ oem0stl0:/var/opt/oracle
$ cd $ORACLE_HOME
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ ls 
CPU_JULY_09          css/                 install.platform     md/                  oraInst.loc.050410   racg/                sysman/
assistants/          ctx/                 inventory/           mesg/                oraInventory.10204/  rda/                 tg4ifmx/
bali/                dbs/                 javavm/              mgw/                 oracore/             rdbms/               tg4ingr/
bin/                 demo/                jdbc/                network/             ord/                 relnotes/            tg4sybs/
ccr/                 diagnostics/         jdk/                 nls/                 oui/                 root.sh*             tg4tera/
cdata/               emdw/                jlib/                oc4j/                owm/                 root.sh.old*         uix/
cfgtoollogs/         encryption/          jre/                 odbc/                patches/             root.sh.old.1*       wwg/
clone/               endorsed/            ldap/                olap/                patches_10204/       slax/                xdk/
config/              has/                 lib/                 opmn/                perl/                sqlj/                /
cpu/                 hs/                  lib32/               opsm/                plsql/               sqlplus/
crs/                 install/             log/                 oraInst.loc          precomp/             srvm/
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ ls -lr
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ cat oraInst.loc
#inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inst_group=dba
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ cp oraInst.loc /var/opt/oracle/.
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ cd /var/opt/oracle/
doem1s @ oem0stl0:/var/opt/oracle
$ ls -lrt
total 320
-rw-r--r--    1 oracle   dba           11037 May 21 2005  tnsnames.ora.20050521
-rw-r--r--    1 oracle   dba           11073 May 21 2005  tnsnames.ora_D2005-09-19
-rw-r--r--    1 oracle   dba            1746 Sep 19 2005  sqlnet.log
drwxr-xr-x    2 oracle   dba             256 Sep 20 2005  passwds/
lrwxrwxrwx    1 root     system           11 Oct 12 2009  oratab@ -> /etc/oratab
-rw-r--r--    1 oracle   dba             982 Dec 15 2009  appsinit.log.old
-rw-r--r--    1 oracle   dba            1124 Jan 25 2010  typescript
-rw-r--r--    1 oracle   dba             147 Apr 29 10:12 oratab.042910
-rw-r--r--    1 oracle   dba             573 Apr 29 13:32 listener.ora042910
-rw-r--r--    1 oracle   dba             650 May 21 11:09 listener.ora
-rw-r--r--    1 oracle   dba           12410 May 22 14:02 tnsnames.ora_772010
-rw-r--r--    1 oracle   dba           13264 Jul 26 11:18 tnsnames.ora
-rw-r--r--    1 oracle   dba           27651 Aug 14 05:12 orainit.log
-rw-r--r--    1 oracle   dba           18500 Aug 14 05:12 lsnr.log
-rw-r--r--    1 oracle   dba           26214 Aug 14 05:13 appsinit.log
-rw-r--r--    1 oracle   dba             173 Sep 22 10:18 oraInst.loc
doem1s @ oem0stl0:/var/opt/oracle
$ ccd $ORACLE_HOME/OPatch
ksh: c^?^?^?cd:  not found
doem1s @ oem0stl0:/var/opt/oracle
$ cd $ORACLE_HOME/OPatch
ksh: /oracle/product/v10.2.0.4/OPatch:  not found
doem1s @ oem0stl0:/var/opt/oracle
$ cd /oracle/product/v10.2.0.4/
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ ls -lrt
total 280
-rwxr-x---    1 oracle   dba               0 Jun  7 2005  root.sh.old*
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  wwg/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  uix/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4sybs/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  sqlj/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  slax/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  perl/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  owm/
drwxr-xr-x    8 oracle   dba             256 Aug 12 2009  ord/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  oracore/
drwxr-x---    4 oracle   dba             256 Aug 12 2009  opsm/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  olap/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  nls/
drwxr-x---    6 oracle   dba             256 Aug 12 2009  md/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  jre/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  javavm/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  has/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  encryption/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  emdw/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  diagnostics/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  demo/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  crs/
drwxr-x---    4 oracle   dba             256 Aug 12 2009  clone/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  bali/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  assistants/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  plsql/
drwxr-x---    2 oracle   dba             256 Aug 12 2009  mesg/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  xdk/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  jdbc/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  relnotes/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  mgw/
drwxr-xr-x    2 oracle   dba             256 Aug 12 2009  endorsed/
drwxr-xr-x   10 oracle   dba             256 Aug 12 2009  sqlplus/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  css/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  cdata/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  opmn/
drwxr-xr-x   13 oracle   dba            4096 Aug 12 2009  srvm/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  racg/
drwxr-xr-x   14 oracle   dba            4096 Aug 12 2009  ldap/
drwxr-x---    2 oracle   dba             256 Aug 12 2009  config/
drwxr-xr-x   12 oracle   dba            4096 Aug 12 2009  network/
-rwxr-xr-x    1 oracle   dba            9502 Aug 12 2009  root.sh.old.1*
drwxr-x---   15 oracle   dba            4096 Aug 12 2009  oc4j/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  hs/
-rw-r-----    1 oracle   dba              38 Aug 12 2009  install.platform
drwxr-xr-x   10 oracle   dba            4096 Aug 12 2009  jdk/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  /
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  oui/
drwxr-xr-x    2 oracle   dba            4096 Aug 12 2009  jlib/
drwxr-xr-x   14 oracle   dba            4096 Aug 12 2009  sysman/
drwxr-xr-x   10 oracle   dba             256 Aug 12 2009  precomp/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  odbc/
drwxr-x---   11 oracle   dba            4096 Aug 12 2009  ctx/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4tera/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4ingr/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4ifmx/
drwxr-xr-x   15 oracle   dba            4096 Aug 12 2009  rdbms/
-rwxr-x---    1 oracle   dba           11472 Aug 12 2009  root.sh*
drwxr-x---    5 oracle   dba            4096 Aug 12 2009  install/
drwxr-x---   15 oracle   dba            4096 Aug 12 2009  inventory/
drwxr-x---    6 oracle   dba             256 Aug 12 2009  cfgtoollogs/
-rw-r--r--    1 oracle   dba               0 Aug 12 2009  CPU_JULY_09
drwxr-xr-x    3 oracle   dba             256 Nov 10 2009  log/
drwxr-x---   14 oracle   dba            4096 Mar 29 09:28 ccr/
drwxr-x---    5 oracle   dba            4096 Mar 29 09:28 rda/
-rw-r--r--    1 oracle   dba             175 May  4 16:06 oraInst.loc.050410
-rw-r--r--    1 oracle   dba             173 May  4 16:08 oraInst.loc
drwxr-xr-x    6 oracle   dba             256 May  4 17:53 cpu/
drwxr-x---    7 oracle   dba            4096 May  4 17:53 oraInventory.10204/
drwxr-xr-x    2 oracle   dba           20480 May  4 17:54 bin/
drwxr-xr-x    3 oracle   dba           12288 May  4 17:54 lib/
drwxr-xr-x    2 oracle   dba           12288 May  4 17:54 lib32/
drwxr-xr-x    2 oracle   dba             256 Sep  9 10:36 patches/
drwxr-x---    2 oracle   dba            4096 Sep 22 06:16 dbs/
drwxr-xr-x    4 oracle   dba             256 Sep 22 10:07 patches_10204/
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ ls -lrt *patch*
patches:
total 0

patches_10204:
total 11536
drwxrwxr-x   36 oracle   dba            4096 Jan  6 2010  9119226/
drwxrwxr-x   41 oracle   dba            4096 Jul  6 10:57 9655017/
-rw-r--r--    1 oracle   dba         5895658 Sep 22 10:07 p9655017_10204_AIX5L.zip
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ ls -lrt
total 280
-rwxr-x---    1 oracle   dba               0 Jun  7 2005  root.sh.old*
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  wwg/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  uix/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4sybs/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  sqlj/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  slax/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  perl/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  owm/
drwxr-xr-x    8 oracle   dba             256 Aug 12 2009  ord/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  oracore/
drwxr-x---    4 oracle   dba             256 Aug 12 2009  opsm/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  olap/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  nls/
drwxr-x---    6 oracle   dba             256 Aug 12 2009  md/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  jre/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  javavm/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  has/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  encryption/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  emdw/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  diagnostics/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  demo/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  crs/
drwxr-x---    4 oracle   dba             256 Aug 12 2009  clone/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  bali/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  assistants/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  plsql/
drwxr-x---    2 oracle   dba             256 Aug 12 2009  mesg/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  xdk/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  jdbc/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  relnotes/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  mgw/
drwxr-xr-x    2 oracle   dba             256 Aug 12 2009  endorsed/
drwxr-xr-x   10 oracle   dba             256 Aug 12 2009  sqlplus/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  css/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  cdata/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  opmn/
drwxr-xr-x   13 oracle   dba            4096 Aug 12 2009  srvm/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  racg/
drwxr-xr-x   14 oracle   dba            4096 Aug 12 2009  ldap/
drwxr-x---    2 oracle   dba             256 Aug 12 2009  config/
drwxr-xr-x   12 oracle   dba            4096 Aug 12 2009  network/
-rwxr-xr-x    1 oracle   dba            9502 Aug 12 2009  root.sh.old.1*
drwxr-x---   15 oracle   dba            4096 Aug 12 2009  oc4j/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  hs/
-rw-r-----    1 oracle   dba              38 Aug 12 2009  install.platform
drwxr-xr-x   10 oracle   dba            4096 Aug 12 2009  jdk/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  /
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  oui/
drwxr-xr-x    2 oracle   dba            4096 Aug 12 2009  jlib/
drwxr-xr-x   14 oracle   dba            4096 Aug 12 2009  sysman/
drwxr-xr-x   10 oracle   dba             256 Aug 12 2009  precomp/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  odbc/
drwxr-x---   11 oracle   dba            4096 Aug 12 2009  ctx/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4tera/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4ingr/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4ifmx/
drwxr-xr-x   15 oracle   dba            4096 Aug 12 2009  rdbms/
-rwxr-x---    1 oracle   dba           11472 Aug 12 2009  root.sh*
drwxr-x---    5 oracle   dba            4096 Aug 12 2009  install/
drwxr-x---   15 oracle   dba            4096 Aug 12 2009  inventory/
drwxr-x---    6 oracle   dba             256 Aug 12 2009  cfgtoollogs/
-rw-r--r--    1 oracle   dba               0 Aug 12 2009  CPU_JULY_09
drwxr-xr-x    3 oracle   dba             256 Nov 10 2009  log/
drwxr-x---   14 oracle   dba            4096 Mar 29 09:28 ccr/
drwxr-x---    5 oracle   dba            4096 Mar 29 09:28 rda/
-rw-r--r--    1 oracle   dba             175 May  4 16:06 oraInst.loc.050410
-rw-r--r--    1 oracle   dba             173 May  4 16:08 oraInst.loc
drwxr-xr-x    6 oracle   dba             256 May  4 17:53 cpu/
drwxr-x---    7 oracle   dba            4096 May  4 17:53 oraInventory.10204/
drwxr-xr-x    2 oracle   dba           20480 May  4 17:54 bin/
drwxr-xr-x    3 oracle   dba           12288 May  4 17:54 lib/
drwxr-xr-x    2 oracle   dba           12288 May  4 17:54 lib32/
drwxr-xr-x    2 oracle   dba             256 Sep  9 10:36 patches/
drwxr-x---    2 oracle   dba            4096 Sep 22 06:16 dbs/
drwxr-xr-x    4 oracle   dba             256 Sep 22 10:07 patches_10204/
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ cd /
doem1s @ oem0stl0:/
$ ls -lrt
total 633872
drwxr-xr-x    2 root     system          256 Jun  8 2005  a/
dr-xr-xr-x    6 root     system          256 Jan 26 2006  images/
drwxr-xr-x    4 root     system          256 Oct  7 2009  apps_01/
drwxr-xr-x    2 root     system          256 Oct 12 2009  dbs04/
drwxr-xr-x   15 root     system         4096 Oct 14 2009  sys_apps_01/
drwxr-xr-x    4 root     system          256 Oct 15 2009  apps_data_01/
dr-xr-xr-x    3 root     system          256 Oct 15 2009  net/
-rwxr--r--    1 root     system          626 Nov 30 2009  default.log*
-rw-r--r--    1 root     system      1375842 Dec 29 2009  core
drwxr-xr-x    4 root     system          256 Feb 21 2010  mksysb_images/
-rw-r--r--    1 root     system         6046 Feb 21 2010  bosinst.data
-rw-r--r--    1 root     system         9321 Feb 21 2010  image.data
lrwxrwxrwx    1 bin      bin               8 Feb 22 2010  lib@ -> /usr/lib/
drwxr-xr-x    3 root     system          256 Feb 22 2010  admin/
lrwxrwxrwx    1 bin      bin               5 Feb 22 2010  u@ -> /home/
drwxr-xr-x    2 bin      bin             256 Feb 22 2010  mnt/
drwx------    2 root     system          256 Feb 22 2010  lost+found/
lrwxrwxrwx    1 bin      bin               8 Feb 22 2010  bin@ -> /usr/bin/
drwxrwxr-x    2 root     system          256 Feb 22 2010  tftpboot/
drwxr-xr-x   33 bin      bin            4096 Feb 22 2010  var/
lrwxrwxrwx    1 root     system           21 Feb 22 2010  unix@ -> /usr/lib/boot/unix_64*
drwxr-xr-x   47 bin      bin            4096 Feb 22 2010  usr/
-rw-r--r--    1 root     system    322408448 Apr 29 09:12 en0
drwxrwxr-x    6 oracle   dba             256 Apr 29 11:02 ora_trc_01/
drwxrwxr-x    6 oracle   dba             256 Apr 29 11:03 ora_exp_01/
drwxr-xr-x    3 root     system          256 Jul 14 01:13 audit/
drwxr-xr-x   20 root     system         4096 Aug 10 12:31 opt/
drwxr-xr-x  154 bin      bin            8192 Aug 10 12:33 lpp/
drwxr-xr-x    3 bin      bin             256 Aug 10 12:41 sbin/
-rw-r--r--    1 root     system        26607 Aug 10 13:16 smit.transaction
-rw-r--r--    1 root     system        17969 Aug 10 13:16 smit.script
-rw-r--r--    1 root     system       566847 Aug 10 13:16 smit.log
drwxr-xr-x   15 root     system         4096 Aug 23 10:46 uts_staging/
drwxrwxr-x    9 oracle   dba             256 Aug 30 09:12 oracle/
drwxrwxr-x    7 oracle   dba             256 Aug 31 17:30 dbs01/
drwxr-xr-x    6 oracle   dba             256 Sep  8 16:17 dbs03/
drwxr-xr-x    3 root     system         4096 Sep 22 00:01 nmon_data/
drwxr-xr-x  439 root     system        24576 Sep 22 07:02 home/
drwxrwxr-x    5 root     system        12288 Sep 22 08:16 dev/
drwxrwxr-x    5 oracle   dba             256 Sep 22 10:02 dbs02/
drwxr-xr-x   40 root     system        16384 Sep 22 10:10 etc/
drwxrwxrwt   15 bin      bin            8192 Sep 22 10:19 tmp/
drwxrwxr-x    7 oracle   dba             256 Sep 22 10:19 arch_log_01/
dr-xr-xr-x    1 root     system            0 Sep 22 10:20 proc/
doem1s @ oem0stl0:/
$ k
doem1s @ oem0stl0:/
$ 
doem1s @ oem0stl0:/
$ 
doem1s @ oem0stl0:/
$ /oracle/product/v10.2.0.4
doem1s @ oem0stl0:/
$ cd /oracle/product/v10.2.0.4
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ opatch version
ksh: opatch:  not found
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ opatch version
ksh: opatch:  not found
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ ls -
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ cd /oracle
doem1s @ oem0stl0:/oracle
$ cd local
doem1s @ oem0stl0:/oracle/local
$ cd lscd tools
ksh: cd: bad substitution
doem1s @ oem0stl0:/oracle/local
$ ls -lrt
total 24
-rw-r--r--    1 oracle   dba            1295 Apr  2 09:27 profile_rollout.log
drwxr-xr-x    2 oracle   dba             256 Apr 16 14:02 tmp/
drwxr-xr-x    2 oracle   dba             256 Apr 16 14:02 logs/
drwxr-xr-x    2 oracle   dba            4096 Apr 29 13:39 bin/
drwxr-xr-x    2 oracle   dba            4096 Sep 22 10:05 tools/
doem1s @ oem0stl0:/oracle/local
$ cd tools
doem1s @ oem0stl0:/oracle/local/tools
$ ls -lrt
total 115128
-rw-r--r--    1 oracle   dba            2011 Jul 27 16:28 simple_pwd_fix_setup_script.sql
-rw-r--r--    1 oracle   dba           82899 Jul 27 16:28 simple_pwd_uname_test_doem1s.sql
-rw-r--r--    1 oracle   dba             147 Jul 27 16:28 simple_pwd_fix_doem1s.out
-rw-r--r--    1 oracle   dba           15567 Jul 27 16:28 simple_pwd_fix_uname_doem1s.txt
-rw-r--r--    1 oracle   dba        29467308 Sep 22 09:52 p6880880_111000_AIX64-5L.zip
-rw-r--r--    1 oracle   dba        29361438 Sep 22 09:52 p6880880_102000_AIX64-5L.zip
doem1s @ oem0stl0:/oracle/local/tools
$ ls -lrt p6880880_102000*
-rw-r--r--    1 oracle   dba        29361438 Sep 22 09:52 p6880880_102000_AIX64-5L.zip
doem1s @ oem0stl0:/oracle/local/tools
$ cp p6880880_102000_AIX64-5L.zip /oracle/product/v10.2.0.4
doem1s @ oem0stl0:/oracle/local/tools
$ cd /oracle/product/v10.2.0.4
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ unzip p6880880_102000_AIX64-5L.zip
Archive:  p6880880_102000_AIX64-5L.zip
   creating: OPatch/
   creating: OPatch/ocm/
 extracting: OPatch/ocm/ocm.zip      
   creating: OPatch/ocm/lib/
  inflating: OPatch/ocm/lib/osdt_jce.jar  
  inflating: OPatch/ocm/lib/osdt_core3.jar  
  inflating: OPatch/ocm/lib/emocmclnt-14.jar  
  inflating: OPatch/ocm/lib/emocmutl.jar  
   creating: OPatch/ocm/bin/
  inflating: OPatch/ocm/bin/emocmrsp  
  inflating: OPatch/ocm/ocm_platforms.txt  
   creating: OPatch/crs/
   creating: OPatch/crs/log/
 extracting: OPatch/crs/log/dummy    
  inflating: OPatch/crs/patch112.pl  
  inflating: OPatch/crs/crsdelete.pm  
  inflating: OPatch/crs/crspatch.pm  
  inflating: OPatch/crs/s_crsconfig_defs  
  inflating: OPatch/crs/crsconfig_lib.pm  
  inflating: OPatch/crs/oracss.pm    
  inflating: OPatch/crs/auto_patch.pl  
  inflating: OPatch/crs/s_crsconfig_lib.pm  
  inflating: OPatch/opatch           
   creating: OPatch/opatchprereqs/
   creating: OPatch/opatchprereqs/opatch/
  inflating: OPatch/opatchprereqs/opatch/runtime_prereq.xml  
  inflating: OPatch/opatchprereqs/opatch/opatch_prereq.xml  
  inflating: OPatch/opatchprereqs/opatch/rulemap.xml  
  inflating: OPatch/opatchprereqs/prerequisite.properties  
   creating: OPatch/opatchprereqs/oui/
  inflating: OPatch/opatchprereqs/oui/knowledgesrc.xml  
  inflating: OPatch/opatch.ini       
  inflating: OPatch/emdpatch.pl      
  inflating: OPatch/opatch.pl        
   creating: OPatch/jlib/
  inflating: OPatch/jlib/opatchprereq.jar  
  inflating: OPatch/jlib/opatchactions.jar  
  inflating: OPatch/jlib/opatchutil.jar  
  inflating: OPatch/jlib/opatchfmw.jar  
  inflating: OPatch/jlib/opatchext.jar  
  inflating: OPatch/jlib/opatch.jar  
  inflating: OPatch/opatch.bat       
   creating: OPatch/docs/
  inflating: OPatch/docs/Prereq_Users_Guide.txt  
  inflating: OPatch/docs/FAQ         
  inflating: OPatch/docs/Users_Guide.txt  
  inflating: OPatch/README.txt       
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ ls -lrt
total 57648
-rwxr-x---    1 oracle   dba               0 Jun  7 2005  root.sh.old*
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  wwg/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  uix/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4sybs/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  sqlj/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  slax/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  perl/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  owm/
drwxr-xr-x    8 oracle   dba             256 Aug 12 2009  ord/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  oracore/
drwxr-x---    4 oracle   dba             256 Aug 12 2009  opsm/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  olap/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  nls/
drwxr-x---    6 oracle   dba             256 Aug 12 2009  md/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  jre/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  javavm/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  has/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  encryption/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  emdw/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  diagnostics/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  demo/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  crs/
drwxr-x---    4 oracle   dba             256 Aug 12 2009  clone/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  bali/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  assistants/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  plsql/
drwxr-x---    2 oracle   dba             256 Aug 12 2009  mesg/
drwxr-xr-x    6 oracle   dba             256 Aug 12 2009  xdk/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  jdbc/
drwxr-xr-x    4 oracle   dba             256 Aug 12 2009  relnotes/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  mgw/
drwxr-xr-x    2 oracle   dba             256 Aug 12 2009  endorsed/
drwxr-xr-x   10 oracle   dba             256 Aug 12 2009  sqlplus/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  css/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  cdata/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  opmn/
drwxr-xr-x   13 oracle   dba            4096 Aug 12 2009  srvm/
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  racg/
drwxr-xr-x   14 oracle   dba            4096 Aug 12 2009  ldap/
drwxr-x---    2 oracle   dba             256 Aug 12 2009  config/
drwxr-xr-x   12 oracle   dba            4096 Aug 12 2009  network/
-rwxr-xr-x    1 oracle   dba            9502 Aug 12 2009  root.sh.old.1*
drwxr-x---   15 oracle   dba            4096 Aug 12 2009  oc4j/
drwxr-x---    7 oracle   dba             256 Aug 12 2009  hs/
-rw-r-----    1 oracle   dba              38 Aug 12 2009  install.platform
drwxr-xr-x   10 oracle   dba            4096 Aug 12 2009  jdk/
drwxr-xr-x    5 oracle   dba             256 Aug 12 2009  /
drwxr-xr-x    7 oracle   dba             256 Aug 12 2009  oui/
drwxr-xr-x    2 oracle   dba            4096 Aug 12 2009  jlib/
drwxr-xr-x   14 oracle   dba            4096 Aug 12 2009  sysman/
drwxr-xr-x   10 oracle   dba             256 Aug 12 2009  precomp/
drwxr-xr-x    3 oracle   dba             256 Aug 12 2009  odbc/
drwxr-x---   11 oracle   dba            4096 Aug 12 2009  ctx/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4tera/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4ingr/
drwxr-x---    3 oracle   dba             256 Aug 12 2009  tg4ifmx/
drwxr-xr-x   15 oracle   dba            4096 Aug 12 2009  rdbms/
-rwxr-x---    1 oracle   dba           11472 Aug 12 2009  root.sh*
drwxr-x---    5 oracle   dba            4096 Aug 12 2009  install/
drwxr-x---   15 oracle   dba            4096 Aug 12 2009  inventory/
drwxr-x---    6 oracle   dba             256 Aug 12 2009  cfgtoollogs/
-rw-r--r--    1 oracle   dba               0 Aug 12 2009  CPU_JULY_09
drwxr-xr-x    3 oracle   dba             256 Nov 10 2009  log/
drwxr-x---   14 oracle   dba            4096 Mar 29 09:28 ccr/
drwxr-x---    5 oracle   dba            4096 Mar 29 09:28 rda/
-rw-r--r--    1 oracle   dba             175 May  4 16:06 oraInst.loc.050410
-rw-r--r--    1 oracle   dba             173 May  4 16:08 oraInst.loc
drwxr-xr-x    6 oracle   dba             256 May  4 17:53 cpu/
drwxr-x---    7 oracle   dba            4096 May  4 17:53 oraInventory.10204/
drwxr-xr-x    2 oracle   dba           20480 May  4 17:54 bin/
drwxr-xr-x    3 oracle   dba           12288 May  4 17:54 lib/
drwxr-xr-x    2 oracle   dba           12288 May  4 17:54 lib32/
drwxr-xr-x    7 oracle   dba            4096 Jul 20 01:58 OPatch/
drwxr-xr-x    2 oracle   dba             256 Sep  9 10:36 patches/
drwxr-x---    2 oracle   dba            4096 Sep 22 06:16 dbs/
drwxr-xr-x    4 oracle   dba             256 Sep 22 10:07 patches_10204/
-rw-r--r--    1 oracle   dba        29361438 Sep 22 10:29 p6880880_102000_AIX64-5L.zip
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ cpd OPatch/
ksh: cp^?d:  not found
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ lcd 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4
$ cd OPatch/
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ ls -lrt
total 128
drwxr-xr-x    4 oracle   dba             256 Jun 30 23:58 opatchprereqs/
drwxr-xr-x    2 oracle   dba             256 Jun 30 23:58 jlib/
drwxr-xr-x    2 oracle   dba             256 Jun 30 23:58 docs/
drwxr-xr-x    4 oracle   dba             256 Jul  5 06:19 ocm/
-rw-r--r--    1 oracle   dba            2576 Jul 20 01:58 opatch.pl
-rw-r--r--    1 oracle   dba              49 Jul 20 01:58 opatch.ini
-rwxr-xr-x    1 oracle   dba            8085 Jul 20 01:58 opatch.bat*
-r-x--x---    1 oracle   dba           13252 Jul 20 01:58 opatch*
-rw-r--r--    1 oracle   dba           23695 Jul 20 01:58 emdpatch.pl
drwxr-xr-x    3 oracle   dba            4096 Jul 20 01:58 crs/
-rw-r--r--    1 oracle   dba            2417 Jul 20 01:58 README.txt
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ k
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ opatch version
Invoking OPatch 10.2.0.5.0

OPatch Version: 10.2.0.5.0

OPatch succeeded.
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ opatch lsinventory
Invoking OPatch 10.2.0.5.0

Oracle Interim Patch Installer version 10.2.0.5.0
Copyright (c) 2010, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v10.2.0.4
Central Inventory : /oracle/home/oraInventory
   from           : /etc/oraInst.loc
OPatch version    : 10.2.0.5.0
OUI version       : 10.2.0.4.0
OUI location      : /oracle/product/v10.2.0.4/oui
Log file location : /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch2010-09-22_10-31-42AM.log

Patch history file: /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch_history.txt

List of Homes on this system:

  Home name= oms10g, Location= "/oracle/product/oem/oms10g"
  Home name= agent10g, Location= "/oracle/product/oem/agent10g"
Inventory load failed... OPatch cannot load inventory for the given Oracle Home.
Possible causes are:
   Oracle Home dir. path does not exist in Central Inventory
   Oracle Home is a symbolic link
   Oracle Home inventory is corrupted
LsInventorySession failed: OracleHomeInventory gets null oracleHomeInfo

OPatch failed with error code 73
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cat /etc/oraInst.loc
inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
#inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inst_group=dba
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ vi 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cp /etc/oraInst.loc /etc/oraInst.loc.old
cp: /etc/oraInst.loc.old: Permission denied
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cp /etc/oraInst.loc /etc/oraInst.loc.viold2
cp: /etc/oraInst.loc.viold2: Permission denied
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cp /etc/oraInst.loc /etc/oraInst.loc.old2
cp: /etc/oraInst.loc.old2: Permission denied
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ id
uid=200(oracle) gid=200(dba)
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ vi /etc/oraInst.loc
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cp /etc/oraInst.loc /oracle/product/v10.2.0.4/OPatch
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cp /etc/oraInst.loc /oracle/product/v10.2.0.4/
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ vi /etc/oraInst.loc
"/etc/oraInst.loc" 4 lines, 173 characters inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
#inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inst_group=dba
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"/etc/oraInst.loc" 4 lines, 173 characters


:wq"/etc/oraInst.loc" 4 lines, 172 characters 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$  opatch lsinventory
Invoking OPatch 10.2.0.5.0

Oracle Interim Patch Installer version 10.2.0.5.0
Copyright (c) 2010, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v10.2.0.4
Central Inventory : /oracle/product/v10.2.0.4/oraInventory.10204
   from           : /etc/oraInst.loc
OPatch version    : 10.2.0.5.0
OUI version       : 10.2.0.4.0
OUI location      : /oracle/product/v10.2.0.4/oui
Log file location : /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch2010-09-22_10-43-12AM.log

Patch history file: /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch_history.txt

Lsinventory Output file location : /oracle/product/v10.2.0.4/cfgtoollogs/opatch/lsinv/lsinventory2010-09-22_10-43-12AM.txt

--------------------------------------------------------------------------------
Installed Top-level Products (2): 

Oracle Database 10g                                                  10.2.0.1.0
Oracle Database 10g Release 2 Patch Set 3                            10.2.0.4.0
There are 2 products installed in this Oracle Home.


Interim patches (34) :

Patch  9173248      : applied on Tue May 04 17:53:51 CDT 2010
Unique Patch ID:  12019569
   Created on 9 Dec 2009, 07:37:56 hrs PST8PDT
   Bugs fixed:
     9173248

Patch  9173244      : applied on Tue May 04 17:53:46 CDT 2010
Unique Patch ID:  12019569
   Created on 9 Dec 2009, 07:37:54 hrs PST8PDT
   Bugs fixed:
     9173244

Patch  9119226      : applied on Tue May 04 17:53:42 CDT 2010
Unique Patch ID:  12019569
   Created on 5 Jan 2010, 23:11:51 hrs PST8PDT
   Bugs fixed:
     8534387, 8290506, 9119226, 7375644, 8836308, 7150470, 7592346

Patch  8836686      : applied on Tue May 04 17:53:38 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:36 hrs PST8PDT
   Bugs fixed:
     8836686

Patch  8836684      : applied on Tue May 04 17:53:35 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:34 hrs PST8PDT
   Bugs fixed:
     8836684

Patch  8836683      : applied on Tue May 04 17:53:31 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:33 hrs PST8PDT
   Bugs fixed:
     8309623, 8836683

Patch  8836681      : applied on Tue May 04 17:53:27 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:31 hrs PST8PDT
   Bugs fixed:
     8836681, 8309587

Patch  8836678      : applied on Tue May 04 17:53:22 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:29 hrs PST8PDT
   Bugs fixed:
     8836678

Patch  8836677      : applied on Tue May 04 17:53:18 CDT 2010
Unique Patch ID:  12019569
   Created on 11 Sep 2009, 01:30:13 hrs PST8PDT
   Bugs fixed:
     8836677

Patch  8836675      : applied on Tue May 04 17:53:14 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:23 hrs PST8PDT
   Bugs fixed:
     8309637, 8836675

Patch  8836671      : applied on Tue May 04 17:53:10 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:23 hrs PST8PDT
   Bugs fixed:
     8836671

Patch  8836667      : applied on Tue May 04 17:53:06 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:21 hrs PST8PDT
   Bugs fixed:
     8836667

Patch  8568405      : applied on Wed Aug 12 16:42:27 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:27 hrs PST8PDT
   Bugs fixed:
     8568405

Patch  8568404      : applied on Wed Aug 12 16:42:22 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:25 hrs PST8PDT
   Bugs fixed:
     8568404

Patch  8568402      : applied on Wed Aug 12 16:42:17 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:23 hrs PST8PDT
   Bugs fixed:
     6870937, 8568402

Patch  8568398      : applied on Wed Aug 12 16:42:11 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:20 hrs PST8PDT
   Bugs fixed:
     6392076, 8568398

Patch  8568397      : applied on Wed Aug 12 16:42:04 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:17 hrs PST8PDT
   Bugs fixed:
     8568397

Patch  8568395      : applied on Wed Aug 12 16:41:59 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:15 hrs PST8PDT
   Bugs fixed:
     8309639, 8568395

Patch  8309642      : applied on Wed Aug 12 16:41:49 CDT 2009
Unique Patch ID:  11408846
   Created on 18 Mar 2009, 20:38:30 hrs PST8PDT
   Bugs fixed:
     8309642

Patch  8309632      : applied on Wed Aug 12 16:41:39 CDT 2009
Unique Patch ID:  11408846
   Created on 18 Mar 2009, 20:37:46 hrs PST8PDT
   Bugs fixed:
     8309632

Patch  8309592      : applied on Wed Aug 12 16:41:30 CDT 2009
Unique Patch ID:  11408846
   Created on 18 Mar 2009, 20:36:51 hrs PST8PDT
   Bugs fixed:
     8309592

Patch  7609058      : applied on Wed Aug 12 16:41:20 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 17:59:56 hrs PST8PDT
   Bugs fixed:
     7609058

Patch  7609057      : applied on Wed Aug 12 16:41:15 CDT 2009
Unique Patch ID:  11408846
   Created on 4 Jun 2009, 12:10:30 hrs PST8PDT
   Bugs fixed:
     7609057

Patch  7375617      : applied on Wed Aug 12 16:41:10 CDT 2009
Unique Patch ID:  11408846
   Created on 16 Sep 2008, 02:00:43 hrs PST8PDT
   Bugs fixed:
     7375617

Patch  7375613      : applied on Wed Aug 12 16:41:06 CDT 2009
Unique Patch ID:  11408846
   Created on 16 Sep 2008, 02:00:41 hrs PST8PDT
   Bugs fixed:
     7375613

Patch  7375611      : applied on Wed Aug 12 16:41:01 CDT 2009
Unique Patch ID:  11408846
   Created on 16 Sep 2008, 02:00:38 hrs PST8PDT
   Bugs fixed:
     7375611

Patch  7197583      : applied on Wed Aug 12 16:40:56 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:32 hrs PST8PDT
   Bugs fixed:
     7197583

Patch  7155254      : applied on Wed Aug 12 16:40:46 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:30 hrs PST8PDT
   Bugs fixed:
     7155254

Patch  7155253      : applied on Wed Aug 12 16:39:06 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:27 hrs PST8PDT
   Bugs fixed:
     7155253

Patch  7155252      : applied on Wed Aug 12 16:37:46 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:25 hrs PST8PDT
   Bugs fixed:
     7155252

Patch  7155251      : applied on Wed Aug 12 16:37:41 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:24 hrs PST8PDT
   Bugs fixed:
     7155251

Patch  7155250      : applied on Wed Aug 12 16:37:36 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:22 hrs PST8PDT
   Bugs fixed:
     7155250

Patch  7155249      : applied on Wed Aug 12 16:37:30 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:01 hrs PST8PDT
   Bugs fixed:
     7155249

Patch  7155248      : applied on Wed Aug 12 16:37:24 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:06:50 hrs PST8PDT
   Bugs fixed:
     7155248



--------------------------------------------------------------------------------

OPatch succeeded.
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ k
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cd /etc
doem1s @ oem0stl0:/etc
$ ls -lrt
total 8912
-rw-r--r--    1 root     system         1066 Dec 31 1969  info-dir
-rw-rw-r--    1 root     system         4388 Dec 31 1969  3270_arab_kyb.map
-rw-rw-r--    1 root     system         3134 Dec 31 1969  3270.keys
-r--r--r--    1 root     system        19238 Dec 31 1969  map3270
-rw-r-----    1 ipsec    ipsec          3831 Dec 31 1969  isakmpd.conf
-rw-rw-r--    1 root     system         1895 Dec 31 1969  hosts.lpd
-rw-rw-r--    1 root     system        50797 Dec 31 1969  gated.conf
-rw-rw-r--    1 root     system        29085 Dec 31 1969  dhcpsd.cnf
-rw-rw-r--    1 root     system         3513 Dec 31 1969  dhcprd.cnf
-rw-r--r--    1 root     system         9809 Dec 31 1969  dhcpcd.ini
-rw-rw----    1 root     system         1147 Dec 31 1969  dfpd.conf
-rw-r-----    1 root     system         2302 Dec 31 1969  clsnmp.conf
-rw-rw-r--    1 root     system        24321 Dec 31 1969  binld.cnf
-rw-rw-r--    1 root     system         5943 Dec 31 1969  3270keys.hft
-rw-r--r--    1 root     system         3036 Dec 31 1969  rsvpd.conf
-rwxr-xr-x    1 root     system          968 Dec 31 1969  rc.qos*
-r-xr-xr--    1 bin      bin            5187 Dec 31 1969  rc.net.serial*
-rw-rw-r--    1 root     system        29568 Dec 31 1969  pxed.cnf
-rw-r--r--    1 root     system         2229 Dec 31 1969  policyd.conf
-rw-r--r--    1 root     system         2432 Dec 31 1969  mrouted.conf
drwxr-xr-x    3 root     system          256 Dec 31 1969  lpp/
-rw-r--r--    1 root     system         3595 Dec 31 1969  cdromd.conf
-rw-r-----    1 root     system        10000 Dec 31 1969  snmpdv3.conf
drwxr-xr-x    3 root     system          256 Dec 31 1969  dt/
-rwxrwxr-x    1 root     system           24 Dec 31 1969  fb_18_41_12_31*
-rw-r--r--    1 root     system            0 Jan  2 1970  ntp.trace
-rw-r--r--    1 root     security        526 Jan 15 1970  passwd.bak
-rw-r--r--    1 root     system         3956 Feb 11 1970  syslog.conf.18jan2005
-rw-r--r--    1 root     system          526 Feb 19 1970  passwd.sdb
-rw-r--r--    1 root     system          357 Feb 19 1970  group.bak
-rw-r--r--    1 root     security       1706 Feb 20 1970  group.backup.030770
-rw-r--r--    1 root     system           37 Mar  4 1970  snmpd.boots
-rw-r--r--    1 root     system           13 Mar  4 1970  powerpath_registration
dr-xr-xr-x    3 root     system          256 Mar  7 1970  ca/
-rw-r--r--    1 root     system         2863 Mar  7 1970  inittab.pre-acx
-rwxrwxr--    1 root     system          142 Aug  7 2003  rc.tma1*
-rw-r--r--    1 root     system           70 Mar 28 2005  TIVGUID
drwxr-xr-x    4 root     system          256 Apr 25 2005  bgs/
-rw-r--r--    1 root     system        23271 Apr 25 2005  services.Apr-25-2005.ORIG
-rw-r--r--    1 root     system         4949 Apr 25 2005  inetd.conf.Apr-25-2005.ORIG
-rw-r-----    1 root     system            0 May 20 2005  Spmi_shm_hook
-rwxr-xr-x    1 root     system           55 Jul  5 2005  rc.shutdown-pre-tecad_logfile*
-rw-r--r--    1 root     system        71787 Jul 16 2005  seos.ini.orig
-r--r--r--    1 root     system          177 Jul 16 2005  profile.CA
-r--r--r--    1 root     system          265 Jul 16 2005  csh_login.CA
-rwxrwxr-x    1 root     system          558 Nov  9 2005  fb_15_40_11_09*
-rwxr-xr-x    1 root     system          969 Jan 26 2006  fb_11_20_01_26*
-rw-r--r--    1 root     system         1767 Jan 26 2006  ogroup
-rwxr-xr-x    1 root     system          992 Jan 30 2006  fb_14_13_01_30*
-rw-r--r--    1 root     system         7352 Mar  7 2006  basecust
-rwxr-xr-x    1 root     system          992 Mar  7 2006  fb_14_32_03_07*
-rw-r--r--    1 root     system            7 Mar  7 2006  muxatmd.pid
-rwxr-xr-x    1 root     system          263 Mar  7 2006  fb_15_55_03_07*
-rwxr-xr-x    1 root     system          598 Mar 29 2006  fb_08_25_03_29*
-rw-r--r--    1 root     system          754 Mar 31 2006  cdrecord.conf
-rwxr-xr-x    1 root     system          598 Jan  3 2007  fb_15_13_01_03*
drwxr-xr-x    3 bin      bin             256 Feb  7 2007  java14/
-rwxr-xr-x    1 root     system         2918 Mar  7 2007  rc.orig.241820*
-rwxr-xr-x    1 root     system          598 Mar  8 2007  fb_09_37_03_08*
-rwxr-xr-x    1 root     system          598 Apr 24 2007  fb_12_14_04_24*
-rw-r-----    1 root     system            0 May  2 2007  xms_shm_hook
-rw-r--r--    1 root     system           13 May 31 2007  exclude.rootvg
-rwxrwxr-x    1 root     system          159 May 31 2007  fb_15_21_05_31*
-rwxr-xr-x    1 root     system          999 Nov 14 2007  rc.filepath*
-rwxr-xr-x    1 root     system          988 Dec 18 2007  fb_13_58_12_18*
-rw-r--r--    1 root     system           34 Jan  3 2008  rmtab
-rwxr-xr-x    1 root     system          988 Jun  4 2008  fb_08_48_06_04*
-rw-r--r--    1 root     system          998 Jun  4 2008  issue
-rwxr-xr-x    1 root     system          598 Jul  3 2008  fb_10_23_07_03*
-rwxr-xr-x    1 root     system          988 Dec  9 2008  fb_11_01_12_09*
-rwxr-xr-x    1 root     system          598 Jan 26 2009  fb_08_35_01_26*
-rw-r--r--    1 root     system            0 Jan 26 2009  xtab
-rwxr-xr-x    1 root     system          965 Jul 17 2009  fb_10_31_07_17*
drwxr-xr-x    3 ldap     ldap            256 Jul 17 2009  ldap/
drwxr-xr-x    3 bin      bin             256 Jul 17 2009  java5/
drwxr-xr-x    3 bin      bin             256 Jul 17 2009  opt/
-rw-rw----    1 root     printq            4 Jul 17 2009  qconfig.bin
-rwxr-xr-x    1 root     system          575 Jul 19 2009  fb_09_21_07_19*
-rwxr-xr-x    1 root     system          575 Sep  8 2009  fb_15_15_09_08*
-rw-rw-r--    1 root     system          129 Oct  4 2009  ct_node_id
-rwxr-xr-x    1 root     system          989 Oct  4 2009  fb_03_50_10_04*
-r--r--r--    1 root     system         5810 Oct  7 2009  pam.conf.20091008
-rw-r--r--    1 root     system         1326 Oct  7 2009  sd_pam.conf
-r--------    1 root     system           87 Oct  8 2009  emcp_registration
-rw-r--r--    1 root     system         3940 Oct  9 2009  inittab.091009_090616.preI.save
-r-x------    1 root     system         9292 Oct  9 2009  set_scsi_id*
-r-x------    1 root     system          669 Oct  9 2009  rc.emcpower*
-r-x------    1 root     system          743 Oct  9 2009  rc.emcp_mond*
-r-x------    1 root     system          565 Oct  9 2009  rc.powermig*
-r-x------    1 root     system         1458 Oct  9 2009  rc.emcp_xcryptd*
-rwxr--r--    1 root     system         1420 Oct 12 2009  dbora*
-rw-r--r--    1 root     system         4265 Oct 12 2009  inittab.101209
-rw-r--r--    1 root     system         4644 Oct 13 2009  inetd.conf.Oct-13-2009.ORIG
-rw-r--r--    1 root     system       347881 Oct 13 2009  services.Oct-13-2009.ORIG
drwxr-xr-x    3 root     system          256 Oct 13 2009  ibm/
drwxr-xr-x    2 root     system          256 Oct 13 2009  cit/
-rwxr-xr-x    1 root     system          224 Oct 14 2009  profile.tsm*
-rwxr--r--    1 root     system           55 Oct 14 2009  rc.twdaemon*
drwxr-xr-x    2 root     system          256 Oct 14 2009  TWS/
-rw-r--r--    1 root     system         2219 Oct 15 2009  hosts.20091015
-r--------    1 root     system        13821 Nov 18 2009  pw-syscall64
lrwxrwxrwx    1 root     system           12 Nov 18 2009  pw-syscall4.1@ -> ./pw-syscall
-r--------    1 root     system        13285 Nov 18 2009  pw-syscall32
lrwxrwxrwx    1 root     system           14 Nov 18 2009  pw-syscall.64bit_kernel@ -> ./pw-syscall64
lrwxrwxrwx    1 root     system           12 Nov 18 2009  pw-syscall.32bit_kernel@ -> ./pw-syscall
-r--------    1 root     system        12632 Nov 18 2009  pw-syscall
drwxr-xr-x    2 root     system          256 Nov 18 2009  ora_save_09-11-18.10:30:02/
-r-x------    1 root     system        15850 Nov 18 2009  loadext*
-rw-r--r--    1 root     system         8094 Dec  9 2009  hosts.20091209
-rw-r--r--    1 root     system        17534 Dec  9 2009  opasswd
-rw-r--r--    1 root     system            7 Dec 15 2009  inetd.pid
-rw-r--r--    1 root     system         8851 Jan 10 2010  hosts.20100111
-rw-rw-r--    1 root     system         4720 Jan 11 2010  netsvc.conf
-rw-r--r--    1 root     system         4630 Jan 30 2010  inittab.itm1
-rw-r--r--    1 root     system           96 Feb 21 2010  auto_master
-rw-r--r--    1 root     system           94 Feb 21 2010  auto_home
drwx------    5 root     system          256 Feb 21 2010  multibos/
-rw-r--r--    1 root     system           71 Feb 22 2010  PowerPathExtensions
-rwx------    1 root     system          512 Feb 22 2010  rc.shutdown*
-r--------    1 root     system         1217 Feb 22 2010  disk.proto.ext.scsi.pseudo.power
-r--------    1 root     system        19040 Feb 22 2010  powermt.custom
-rw-r--r--    1 bin      bin             121 Feb 22 2010  shells
-rw-rw-r--    1 root     printq         1640 Feb 22 2010  qconfig
-rw-r--r--    1 bin      bin            3324 Feb 22 2010  pse.conf
-rw-r--r--    1 root     system         2279 Feb 22 2010  profile
-rw-rw-r--    1 bin      system            0 Feb 22 2010  dumpdates
-rw-r--r--    1 bin      bin            1547 Feb 22 2010  dlpi.conf
-rw-r--r--    1 root     system         1564 Feb 22 2010  csh.login
-r-xr-xr-x    1 bin      bin            1298 Feb 22 2010  csh.cshrc*
-rw-r--r--    1 root     system         3598 Feb 22 2010  cronlog.conf
-rw-r--r--    1 root     system         2270 Feb 22 2010  consdef
-rw-rw-r--    1 root     system          258 Feb 22 2010  check_config.files
-rw-r--r--    1 bin      bin            1721 Feb 22 2010  xtiso.conf
-rw-r--r--    1 root     system          408 Feb 22 2010  swapspaces
-rw-r--r--    1 root     security       2128 Feb 22 2010  nscontrol.conf
-r--r--r--    1 bin      bin             880 Feb 22 2010  motd
-rwx------    1 root     system         3121 Feb 22 2010  rc.powerfail*
-rwx------    1 root     system         1161 Feb 22 2010  rc.ha_star*
-r-xr-xr--    1 bin      bin            2308 Feb 22 2010  rc.dacinet*
drwxr-xr-x   11 root     system         4096 Feb 22 2010  rc.d/
-r-xr-xr--    1 bin      bin            1247 Feb 22 2010  rc.CC*
-r-xr-xr--    1 bin      bin            1063 Feb 22 2010  rc.C2*
-rw-r--r--    1 bin      bin            2058 Feb 22 2010  pse_tune.conf
drwxr-xr-x    4 root     system          256 Feb 22 2010  wlm/
-r--r--r--    1 root     system         2340 Feb 22 2010  tsh_profile
-rw-rw-r--    1 root     system        16873 Feb 22 2010  trcfmt.Z
lrwxrwxrwx    1 root     bin              16 Feb 22 2010  drivers@ -> /usr/lib/drivers/
lrwxrwxrwx    1 root     system           18 Feb 22 2010  microcode@ -> /usr/lib/microcode/
lrwxrwxrwx    1 root     system           16 Feb 22 2010  methods@ -> /usr/lib/methods/
lrwxrwxrwx    1 bin      bin              24 Feb 22 2010  dtappintegrate@ -> /usr/sbin/dtappintegrate*
lrwxrwxrwx    1 root     system           14 Feb 22 2010  init@ -> /usr/sbin/init*
lrwxrwxrwx    1 root     system           10 Feb 22 2010  locks@ -> /var/locks/
drwxr-xr-x    3 root     system          256 Feb 22 2010  ewlm/
-rw-r--r--    1 root     security       1703 Feb 22 2010  methods.cfg
-rw-rw-r--    1 root     system        35937 Feb 22 2010  magic
lrwxrwxrwx    1 bin      bin              34 Feb 22 2010  LUMls.rc@ -> /var/LicenseUseManagement/LUMls.rc*
drwx------    2 root     system          256 Feb 22 2010  iscsi/
-rw-r--r--    1 root     system         1113 Feb 22 2010  hba.conf
-r-xr-x---    1 root     system          966 Feb 22 2010  preserve.list*
drwxr-xr-x    2 bin      bin            4096 Feb 22 2010  ncs/
drwxr-xr-x    2 root     system         4096 Feb 22 2010  mh/
-r-xr-xr-x    1 root     system          673 Feb 22 2010  rc.stopaacct*
-r-xr-xr-x    1 root     system          543 Feb 22 2010  rc.startaacct*
drwxr-xr-x    4 root     system          256 Feb 22 2010  project/
drwxr-xr-x    2 root     system          256 Feb 22 2010  acct/
lrwxrwxrwx    1 bin      bin              17 Feb 22 2010  i4ls.rc@ -> /var/ifor/i4ls.rc*
-rw-r--r--    1 bin      bin           15390 Feb 22 2010  atm.defs
-rw-------    1 root     system         6193 Feb 22 2010  pam.conf.authexec
-r--r--r--    1 root     system         4536 Feb 22 2010  options.file
-rw-r-----    1 root     system       112301 Feb 22 2010  mib.defs
-r--r--r--    1 root     system         6968 Feb 22 2010  isoservices
-r--r--r--    1 root     system         3306 Feb 22 2010  isomacros
-r--r--r--    1 root     system        12513 Feb 22 2010  isoentities
-r--r--r--    1 root     system         8573 Feb 22 2010  isobjects
-r--r--r--    1 root     system         2717 Feb 22 2010  isoaliases
drwxr-xr-x    2 root     system          256 Feb 22 2010  dhcpv6/
-rw-rw-r--    1 root     system         6201 Feb 22 2010  3270keys.dtterm
lrwxrwxrwx    1 root     system           15 Feb 22 2010  uucpd@ -> /usr/sbin/uucpd*
drwxr-xr-x    2 root     sys            4096 Feb 22 2010  uucp/
-r-xr-xr-x    1 root     system         2664 Feb 22 2010  tcp.clean*
drwxrwxr-x    2 root     system          256 Feb 22 2010  snmpinterfaces/
-r-xr-xr-x    1 root     system         1155 Feb 22 2010  slip.logout*
-r-xr-xr-x    1 root     system         1315 Feb 22 2010  slip.login*
-rw-r--r--    1 root     system         1227 Feb 22 2010  slip.hosts
-rw-rw-r--    1 root     system         1274 Feb 22 2010  telnet.conf
-rw-r--r--    1 root     system         4676 Feb 22 2010  syslog.conf
-rw-r--r--    1 root     system         2451 Feb 22 2010  bootptab
-rw-r-----    1 root     system         1810 Feb 22 2010  snmpmibd.conf
-rw-r-----    1 root     system         2603 Feb 22 2010  snmpd.peers
-rw-r-----    1 root     system        10043 Feb 22 2010  snmpd.conf
-r-xr-xr--    1 bin      bin            8614 Feb 22 2010  rc.net*
-r-xr-xr--    1 bin      bin            3364 Feb 22 2010  rc.bsdnet*
-rw-r-----    1 root     system         1852 Feb 22 2010  hostmibd.conf
-rw-r-----    1 root     system         7655 Feb 22 2010  aixmibd.conf
-rw-rw-r--    1 root     system         5397 Feb 22 2010  slp.conf
drwxr-xr-x    2 root     system          256 Feb 22 2010  mail/
lrwxrwxrwx    1 root     system           21 Feb 22 2010  sendmail.cf@ -> /etc/mail/sendmail.cf
lrwxrwxrwx    1 root     system           15 Feb 22 2010  route@ -> /usr/sbin/route*
lrwxrwxrwx    1 root     system           14 Feb 22 2010  ping@ -> /usr/sbin/ping*
lrwxrwxrwx    1 root     system           18 Feb 22 2010  ifconfig@ -> /usr/sbin/ifconfig*
lrwxrwxrwx    1 root     system           17 Feb 22 2010  aliases@ -> /etc/mail/aliases
-rw-r--r--    1 root     system         1040 Feb 22 2010  rpc
-rwxr-xr-x    1 root     system         9429 Feb 22 2010  rc.nfs*
lrwxrwxrwx    1 root     system           20 Feb 22 2010  rpc.pcnfsd@ -> /usr/sbin/rpc.pcnfsd*
lrwxrwxrwx    1 root     system           20 Feb 22 2010  gfsinstall@ -> /usr/sbin/gfsinstall*
drwxr-xr-x    3 bin      bin             256 Feb 22 2010  X11/
drwxr-xr-x    5 root     system          256 Feb 22 2010  perf/
-rwxr-xr--    1 root     system         7298 Feb 22 2010  rc.tcpip.tr.backup*
drwxr-xr-x    3 root     system          256 Feb 22 2010  ha/
-rw-rw-r--    1 root     system         2016 Feb 22 2010  environment
-rwxrwxr--    1 root     system         7381 Feb 22 2010  rc.tcpip*
-rwxrwxr-x    1 root     system          409 Feb 22 2010  fb_12_22_02_22*
-rw-r--r--    1 root     system         1035 Feb 22 2010  niminfo
-rw-r--r--    1 root     system         2049 Feb 22 2010  hosts.equiv
-r--r--r--    1 root     system         6482 Feb 22 2010  pam.conf
-rw-r--r--    1 root     system       347361 Feb 22 2010  services.bak
-rw-r--r--    1 root     system         4570 Feb 22 2010  inetd.conf.bak
lrwxrwxrwx    1 root     system           34 Feb 22 2010  seos.ini@ -> /sys_apps_01/security/acx/seos.ini
-rw-r--r--    1 root     system       347379 Apr 14 12:24 services.Apr-14-2010.ORIG
-rw-r--r--    1 root     system       347379 Apr 14 12:24 services
-rw-r--r--    1 root     system         4683 Apr 14 12:24 inetd.conf.Apr-14-2010.ORIG
-rw-rw-r--    1 root     system         1036 Apr 28 10:46 ntp.conf
-rwxr-xr-x    1 root     system          741 May 12 13:24 rc.itm1*
-rw-r--r--    1 root     system         9027 Jun 16 23:57 hosts.17Jun2010
-rwxr-x---    1 root     system         6398 Jul  9 15:51 tlmlog.properties*
-rw-r--r--    1 root     system         2106 Jul  9 15:51 tlm_mobility.cfg
-rw-r--r--    1 root     system         9102 Jul 12 14:02 hosts.13thJuly2010
-rw-rw-r--    1 root     system         4683 Jul 14 01:13 inetd.conf
-rw-r--r--    1 root     system         4697 Jul 19 06:53 inittab.19july10
-rw-r--r--    1 root     system          281 Aug  8 22:01 auto_direct
drwxrwxr-x    2 root     system         4096 Aug  8 22:42 vg/
-rw-r--r--    1 root     system          184 Aug 10 11:56 oratab.10thAug2010
-rw-r--r--    1 root     system         1771 Aug 10 12:34 vfs
-rwxr-xr-x    1 root     system         4152 Aug 10 12:34 rc.nfs4ss*
-rwxr-xr-x    1 root     system         4391 Aug 10 12:34 nfs.clean*
-r-xr-xr--    1 root     system         2087 Aug 10 12:35 securetcpip*
-rw-rw-r--    1 root     printq          580 Aug 10 12:37 prtglobalconfig
lrwxrwxrwx    1 root     system           12 Aug 10 12:40 wpars@ -> /etc/corrals/
-r-x------    2 root     system         2500 Aug 10 12:40 rc.wpars*
-r-x------    2 root     system         2500 Aug 10 12:40 rc.corrals*
-r-xr-xr--    1 bin      bin            6303 Aug 10 12:40 rc.bootc*
drwxrwxr-x    2 root     system         4096 Aug 10 12:40 objrepos/
drwx--x--x    3 root     system          256 Aug 10 12:40 corrals/
-r-x------    1 bin      bin            1762 Aug 10 12:40 rc.security.boot*
-rw-rw-r--    1 root     system      1446634 Aug 10 12:42 trcfmt
-r-xr-x---    1 root     system         4339 Aug 10 12:46 rc.tcptr*
-rw-r--r--    1 root     system         9921 Aug 10 12:46 protocols
-rw-r--r--    1 root     system         6482 Aug 10 12:46 pam.conf.websm.bak
-r-xr-xr-x    1 ipsec    ipsec           705 Aug 10 12:46 rc.ike*
drwxr-xr-x    3 ipsec    staff           256 Aug 10 12:46 ipsec/
drwxr-xr-x    2 root     system          256 Aug 10 12:47 rpm/
-r--------    1 root     system           18 Aug 10 12:48 bosboot.sum
-rw-r--r--    1 root     system         4961 Aug 10 13:16 filesystems
-rw-r--r--    1 root     system         4697 Aug 14 05:04 inittab.14august2010
-rw-r--r--    1 root     system         4698 Aug 14 05:06 inittab.20100814_050624.preU.save
-rwxr-xr-x    1 root     system         3647 Aug 14 05:06 rc.orig.7078238*
-rw-r--r--    1 root     system            7 Aug 14 05:10 atmsvcd.pid
drwxr-xr-x    4 root     system         4096 Aug 14 05:10 emc/
-rw-r--r--    1 root     system         4311 Aug 14 05:10 tlmagent.ini
-rw-r--r--    1 root     system            8 Aug 14 05:10 syslog.pid
drwx------    2 root     system          256 Aug 14 05:10 tunables/
-rwxr-xr-x    1 root     system         3674 Aug 14 05:33 rc*
-rw-r--r--    1 root     system         4372 Aug 14 05:33 inittab.100814_052729.preI.save
-rw-r--r--    1 root     system         4697 Aug 14 05:33 inittab
-rwxr-xr-x    1 root     system          275 Aug 28 00:43 rc.tws*
-rw-r--r--    1 root     system         9134 Sep  8 09:31 hosts.Sep082010
-rw-rw-r--    1 root     system         9242 Sep 14 14:39 hosts
-rw-r--r--    1 root     system         4051 Sep 17 22:50 ftpusers
drwxr-xr-x    5 root     system          256 Sep 21 15:42 Tivoli/
drwxr-x---    9 root     security      16384 Sep 21 22:47 security/
-rw-r--r--    1 root     system        31151 Sep 22 07:02 passwd
-rw-r--r--    1 root     system         5234 Sep 22 07:02 group
-rw-r--r--    1 root     system            8 Sep 22 10:10 ntp.drift
-rw-rw-r--    1 oracle   dba             185 Sep 22 10:40 oratab
-rw-r--r--    1 oracle   dba             172 Sep 22 10:43 oraInst.loc
-rw-r--r--    1 root     system        33696 Sep 22 10:43 utmp
doem1s @ oem0stl0:/etc
$ vi oraInst.loc
"oraInst.loc" 4 lines, 172 characters inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inst_group=dba
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"oraInst.loc" 4 lines, 172 characters



inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inst_group=dba
inventory_loc=/oracle/product/v10.2:wq"oraInst.loc" 5 lines, 231 characters 
doem1s @ oem0stl0:/etc
$ cd /oracle/product/v11.1.0.7
doem1s @ oem0stl0:/oracle/product/v11.1.0.7
$ SEtetDb
ksh: SEt^?^?etDb:  not found
doem1s @ oem0stl0:/oracle/product/v11.1.0.7
$ styy erase 6?
doem1s @ oem0stl0:/oracle/product/v11.1.0.7
$ stty erase ^?
doem1s @ oem0stl0:/oracle/product/v11.1.0.7
$ dddssdadadadadadad
doem1s @ oem0stl0:/oracle/product/v11.1.0.7
$ 
doem1s @ oem0stl0:/oracle/product/v11.1.0.7
$ SetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 4

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [drct0s]    ORACLE_HOME = [/oracle/product/v11.1.0.7]

drct0s @ oem0stl0:/oracle/product/v11.1.0.7
$ ls -ltr
total 288
drwxr-xr-x    5 oracle   dba             256 Jul 31 2009  has/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  encryption/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  emdw/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  diagnostics/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  demo/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  csmig/
drwxr-xr-x    4 oracle   dba             256 Jul 31 2009  crs/
drwxr-xr-x    7 oracle   dba             256 Jul 31 2009  assistants/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  slax/
drwxr-xr-x    4 oracle   dba             256 Jul 31 2009  scheduler/
drwxr-xr-x    6 oracle   dba             256 Jul 31 2009  perl/
drwxr-xr-x    4 oracle   dba             256 Jul 31 2009  owm/
drwxr-xr-x    8 oracle   dba             256 Jul 31 2009  ord/
drwxr-xr-x    4 oracle   dba             256 Jul 31 2009  oracore/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  opsm/
drwxr-xr-x    5 oracle   dba             256 Jul 31 2009  olap/
drwxr-xr-x    7 oracle   dba             256 Jul 31 2009  odbc/
drwxr-xr-x    6 oracle   dba             256 Jul 31 2009  nls/
drwxr-xr-x    6 oracle   dba             256 Jul 31 2009  md/
drwxr-xr-x    8 oracle   dba             256 Jul 31 2009  javavm/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  sqlj/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  wwg/
drwxr-xr-x    4 oracle   dba             256 Jul 31 2009  uix/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  tg4sybs/
drwxr-xr-x    6 oracle   dba             256 Jul 31 2009  plsql/
drwxr-xr-x    2 oracle   dba             256 Jul 31 2009  mesg/
drwxr-xr-x    6 oracle   dba             256 Jul 31 2009  xdk/
drwxr-xr-x    2 oracle   dba             256 Jul 31 2009  instantclient/
drwxr-xr-x   14 oracle   dba            4096 Jul 31 2009  sqldeveloper/
drwxr-xr-x    4 oracle   dba             256 Jul 31 2009  clone/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  j2ee/
drwxr-xr-x    7 oracle   dba             256 Jul 31 2009  jdk/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  jdbc/
drwxr-xr-x    4 oracle   dba             256 Jul 31 2009  relnotes/
drwxr-xr-x    7 oracle   dba             256 Jul 31 2009  ccr/
drwxr-xr-x    6 oracle   dba             256 Jul 31 2009  mgw/
drwxr-xr-x    7 oracle   dba             256 Jul 31 2009  opmn/
drwxr-xr-x    7 oracle   dba             256 Jul 31 2009  css/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  cdata/
drwxr-xr-x   13 oracle   dba            4096 Jul 31 2009  ldap/
drwxr-xr-x   12 oracle   dba            4096 Jul 31 2009  srvm/
drwxr-xr-x    7 oracle   dba             256 Jul 31 2009  racg/
drwxr-xr-x    2 oracle   dba             256 Jul 31 2009  config/
drwxr-xr-x   11 oracle   dba            4096 Jul 31 2009  ctx/
drwxr-xr-x   12 oracle   dba            4096 Jul 31 2009  network/
drwxr-xr-x   15 oracle   dba            4096 Jul 31 2009  ultrasearch/
drwxr-xr-x    6 oracle   dba             256 Jul 31 2009  hs/
-rwxr-xr-x    1 oracle   dba           10816 Jul 31 2009  root.sh.old*
drwxr-xr-x   14 oracle   dba            4096 Jul 31 2009  rdbms/
-rw-r--r--    1 oracle   dba              38 Jul 31 2009  install.platform
drwxr-xr-x    6 oracle   dba             256 Jul 31 2009  OPatch/
drwxr-xr-x    7 oracle   dba             256 Jul 31 2009  oui/
drwxr-xr-x   28 oracle   dba            4096 Jul 31 2009  owb/
drwxr-xr-x   15 oracle   dba            4096 Jul 31 2009  sysman/
drwxr-xr-x    4 oracle   dba             256 Jul 31 2009  emcli/
drwxr-xr-x    9 oracle   dba             256 Jul 31 2009  precomp/
drwxr-xr-x    3 oracle   dba             256 Jul 31 2009  ucp/
drwxr-xr-x    2 oracle   dba             256 Jul 31 2009  instantclient32/
drwxr-xr-x    8 oracle   dba            4096 Jul 31 2009  apex/
drwxr-xr-x   20 oracle   dba            4096 Jul 31 2009  oc4j/
drwxr-xr-x    8 oracle   dba             256 Jul 31 2009  sqlplus/
-rwxr-x---    1 oracle   dba           11091 Jul 31 2009  root.sh*
drwxr-xr-x    2 oracle   dba            4096 Jul 31 2009  jlib/
drwxr-xr-x    6 oracle   dba            4096 Jul 31 2009  install/
-rw-r--r--    1 oracle   dba             176 Mar  3 2010  oraInst.loc
drwxr-xr-x    6 oracle   dba            4096 Mar  3 2010  cfgtoollogs/
drwxr-xr-x   18 oracle   dba            4096 Mar  3 2010  inventory/
drwxr-xr-x    5 oracle   dba             256 Mar  3 2010  cpu/
drwxr-xr-x    6 oracle   dba             256 Mar  3 2010  oraInventory.11107/
drwxr-xr-x    2 oracle   dba            4096 Apr 29 10:51 lib32/
drwxr-xr-x    2 oracle   dba           28672 Apr 29 10:51 bin/
drwxr-xr-x    3 oracle   dba           16384 Apr 29 13:29 lib/
drwxr-xr-x    4 oracle   dba             256 Aug 10 13:31 log/
drwxr-xr-x    2 oracle   dba            4096 Aug 16 13:48 dbs/
drwxr-xr-x    3 oracle   dba             256 Sep 22 10:35 patches_11107/
drct0s @ oem0stl0:/oracle/product/v11.1.0.7
$ cat oraInst.loc
#inventory_loc=/oracle/home/oraInventory
##inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107
inst_group=dba
drct0s @ oem0stl0:/oracle/product/v11.1.0.7
$ cd cd /etc/
drct0s @ oem0stl0:/etc
$ vi oraInst.loc
"oraInst.loc" 5 lines, 231 characters inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inst_group=dba
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"oraInst.loc" 5 lines, 231 characters


~





inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107#inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204#:wq"oraInst.loc" 5 lines, 232 characters 
drct0s @ oem0stl0:/etc
$ opatch lsinvenexport PATH=$PATH:/oracle/product/v11.1.0.7/opOPatch
drct0s @ oem0stl0:/etc
$ opatch version
Invoking OPatch 11.1.0.6.2

OPatch Version: 11.1.0.6.2

OPatch succeeded.
drct0s @ oem0stl0:/etc
$ opatch lsinventory
Invoking OPatch 11.1.0.6.2

Oracle Interim Patch Installer version 11.1.0.6.2
Copyright (c) 2007, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v11.1.0.7
Central Inventory : /oracle/product/v11.1.0.7/oraInventory.11107
   from           : /etc/oraInst.loc
OPatch version    : 11.1.0.6.2
OUI version       : 11.1.0.7.0
OUI location      : /oracle/product/v11.1.0.7/oui
Log file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/opatch2010-09-22_10-50-03AM.log

Lsinventory Output file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/lsinv/lsinventory2010-09-22_10-50-03AM.txt

--------------------------------------------------------------------------------
Installed Top-level Products (2): 

Oracle Database 11g                                                  11.1.0.6.0
Oracle Database 11g Patch Set 1                                      11.1.0.7.0
There are 2 products installed in this Oracle Home.


Interim patches (18) :

Patch  9118622      : applied on Wed Mar 03 14:33:51 CST 2010
   Created on 4 Jan 2010, 04:05:12 hrs PST8PDT
   Bugs fixed:
     9118622

Patch  9118620      : applied on Wed Mar 03 14:33:46 CST 2010
   Created on 4 Jan 2010, 01:31:47 hrs PST8PDT
   Bugs fixed:
     9118620

Patch  9114072      : applied on Wed Mar 03 14:33:43 CST 2010
   Created on 23 Dec 2009, 12:13:30 hrs PST8PDT
   Bugs fixed:
     9114072, 8836375, 8290478, 8534338

Patch  8855577      : applied on Wed Mar 03 14:33:40 CST 2010
   Created on 25 Sep 2009, 06:23:00 hrs PST8PDT
   Bugs fixed:
     8855577

Patch  8855575      : applied on Wed Mar 03 14:33:36 CST 2010
   Created on 25 Sep 2009, 06:22:50 hrs PST8PDT
   Bugs fixed:
     8855575

Patch  8855570      : applied on Wed Mar 03 14:33:32 CST 2010
   Created on 2 Sep 2009, 08:23:21 hrs PST8PDT
   Bugs fixed:
     8306933, 8855570

Patch  8855565      : applied on Wed Mar 03 14:33:29 CST 2010
   Created on 2 Sep 2009, 08:16:23 hrs PST8PDT
   Bugs fixed:
     8855565

Patch  8855559      : applied on Wed Mar 03 14:33:26 CST 2010
   Created on 25 Sep 2009, 06:22:41 hrs PST8PDT
   Bugs fixed:
     8855559, 8563945

Patch  8855553      : applied on Wed Mar 03 14:33:23 CST 2010
   Created on 9 Sep 2009, 04:30:24 hrs PST8PDT
   Bugs fixed:
     8855553

Patch  8563948      : applied on Wed Mar 03 14:33:19 CST 2010
   Created on 11 Jun 2009, 10:30:13 hrs UTC
   Bugs fixed:
     8563948

Patch  8563947      : applied on Wed Mar 03 14:32:20 CST 2010
   Created on 11 Jun 2009, 10:29:36 hrs UTC
   Bugs fixed:
     8563947

Patch  8563946      : applied on Wed Mar 03 14:31:58 CST 2010
   Created on 11 Jun 2009, 10:28:00 hrs UTC
   Bugs fixed:
     8563946

Patch  8563944      : applied on Wed Mar 03 14:31:54 CST 2010
   Created on 11 Jun 2009, 10:22:59 hrs UTC
   Bugs fixed:
     6870937, 8563944

Patch  8563943      : applied on Wed Mar 03 14:31:50 CST 2010
   Created on 11 Jun 2009, 10:15:40 hrs UTC
   Bugs fixed:
     8563943

Patch  8563942      : applied on Wed Mar 03 14:31:45 CST 2010
   Created on 11 Jun 2009, 03:00:06 hrs PST8PDT
   Bugs fixed:
     8563942

Patch  8563941      : applied on Wed Mar 03 14:31:42 CST 2010
   Created on 11 Jun 2009, 02:59:26 hrs PST8PDT
   Bugs fixed:
     8563941

Patch  8342506      : applied on Wed Mar 03 14:31:38 CST 2010
   Created on 18 Mar 2009, 04:41:41 hrs PST8PDT
   Bugs fixed:
     8342506

Patch  8306934      : applied on Wed Mar 03 14:31:35 CST 2010
   Created on 18 Mar 2009, 06:26:03 hrs PST8PDT
   Bugs fixed:
     8306934



--------------------------------------------------------------------------------

OPatch succeeded.
drct0s @ oem0stl0:/etc
$ ps -ef | grep smon
  oracle  5963860        1   0   Aug 14      -  3:30 ora_smon_doem1s 
  oracle 10748230        1   0   Aug 16      -  4:15 ora_smon_drct0s 
  oracle 14418308  9306188   0 10:51:40  pts/6  0:00 grep smon 
drct0s @ oem0stl0:/etc
$ ls -lrt
total 8912
-rw-r--r--    1 root     system         1066 Dec 31 1969  info-dir
-rw-rw-r--    1 root     system         4388 Dec 31 1969  3270_arab_kyb.map
-rw-rw-r--    1 root     system         3134 Dec 31 1969  3270.keys
-r--r--r--    1 root     system        19238 Dec 31 1969  map3270
-rw-r-----    1 ipsec    ipsec          3831 Dec 31 1969  isakmpd.conf
-rw-rw-r--    1 root     system         1895 Dec 31 1969  hosts.lpd
-rw-rw-r--    1 root     system        50797 Dec 31 1969  gated.conf
-rw-rw-r--    1 root     system        29085 Dec 31 1969  dhcpsd.cnf
-rw-rw-r--    1 root     system         3513 Dec 31 1969  dhcprd.cnf
-rw-r--r--    1 root     system         9809 Dec 31 1969  dhcpcd.ini
-rw-rw----    1 root     system         1147 Dec 31 1969  dfpd.conf
-rw-r-----    1 root     system         2302 Dec 31 1969  clsnmp.conf
-rw-rw-r--    1 root     system        24321 Dec 31 1969  binld.cnf
-rw-rw-r--    1 root     system         5943 Dec 31 1969  3270keys.hft
-rw-r--r--    1 root     system         3036 Dec 31 1969  rsvpd.conf
-rwxr-xr-x    1 root     system          968 Dec 31 1969  rc.qos*
-r-xr-xr--    1 bin      bin            5187 Dec 31 1969  rc.net.serial*
-rw-rw-r--    1 root     system        29568 Dec 31 1969  pxed.cnf
-rw-r--r--    1 root     system         2229 Dec 31 1969  policyd.conf
-rw-r--r--    1 root     system         2432 Dec 31 1969  mrouted.conf
drwxr-xr-x    3 root     system          256 Dec 31 1969  lpp/
-rw-r--r--    1 root     system         3595 Dec 31 1969  cdromd.conf
-rw-r-----    1 root     system        10000 Dec 31 1969  snmpdv3.conf
drwxr-xr-x    3 root     system          256 Dec 31 1969  dt/
-rwxrwxr-x    1 root     system           24 Dec 31 1969  fb_18_41_12_31*
-rw-r--r--    1 root     system            0 Jan  2 1970  ntp.trace
-rw-r--r--    1 root     security        526 Jan 15 1970  passwd.bak
-rw-r--r--    1 root     system         3956 Feb 11 1970  syslog.conf.18jan2005
-rw-r--r--    1 root     system          526 Feb 19 1970  passwd.sdb
-rw-r--r--    1 root     system          357 Feb 19 1970  group.bak
-rw-r--r--    1 root     security       1706 Feb 20 1970  group.backup.030770
-rw-r--r--    1 root     system           37 Mar  4 1970  snmpd.boots
-rw-r--r--    1 root     system           13 Mar  4 1970  powerpath_registration
dr-xr-xr-x    3 root     system          256 Mar  7 1970  ca/
-rw-r--r--    1 root     system         2863 Mar  7 1970  inittab.pre-acx
-rwxrwxr--    1 root     system          142 Aug  7 2003  rc.tma1*
-rw-r--r--    1 root     system           70 Mar 28 2005  TIVGUID
drwxr-xr-x    4 root     system          256 Apr 25 2005  bgs/
-rw-r--r--    1 root     system        23271 Apr 25 2005  services.Apr-25-2005.ORIG
-rw-r--r--    1 root     system         4949 Apr 25 2005  inetd.conf.Apr-25-2005.ORIG
-rw-r-----    1 root     system            0 May 20 2005  Spmi_shm_hook
-rwxr-xr-x    1 root     system           55 Jul  5 2005  rc.shutdown-pre-tecad_logfile*
-rw-r--r--    1 root     system        71787 Jul 16 2005  seos.ini.orig
-r--r--r--    1 root     system          177 Jul 16 2005  profile.CA
-r--r--r--    1 root     system          265 Jul 16 2005  csh_login.CA
-rwxrwxr-x    1 root     system          558 Nov  9 2005  fb_15_40_11_09*
-rwxr-xr-x    1 root     system          969 Jan 26 2006  fb_11_20_01_26*
-rw-r--r--    1 root     system         1767 Jan 26 2006  ogroup
-rwxr-xr-x    1 root     system          992 Jan 30 2006  fb_14_13_01_30*
-rw-r--r--    1 root     system         7352 Mar  7 2006  basecust
-rwxr-xr-x    1 root     system          992 Mar  7 2006  fb_14_32_03_07*
-rw-r--r--    1 root     system            7 Mar  7 2006  muxatmd.pid
-rwxr-xr-x    1 root     system          263 Mar  7 2006  fb_15_55_03_07*
-rwxr-xr-x    1 root     system          598 Mar 29 2006  fb_08_25_03_29*
-rw-r--r--    1 root     system          754 Mar 31 2006  cdrecord.conf
-rwxr-xr-x    1 root     system          598 Jan  3 2007  fb_15_13_01_03*
drwxr-xr-x    3 bin      bin             256 Feb  7 2007  java14/
-rwxr-xr-x    1 root     system         2918 Mar  7 2007  rc.orig.241820*
-rwxr-xr-x    1 root     system          598 Mar  8 2007  fb_09_37_03_08*
-rwxr-xr-x    1 root     system          598 Apr 24 2007  fb_12_14_04_24*
-rw-r-----    1 root     system            0 May  2 2007  xms_shm_hook
-rw-r--r--    1 root     system           13 May 31 2007  exclude.rootvg
-rwxrwxr-x    1 root     system          159 May 31 2007  fb_15_21_05_31*
-rwxr-xr-x    1 root     system          999 Nov 14 2007  rc.filepath*
-rwxr-xr-x    1 root     system          988 Dec 18 2007  fb_13_58_12_18*
-rw-r--r--    1 root     system           34 Jan  3 2008  rmtab
-rwxr-xr-x    1 root     system          988 Jun  4 2008  fb_08_48_06_04*
-rw-r--r--    1 root     system          998 Jun  4 2008  issue
-rwxr-xr-x    1 root     system          598 Jul  3 2008  fb_10_23_07_03*
-rwxr-xr-x    1 root     system          988 Dec  9 2008  fb_11_01_12_09*
-rwxr-xr-x    1 root     system          598 Jan 26 2009  fb_08_35_01_26*
-rw-r--r--    1 root     system            0 Jan 26 2009  xtab
-rwxr-xr-x    1 root     system          965 Jul 17 2009  fb_10_31_07_17*
drwxr-xr-x    3 ldap     ldap            256 Jul 17 2009  ldap/
drwxr-xr-x    3 bin      bin             256 Jul 17 2009  java5/
drwxr-xr-x    3 bin      bin             256 Jul 17 2009  opt/
-rw-rw----    1 root     printq            4 Jul 17 2009  qconfig.bin
-rwxr-xr-x    1 root     system          575 Jul 19 2009  fb_09_21_07_19*
-rwxr-xr-x    1 root     system          575 Sep  8 2009  fb_15_15_09_08*
-rw-rw-r--    1 root     system          129 Oct  4 2009  ct_node_id
-rwxr-xr-x    1 root     system          989 Oct  4 2009  fb_03_50_10_04*
-r--r--r--    1 root     system         5810 Oct  7 2009  pam.conf.20091008
-rw-r--r--    1 root     system         1326 Oct  7 2009  sd_pam.conf
-r--------    1 root     system           87 Oct  8 2009  emcp_registration
-rw-r--r--    1 root     system         3940 Oct  9 2009  inittab.091009_090616.preI.save
-r-x------    1 root     system         9292 Oct  9 2009  set_scsi_id*
-r-x------    1 root     system          669 Oct  9 2009  rc.emcpower*
-r-x------    1 root     system          743 Oct  9 2009  rc.emcp_mond*
-r-x------    1 root     system          565 Oct  9 2009  rc.powermig*
-r-x------    1 root     system         1458 Oct  9 2009  rc.emcp_xcryptd*
-rwxr--r--    1 root     system         1420 Oct 12 2009  dbora*
-rw-r--r--    1 root     system         4265 Oct 12 2009  inittab.101209
-rw-r--r--    1 root     system         4644 Oct 13 2009  inetd.conf.Oct-13-2009.ORIG
-rw-r--r--    1 root     system       347881 Oct 13 2009  services.Oct-13-2009.ORIG
drwxr-xr-x    3 root     system          256 Oct 13 2009  ibm/
drwxr-xr-x    2 root     system          256 Oct 13 2009  cit/
-rwxr-xr-x    1 root     system          224 Oct 14 2009  profile.tsm*
-rwxr--r--    1 root     system           55 Oct 14 2009  rc.twdaemon*
drwxr-xr-x    2 root     system          256 Oct 14 2009  TWS/
-rw-r--r--    1 root     system         2219 Oct 15 2009  hosts.20091015
-r--------    1 root     system        13821 Nov 18 2009  pw-syscall64
lrwxrwxrwx    1 root     system           12 Nov 18 2009  pw-syscall4.1@ -> ./pw-syscall
-r--------    1 root     system        13285 Nov 18 2009  pw-syscall32
lrwxrwxrwx    1 root     system           14 Nov 18 2009  pw-syscall.64bit_kernel@ -> ./pw-syscall64
lrwxrwxrwx    1 root     system           12 Nov 18 2009  pw-syscall.32bit_kernel@ -> ./pw-syscall
-r--------    1 root     system        12632 Nov 18 2009  pw-syscall
drwxr-xr-x    2 root     system          256 Nov 18 2009  ora_save_09-11-18.10:30:02/
-r-x------    1 root     system        15850 Nov 18 2009  loadext*
-rw-r--r--    1 root     system         8094 Dec  9 2009  hosts.20091209
-rw-r--r--    1 root     system        17534 Dec  9 2009  opasswd
-rw-r--r--    1 root     system            7 Dec 15 2009  inetd.pid
-rw-r--r--    1 root     system         8851 Jan 10 2010  hosts.20100111
-rw-rw-r--    1 root     system         4720 Jan 11 2010  netsvc.conf
-rw-r--r--    1 root     system         4630 Jan 30 2010  inittab.itm1
-rw-r--r--    1 root     system           96 Feb 21 2010  auto_master
-rw-r--r--    1 root     system           94 Feb 21 2010  auto_home
drwx------    5 root     system          256 Feb 21 2010  multibos/
-rw-r--r--    1 root     system           71 Feb 22 2010  PowerPathExtensions
-rwx------    1 root     system          512 Feb 22 2010  rc.shutdown*
-r--------    1 root     system         1217 Feb 22 2010  disk.proto.ext.scsi.pseudo.power
-r--------    1 root     system        19040 Feb 22 2010  powermt.custom
-rw-r--r--    1 bin      bin             121 Feb 22 2010  shells
-rw-rw-r--    1 root     printq         1640 Feb 22 2010  qconfig
-rw-r--r--    1 bin      bin            3324 Feb 22 2010  pse.conf
-rw-r--r--    1 root     system         2279 Feb 22 2010  profile
-rw-rw-r--    1 bin      system            0 Feb 22 2010  dumpdates
-rw-r--r--    1 bin      bin            1547 Feb 22 2010  dlpi.conf
-rw-r--r--    1 root     system         1564 Feb 22 2010  csh.login
-r-xr-xr-x    1 bin      bin            1298 Feb 22 2010  csh.cshrc*
-rw-r--r--    1 root     system         3598 Feb 22 2010  cronlog.conf
-rw-r--r--    1 root     system         2270 Feb 22 2010  consdef
-rw-rw-r--    1 root     system          258 Feb 22 2010  check_config.files
-rw-r--r--    1 bin      bin            1721 Feb 22 2010  xtiso.conf
-rw-r--r--    1 root     system          408 Feb 22 2010  swapspaces
-rw-r--r--    1 root     security       2128 Feb 22 2010  nscontrol.conf
-r--r--r--    1 bin      bin             880 Feb 22 2010  motd
-rwx------    1 root     system         3121 Feb 22 2010  rc.powerfail*
-rwx------    1 root     system         1161 Feb 22 2010  rc.ha_star*
-r-xr-xr--    1 bin      bin            2308 Feb 22 2010  rc.dacinet*
drwxr-xr-x   11 root     system         4096 Feb 22 2010  rc.d/
-r-xr-xr--    1 bin      bin            1247 Feb 22 2010  rc.CC*
-r-xr-xr--    1 bin      bin            1063 Feb 22 2010  rc.C2*
-rw-r--r--    1 bin      bin            2058 Feb 22 2010  pse_tune.conf
drwxr-xr-x    4 root     system          256 Feb 22 2010  wlm/
-r--r--r--    1 root     system         2340 Feb 22 2010  tsh_profile
-rw-rw-r--    1 root     system        16873 Feb 22 2010  trcfmt.Z
lrwxrwxrwx    1 root     bin              16 Feb 22 2010  drivers@ -> /usr/lib/drivers/
lrwxrwxrwx    1 root     system           18 Feb 22 2010  microcode@ -> /usr/lib/microcode/
lrwxrwxrwx    1 root     system           16 Feb 22 2010  methods@ -> /usr/lib/methods/
lrwxrwxrwx    1 bin      bin              24 Feb 22 2010  dtappintegrate@ -> /usr/sbin/dtappintegrate*
lrwxrwxrwx    1 root     system           14 Feb 22 2010  init@ -> /usr/sbin/init*
lrwxrwxrwx    1 root     system           10 Feb 22 2010  locks@ -> /var/locks/
drwxr-xr-x    3 root     system          256 Feb 22 2010  ewlm/
-rw-r--r--    1 root     security       1703 Feb 22 2010  methods.cfg
-rw-rw-r--    1 root     system        35937 Feb 22 2010  magic
lrwxrwxrwx    1 bin      bin              34 Feb 22 2010  LUMls.rc@ -> /var/LicenseUseManagement/LUMls.rc*
drwx------    2 root     system          256 Feb 22 2010  iscsi/
-rw-r--r--    1 root     system         1113 Feb 22 2010  hba.conf
-r-xr-x---    1 root     system          966 Feb 22 2010  preserve.list*
drwxr-xr-x    2 bin      bin            4096 Feb 22 2010  ncs/
drwxr-xr-x    2 root     system         4096 Feb 22 2010  mh/
-r-xr-xr-x    1 root     system          673 Feb 22 2010  rc.stopaacct*
-r-xr-xr-x    1 root     system          543 Feb 22 2010  rc.startaacct*
drwxr-xr-x    4 root     system          256 Feb 22 2010  project/
drwxr-xr-x    2 root     system          256 Feb 22 2010  acct/
lrwxrwxrwx    1 bin      bin              17 Feb 22 2010  i4ls.rc@ -> /var/ifor/i4ls.rc*
-rw-r--r--    1 bin      bin           15390 Feb 22 2010  atm.defs
-rw-------    1 root     system         6193 Feb 22 2010  pam.conf.authexec
-r--r--r--    1 root     system         4536 Feb 22 2010  options.file
-rw-r-----    1 root     system       112301 Feb 22 2010  mib.defs
-r--r--r--    1 root     system         6968 Feb 22 2010  isoservices
-r--r--r--    1 root     system         3306 Feb 22 2010  isomacros
-r--r--r--    1 root     system        12513 Feb 22 2010  isoentities
-r--r--r--    1 root     system         8573 Feb 22 2010  isobjects
-r--r--r--    1 root     system         2717 Feb 22 2010  isoaliases
drwxr-xr-x    2 root     system          256 Feb 22 2010  dhcpv6/
-rw-rw-r--    1 root     system         6201 Feb 22 2010  3270keys.dtterm
lrwxrwxrwx    1 root     system           15 Feb 22 2010  uucpd@ -> /usr/sbin/uucpd*
drwxr-xr-x    2 root     sys            4096 Feb 22 2010  uucp/
-r-xr-xr-x    1 root     system         2664 Feb 22 2010  tcp.clean*
drwxrwxr-x    2 root     system          256 Feb 22 2010  snmpinterfaces/
-r-xr-xr-x    1 root     system         1155 Feb 22 2010  slip.logout*
-r-xr-xr-x    1 root     system         1315 Feb 22 2010  slip.login*
-rw-r--r--    1 root     system         1227 Feb 22 2010  slip.hosts
-rw-rw-r--    1 root     system         1274 Feb 22 2010  telnet.conf
-rw-r--r--    1 root     system         4676 Feb 22 2010  syslog.conf
-rw-r--r--    1 root     system         2451 Feb 22 2010  bootptab
-rw-r-----    1 root     system         1810 Feb 22 2010  snmpmibd.conf
-rw-r-----    1 root     system         2603 Feb 22 2010  snmpd.peers
-rw-r-----    1 root     system        10043 Feb 22 2010  snmpd.conf
-r-xr-xr--    1 bin      bin            8614 Feb 22 2010  rc.net*
-r-xr-xr--    1 bin      bin            3364 Feb 22 2010  rc.bsdnet*
-rw-r-----    1 root     system         1852 Feb 22 2010  hostmibd.conf
-rw-r-----    1 root     system         7655 Feb 22 2010  aixmibd.conf
-rw-rw-r--    1 root     system         5397 Feb 22 2010  slp.conf
drwxr-xr-x    2 root     system          256 Feb 22 2010  mail/
lrwxrwxrwx    1 root     system           21 Feb 22 2010  sendmail.cf@ -> /etc/mail/sendmail.cf
lrwxrwxrwx    1 root     system           15 Feb 22 2010  route@ -> /usr/sbin/route*
lrwxrwxrwx    1 root     system           14 Feb 22 2010  ping@ -> /usr/sbin/ping*
lrwxrwxrwx    1 root     system           18 Feb 22 2010  ifconfig@ -> /usr/sbin/ifconfig*
lrwxrwxrwx    1 root     system           17 Feb 22 2010  aliases@ -> /etc/mail/aliases
-rw-r--r--    1 root     system         1040 Feb 22 2010  rpc
-rwxr-xr-x    1 root     system         9429 Feb 22 2010  rc.nfs*
lrwxrwxrwx    1 root     system           20 Feb 22 2010  rpc.pcnfsd@ -> /usr/sbin/rpc.pcnfsd*
lrwxrwxrwx    1 root     system           20 Feb 22 2010  gfsinstall@ -> /usr/sbin/gfsinstall*
drwxr-xr-x    3 bin      bin             256 Feb 22 2010  X11/
drwxr-xr-x    5 root     system          256 Feb 22 2010  perf/
-rwxr-xr--    1 root     system         7298 Feb 22 2010  rc.tcpip.tr.backup*
drwxr-xr-x    3 root     system          256 Feb 22 2010  ha/
-rw-rw-r--    1 root     system         2016 Feb 22 2010  environment
-rwxrwxr--    1 root     system         7381 Feb 22 2010  rc.tcpip*
-rwxrwxr-x    1 root     system          409 Feb 22 2010  fb_12_22_02_22*
-rw-r--r--    1 root     system         1035 Feb 22 2010  niminfo
-rw-r--r--    1 root     system         2049 Feb 22 2010  hosts.equiv
-r--r--r--    1 root     system         6482 Feb 22 2010  pam.conf
-rw-r--r--    1 root     system       347361 Feb 22 2010  services.bak
-rw-r--r--    1 root     system         4570 Feb 22 2010  inetd.conf.bak
lrwxrwxrwx    1 root     system           34 Feb 22 2010  seos.ini@ -> /sys_apps_01/security/acx/seos.ini
-rw-r--r--    1 root     system       347379 Apr 14 12:24 services.Apr-14-2010.ORIG
-rw-r--r--    1 root     system       347379 Apr 14 12:24 services
-rw-r--r--    1 root     system         4683 Apr 14 12:24 inetd.conf.Apr-14-2010.ORIG
-rw-rw-r--    1 root     system         1036 Apr 28 10:46 ntp.conf
-rwxr-xr-x    1 root     system          741 May 12 13:24 rc.itm1*
-rw-r--r--    1 root     system         9027 Jun 16 23:57 hosts.17Jun2010
-rwxr-x---    1 root     system         6398 Jul  9 15:51 tlmlog.properties*
-rw-r--r--    1 root     system         2106 Jul  9 15:51 tlm_mobility.cfg
-rw-r--r--    1 root     system         9102 Jul 12 14:02 hosts.13thJuly2010
-rw-rw-r--    1 root     system         4683 Jul 14 01:13 inetd.conf
-rw-r--r--    1 root     system         4697 Jul 19 06:53 inittab.19july10
-rw-r--r--    1 root     system          281 Aug  8 22:01 auto_direct
drwxrwxr-x    2 root     system         4096 Aug  8 22:42 vg/
-rw-r--r--    1 root     system          184 Aug 10 11:56 oratab.10thAug2010
-rw-r--r--    1 root     system         1771 Aug 10 12:34 vfs
-rwxr-xr-x    1 root     system         4152 Aug 10 12:34 rc.nfs4ss*
-rwxr-xr-x    1 root     system         4391 Aug 10 12:34 nfs.clean*
-r-xr-xr--    1 root     system         2087 Aug 10 12:35 securetcpip*
-rw-rw-r--    1 root     printq          580 Aug 10 12:37 prtglobalconfig
lrwxrwxrwx    1 root     system           12 Aug 10 12:40 wpars@ -> /etc/corrals/
-r-x------    2 root     system         2500 Aug 10 12:40 rc.wpars*
-r-x------    2 root     system         2500 Aug 10 12:40 rc.corrals*
-r-xr-xr--    1 bin      bin            6303 Aug 10 12:40 rc.bootc*
drwxrwxr-x    2 root     system         4096 Aug 10 12:40 objrepos/
drwx--x--x    3 root     system          256 Aug 10 12:40 corrals/
-r-x------    1 bin      bin            1762 Aug 10 12:40 rc.security.boot*
-rw-rw-r--    1 root     system      1446634 Aug 10 12:42 trcfmt
-r-xr-x---    1 root     system         4339 Aug 10 12:46 rc.tcptr*
-rw-r--r--    1 root     system         9921 Aug 10 12:46 protocols
-rw-r--r--    1 root     system         6482 Aug 10 12:46 pam.conf.websm.bak
-r-xr-xr-x    1 ipsec    ipsec           705 Aug 10 12:46 rc.ike*
drwxr-xr-x    3 ipsec    staff           256 Aug 10 12:46 ipsec/
drwxr-xr-x    2 root     system          256 Aug 10 12:47 rpm/
-r--------    1 root     system           18 Aug 10 12:48 bosboot.sum
-rw-r--r--    1 root     system         4961 Aug 10 13:16 filesystems
-rw-r--r--    1 root     system         4697 Aug 14 05:04 inittab.14august2010
-rw-r--r--    1 root     system         4698 Aug 14 05:06 inittab.20100814_050624.preU.save
-rwxr-xr-x    1 root     system         3647 Aug 14 05:06 rc.orig.7078238*
-rw-r--r--    1 root     system            7 Aug 14 05:10 atmsvcd.pid
drwxr-xr-x    4 root     system         4096 Aug 14 05:10 emc/
-rw-r--r--    1 root     system         4311 Aug 14 05:10 tlmagent.ini
-rw-r--r--    1 root     system            8 Aug 14 05:10 syslog.pid
drwx------    2 root     system          256 Aug 14 05:10 tunables/
-rwxr-xr-x    1 root     system         3674 Aug 14 05:33 rc*
-rw-r--r--    1 root     system         4372 Aug 14 05:33 inittab.100814_052729.preI.save
-rw-r--r--    1 root     system         4697 Aug 14 05:33 inittab
-rwxr-xr-x    1 root     system          275 Aug 28 00:43 rc.tws*
-rw-r--r--    1 root     system         9134 Sep  8 09:31 hosts.Sep082010
-rw-rw-r--    1 root     system         9242 Sep 14 14:39 hosts
-rw-r--r--    1 root     system         4051 Sep 17 22:50 ftpusers
drwxr-xr-x    5 root     system          256 Sep 21 15:42 Tivoli/
drwxr-x---    9 root     security      16384 Sep 21 22:47 security/
-rw-r--r--    1 root     system        31151 Sep 22 07:02 passwd
-rw-r--r--    1 root     system         5234 Sep 22 07:02 group
-rw-r--r--    1 root     system            8 Sep 22 10:10 ntp.drift
-rw-rw-r--    1 oracle   dba             185 Sep 22 10:40 oratab
-rw-r--r--    1 root     system        33696 Sep 22 10:43 utmp
-rw-r--r--    1 oracle   dba             232 Sep 22 10:49 oraInst.loc
drct0s @ oem0stl0:/etc
$ cat oraInst.loc
inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
#inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107
inst_group=dba
drct0s @ oem0stl0:/etc
$ lsnctl status
ksh: lsnctl:  not found
drct0s @ oem0stl0:/etc
$ lsnrctl status

LSNRCTL for IBM/AIX RISC System/6000: Version 11.1.0.7.0 - Production on 22-SEP-2010 10:54:15

Copyright (c) 1991, 2008, Oracle.  All rights reserved.

Connecting to (ADDRESS=(PROTOCOL=TCP)(HOST=oem0stl0)(PORT=1527))
STATUS of the LISTENER
------------------------
Alias                     LISTENER
Version                   TNSLSNR for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production
Start Date                14-AUG-2010 05:39:18
Uptime                    39 days 5 hr. 14 min. 57 sec
Trace Level               off
Security                  ON: Local OS Authentication
SNMP                      OFF
Listener Parameter File   /var/opt/oracle/listener.ora
Listener Log File         /oracle/product/v10.2.0.4/network/log/listener.log
Listening Endpoints Summary...
  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oem0stl0)(PORT=1527)))
Services Summary...
Service "doem1s" has 1 instance(s).
  Instance "doem1s", status UNKNOWN, has 1 handler(s) for this service...
Service "drct0s" has 1 instance(s).
  Instance "drct0s", status UNKNOWN, has 1 handler(s) for this service...
Service "drctbk0s" has 1 instance(s).
  Instance "drctbk0s", status UNKNOWN, has 1 handler(s) for this service...
The command completed successfully
drct0s @ oem0stl0:/etc
$ ps -ef | grep inh
  oracle  4194408  9306188   0 10:54:53  pts/6  0:00 grep inh 
  oracle  6094964        1   0   Aug 14      -  1:03 /oracle/product/v10.2.0.4/bin/tnslsnr LISTENER -inherit 
  oracle  8192168        1   0   Aug 14      - 19:28 /oracle/product/v10.2.0.4/bin/tnslsnr LISTENER -inherit 
drct0s @ oem0stl0:/etc
$ finger
Login                               Name              TTY Idle    When    Site Info
e021233                          Aaron Ward;EA_COREDB  p1      20 Wed 10:31 
e033199                          Srinivas Ardha;EA_O_  p2    1:15 Wed 09:26 
e031417                          Prabhu Devaraj;SysAd  p3      17 Wed 10:39 
e032289                          Tamilselvan Subraman  p4         Wed 10:59 
e032090                          Ruban Samuel;EA_O_DB  p6       4 Wed 09:57 
epb3884                          Paula Bell - DBA;EA_  p7       4 Wed 09:58 
drct0s @ oem0stl0:/etc
$ opatch lsinventory
Invoking OPatch 11.1.0.6.2

Oracle Interim Patch Installer version 11.1.0.6.2
Copyright (c) 2007, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v11.1.0.7
Central Inventory : /oracle/product/v11.1.0.7/oraInventory.11107
   from           : /etc/oraInst.loc
OPatch version    : 11.1.0.6.2
OUI version       : 11.1.0.7.0
OUI location      : /oracle/product/v11.1.0.7/oui
Log file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/opatch2010-09-22_11-11-52AM.log

Lsinventory Output file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/lsinv/lsinventory2010-09-22_11-11-52AM.txt

--------------------------------------------------------------------------------
Installed Top-level Products (2): 

Oracle Database 11g                                                  11.1.0.6.0
Oracle Database 11g Patch Set 1                                      11.1.0.7.0
There are 2 products installed in this Oracle Home.


Interim patches (18) :

Patch  9118622      : applied on Wed Mar 03 14:33:51 CST 2010
   Created on 4 Jan 2010, 04:05:12 hrs PST8PDT
   Bugs fixed:
     9118622

Patch  9118620      : applied on Wed Mar 03 14:33:46 CST 2010
   Created on 4 Jan 2010, 01:31:47 hrs PST8PDT
   Bugs fixed:
     9118620

Patch  9114072      : applied on Wed Mar 03 14:33:43 CST 2010
   Created on 23 Dec 2009, 12:13:30 hrs PST8PDT
   Bugs fixed:
     9114072, 8836375, 8290478, 8534338

Patch  8855577      : applied on Wed Mar 03 14:33:40 CST 2010
   Created on 25 Sep 2009, 06:23:00 hrs PST8PDT
   Bugs fixed:
     8855577

Patch  8855575      : applied on Wed Mar 03 14:33:36 CST 2010
   Created on 25 Sep 2009, 06:22:50 hrs PST8PDT
   Bugs fixed:
     8855575

Patch  8855570      : applied on Wed Mar 03 14:33:32 CST 2010
   Created on 2 Sep 2009, 08:23:21 hrs PST8PDT
   Bugs fixed:
     8306933, 8855570

Patch  8855565      : applied on Wed Mar 03 14:33:29 CST 2010
   Created on 2 Sep 2009, 08:16:23 hrs PST8PDT
   Bugs fixed:
     8855565

Patch  8855559      : applied on Wed Mar 03 14:33:26 CST 2010
   Created on 25 Sep 2009, 06:22:41 hrs PST8PDT
   Bugs fixed:
     8855559, 8563945

Patch  8855553      : applied on Wed Mar 03 14:33:23 CST 2010
   Created on 9 Sep 2009, 04:30:24 hrs PST8PDT
   Bugs fixed:
     8855553

Patch  8563948      : applied on Wed Mar 03 14:33:19 CST 2010
   Created on 11 Jun 2009, 10:30:13 hrs UTC
   Bugs fixed:
     8563948

Patch  8563947      : applied on Wed Mar 03 14:32:20 CST 2010
   Created on 11 Jun 2009, 10:29:36 hrs UTC
   Bugs fixed:
     8563947

Patch  8563946      : applied on Wed Mar 03 14:31:58 CST 2010
   Created on 11 Jun 2009, 10:28:00 hrs UTC
   Bugs fixed:
     8563946

Patch  8563944      : applied on Wed Mar 03 14:31:54 CST 2010
   Created on 11 Jun 2009, 10:22:59 hrs UTC
   Bugs fixed:
     6870937, 8563944

Patch  8563943      : applied on Wed Mar 03 14:31:50 CST 2010
   Created on 11 Jun 2009, 10:15:40 hrs UTC
   Bugs fixed:
     8563943

Patch  8563942      : applied on Wed Mar 03 14:31:45 CST 2010
   Created on 11 Jun 2009, 03:00:06 hrs PST8PDT
   Bugs fixed:
     8563942

Patch  8563941      : applied on Wed Mar 03 14:31:42 CST 2010
   Created on 11 Jun 2009, 02:59:26 hrs PST8PDT
   Bugs fixed:
     8563941

Patch  8342506      : applied on Wed Mar 03 14:31:38 CST 2010
   Created on 18 Mar 2009, 04:41:41 hrs PST8PDT
   Bugs fixed:
     8342506

Patch  8306934      : applied on Wed Mar 03 14:31:35 CST 2010
   Created on 18 Mar 2009, 06:26:03 hrs PST8PDT
   Bugs fixed:
     8306934



--------------------------------------------------------------------------------

OPatch succeeded.
drct0s @ oem0stl0:/etc
$ uname -a
AIX oem0stl0 1 6 00CDA6D44C00
drct0s @ oem0stl0:/etc
$ opatch help
Invoking OPatch 11.1.0.6.2

Oracle Interim Patch Installer version 11.1.0.6.2
Copyright (c) 2007, Oracle Corporation.  All rights reserved.

Syntax Error... Unrecognized Command or Option: 1st argument must be one of the following:
   apply
   napply
   rollback
   nrollback
   lsinventory
   lsinv
   query
   util
   prereq
   version
   -help
   -h
Please use the option 'opatch  -help' to get correct syntax

OPatch failed with error code 14
drct0s @ oem0stl0:/etc
$ date
Wed Sep 22 11:17:57 CDT 2010
drct0s @ oem0stl0:/etc
$ date
Wed Sep 22 11:20:46 CDT 2010
drct0s @ oem0stl0:/etc
$ SEtetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 3

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [doem1s]    ORACLE_HOME = [/oracle/product/v10.2.0.4]

doem1s @ oem0stl0:/etc
$ SETetDb drct0s

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [drct0s]    ORACLE_HOME = [/oracle/product/v11.1.0.7]

drct0s @ oem0stl0:/etc
$ cd /oracle/product/v10.2.0.4/OPatch
drct0s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ ls -lrt
drct0s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ SEtetDbn
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 4

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [drct0s]    ORACLE_HOME = [/oracle/product/v11.1.0.7]

drct0s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ export PATH=$PATH:$ORACLE_HOME/OPatch
drct0s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ /oracle/product/v11.1.0.7/patches_11107/9655014
drct0s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cd /oracle/product/v11.1.0.7/patches_11107/9655014
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ lsrnct
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ ps -ef | grep lsinventory
  oracle  2818484  9306188   0 11:41:45  pts/6  0:00 grep lsinventory 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ ps -ef | grep ibhnh
  oracle  6094964        1   0   Aug 14      -  1:03 /oracle/product/v10.2.0.4/bin/tnslsnr LISTENER -inherit 
  oracle  8192168        1   0   Aug 14      - 19:29 /oracle/product/v10.2.0.4/bin/tnslsnr LISTENER -inherit 
  oracle 14614696  9306188   0 11:41:54  pts/6  0:00 grep inh 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ SErtetsqlpus lus "/ as sysdba"

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 11:42:14 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL> shutdown immediate;
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ SEsetrSEtretDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 3

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [doem1s]    ORACLE_HOME = [/oracle/product/v10.2.0.4]

doem1s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ k
doem1s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ 
doem1s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ sqlplus "/ as sysdba"

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Sep 22 11:43:05 2010

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.


Connected to:
Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL> shutdown immediate;
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> exit
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
doem1s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ SETetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 3

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [doem1s]    ORACLE_HOME = [/oracle/product/v10.2.0.4]

doem1s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ pwd
/oracle/product/v11.1.0.7/patches_11107/9655014
doem1s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ cd
doem1s @ oem0stl0:/oracle/home
$ export PATH=$PATH:$ORACLE_HOME/OPatch
doem1s @ oem0stl0:/oracle/home
$ cd $ORACLE_HOME/OPatch
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ opatch version
Invoking OPatch 10.2.0.5.0

OPatch Version: 10.2.0.5.0

OPatch succeeded.
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ opatch lissinventory
Invoking OPatch 10.2.0.5.0

Oracle Interim Patch Installer version 10.2.0.5.0
Copyright (c) 2010, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v10.2.0.4
Central Inventory : /oracle/product/v11.1.0.7/oraInventory.11107
   from           : /etc/oraInst.loc
OPatch version    : 10.2.0.5.0
OUI version       : 10.2.0.4.0
OUI location      : /oracle/product/v10.2.0.4/oui
Log file location : /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch2010-09-22_11-44-58AM.log

Patch history file: /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch_history.txt

List of Homes on this system:

  Home name= OraDb11g_home1, Location= "/oracle/product/v11.1.0.7"
Inventory load failed... OPatch cannot load inventory for the given Oracle Home.
Possible causes are:
   Oracle Home dir. path does not exist in Central Inventory
   Oracle Home is a symbolic link
   Oracle Home inventory is corrupted
LsInventorySession failed: OracleHomeInventory gets null oracleHomeInfo

OPatch failed with error code 73
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cd /
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cd /etvc
doem1s @ oem0stl0:/etc
$ ls -lrt
total 8912
-rw-r--r--    1 root     system         1066 Dec 31 1969  info-dir
-rw-rw-r--    1 root     system         4388 Dec 31 1969  3270_arab_kyb.map
-rw-rw-r--    1 root     system         3134 Dec 31 1969  3270.keys
-r--r--r--    1 root     system        19238 Dec 31 1969  map3270
-rw-r-----    1 ipsec    ipsec          3831 Dec 31 1969  isakmpd.conf
-rw-rw-r--    1 root     system         1895 Dec 31 1969  hosts.lpd
-rw-rw-r--    1 root     system        50797 Dec 31 1969  gated.conf
-rw-rw-r--    1 root     system        29085 Dec 31 1969  dhcpsd.cnf
-rw-rw-r--    1 root     system         3513 Dec 31 1969  dhcprd.cnf
-rw-r--r--    1 root     system         9809 Dec 31 1969  dhcpcd.ini
-rw-rw----    1 root     system         1147 Dec 31 1969  dfpd.conf
-rw-r-----    1 root     system         2302 Dec 31 1969  clsnmp.conf
-rw-rw-r--    1 root     system        24321 Dec 31 1969  binld.cnf
-rw-rw-r--    1 root     system         5943 Dec 31 1969  3270keys.hft
-rw-r--r--    1 root     system         3036 Dec 31 1969  rsvpd.conf
-rwxr-xr-x    1 root     system          968 Dec 31 1969  rc.qos*
-r-xr-xr--    1 bin      bin            5187 Dec 31 1969  rc.net.serial*
-rw-rw-r--    1 root     system        29568 Dec 31 1969  pxed.cnf
-rw-r--r--    1 root     system         2229 Dec 31 1969  policyd.conf
-rw-r--r--    1 root     system         2432 Dec 31 1969  mrouted.conf
drwxr-xr-x    3 root     system          256 Dec 31 1969  lpp/
-rw-r--r--    1 root     system         3595 Dec 31 1969  cdromd.conf
-rw-r-----    1 root     system        10000 Dec 31 1969  snmpdv3.conf
drwxr-xr-x    3 root     system          256 Dec 31 1969  dt/
-rwxrwxr-x    1 root     system           24 Dec 31 1969  fb_18_41_12_31*
-rw-r--r--    1 root     system            0 Jan  2 1970  ntp.trace
-rw-r--r--    1 root     security        526 Jan 15 1970  passwd.bak
-rw-r--r--    1 root     system         3956 Feb 11 1970  syslog.conf.18jan2005
-rw-r--r--    1 root     system          526 Feb 19 1970  passwd.sdb
-rw-r--r--    1 root     system          357 Feb 19 1970  group.bak
-rw-r--r--    1 root     security       1706 Feb 20 1970  group.backup.030770
-rw-r--r--    1 root     system           37 Mar  4 1970  snmpd.boots
-rw-r--r--    1 root     system           13 Mar  4 1970  powerpath_registration
dr-xr-xr-x    3 root     system          256 Mar  7 1970  ca/
-rw-r--r--    1 root     system         2863 Mar  7 1970  inittab.pre-acx
-rwxrwxr--    1 root     system          142 Aug  7 2003  rc.tma1*
-rw-r--r--    1 root     system           70 Mar 28 2005  TIVGUID
drwxr-xr-x    4 root     system          256 Apr 25 2005  bgs/
-rw-r--r--    1 root     system        23271 Apr 25 2005  services.Apr-25-2005.ORIG
-rw-r--r--    1 root     system         4949 Apr 25 2005  inetd.conf.Apr-25-2005.ORIG
-rw-r-----    1 root     system            0 May 20 2005  Spmi_shm_hook
-rwxr-xr-x    1 root     system           55 Jul  5 2005  rc.shutdown-pre-tecad_logfile*
-rw-r--r--    1 root     system        71787 Jul 16 2005  seos.ini.orig
-r--r--r--    1 root     system          177 Jul 16 2005  profile.CA
-r--r--r--    1 root     system          265 Jul 16 2005  csh_login.CA
-rwxrwxr-x    1 root     system          558 Nov  9 2005  fb_15_40_11_09*
-rwxr-xr-x    1 root     system          969 Jan 26 2006  fb_11_20_01_26*
-rw-r--r--    1 root     system         1767 Jan 26 2006  ogroup
-rwxr-xr-x    1 root     system          992 Jan 30 2006  fb_14_13_01_30*
-rw-r--r--    1 root     system         7352 Mar  7 2006  basecust
-rwxr-xr-x    1 root     system          992 Mar  7 2006  fb_14_32_03_07*
-rw-r--r--    1 root     system            7 Mar  7 2006  muxatmd.pid
-rwxr-xr-x    1 root     system          263 Mar  7 2006  fb_15_55_03_07*
-rwxr-xr-x    1 root     system          598 Mar 29 2006  fb_08_25_03_29*
-rw-r--r--    1 root     system          754 Mar 31 2006  cdrecord.conf
-rwxr-xr-x    1 root     system          598 Jan  3 2007  fb_15_13_01_03*
drwxr-xr-x    3 bin      bin             256 Feb  7 2007  java14/
-rwxr-xr-x    1 root     system         2918 Mar  7 2007  rc.orig.241820*
-rwxr-xr-x    1 root     system          598 Mar  8 2007  fb_09_37_03_08*
-rwxr-xr-x    1 root     system          598 Apr 24 2007  fb_12_14_04_24*
-rw-r-----    1 root     system            0 May  2 2007  xms_shm_hook
-rw-r--r--    1 root     system           13 May 31 2007  exclude.rootvg
-rwxrwxr-x    1 root     system          159 May 31 2007  fb_15_21_05_31*
-rwxr-xr-x    1 root     system          999 Nov 14 2007  rc.filepath*
-rwxr-xr-x    1 root     system          988 Dec 18 2007  fb_13_58_12_18*
-rw-r--r--    1 root     system           34 Jan  3 2008  rmtab
-rwxr-xr-x    1 root     system          988 Jun  4 2008  fb_08_48_06_04*
-rw-r--r--    1 root     system          998 Jun  4 2008  issue
-rwxr-xr-x    1 root     system          598 Jul  3 2008  fb_10_23_07_03*
-rwxr-xr-x    1 root     system          988 Dec  9 2008  fb_11_01_12_09*
-rwxr-xr-x    1 root     system          598 Jan 26 2009  fb_08_35_01_26*
-rw-r--r--    1 root     system            0 Jan 26 2009  xtab
-rwxr-xr-x    1 root     system          965 Jul 17 2009  fb_10_31_07_17*
drwxr-xr-x    3 ldap     ldap            256 Jul 17 2009  ldap/
drwxr-xr-x    3 bin      bin             256 Jul 17 2009  java5/
drwxr-xr-x    3 bin      bin             256 Jul 17 2009  opt/
-rw-rw----    1 root     printq            4 Jul 17 2009  qconfig.bin
-rwxr-xr-x    1 root     system          575 Jul 19 2009  fb_09_21_07_19*
-rwxr-xr-x    1 root     system          575 Sep  8 2009  fb_15_15_09_08*
-rw-rw-r--    1 root     system          129 Oct  4 2009  ct_node_id
-rwxr-xr-x    1 root     system          989 Oct  4 2009  fb_03_50_10_04*
-r--r--r--    1 root     system         5810 Oct  7 2009  pam.conf.20091008
-rw-r--r--    1 root     system         1326 Oct  7 2009  sd_pam.conf
-r--------    1 root     system           87 Oct  8 2009  emcp_registration
-rw-r--r--    1 root     system         3940 Oct  9 2009  inittab.091009_090616.preI.save
-r-x------    1 root     system         9292 Oct  9 2009  set_scsi_id*
-r-x------    1 root     system          669 Oct  9 2009  rc.emcpower*
-r-x------    1 root     system          743 Oct  9 2009  rc.emcp_mond*
-r-x------    1 root     system          565 Oct  9 2009  rc.powermig*
-r-x------    1 root     system         1458 Oct  9 2009  rc.emcp_xcryptd*
-rwxr--r--    1 root     system         1420 Oct 12 2009  dbora*
-rw-r--r--    1 root     system         4265 Oct 12 2009  inittab.101209
-rw-r--r--    1 root     system         4644 Oct 13 2009  inetd.conf.Oct-13-2009.ORIG
-rw-r--r--    1 root     system       347881 Oct 13 2009  services.Oct-13-2009.ORIG
drwxr-xr-x    3 root     system          256 Oct 13 2009  ibm/
drwxr-xr-x    2 root     system          256 Oct 13 2009  cit/
-rwxr-xr-x    1 root     system          224 Oct 14 2009  profile.tsm*
-rwxr--r--    1 root     system           55 Oct 14 2009  rc.twdaemon*
drwxr-xr-x    2 root     system          256 Oct 14 2009  TWS/
-rw-r--r--    1 root     system         2219 Oct 15 2009  hosts.20091015
-r--------    1 root     system        13821 Nov 18 2009  pw-syscall64
lrwxrwxrwx    1 root     system           12 Nov 18 2009  pw-syscall4.1@ -> ./pw-syscall
-r--------    1 root     system        13285 Nov 18 2009  pw-syscall32
lrwxrwxrwx    1 root     system           14 Nov 18 2009  pw-syscall.64bit_kernel@ -> ./pw-syscall64
lrwxrwxrwx    1 root     system           12 Nov 18 2009  pw-syscall.32bit_kernel@ -> ./pw-syscall
-r--------    1 root     system        12632 Nov 18 2009  pw-syscall
drwxr-xr-x    2 root     system          256 Nov 18 2009  ora_save_09-11-18.10:30:02/
-r-x------    1 root     system        15850 Nov 18 2009  loadext*
-rw-r--r--    1 root     system         8094 Dec  9 2009  hosts.20091209
-rw-r--r--    1 root     system        17534 Dec  9 2009  opasswd
-rw-r--r--    1 root     system            7 Dec 15 2009  inetd.pid
-rw-r--r--    1 root     system         8851 Jan 10 2010  hosts.20100111
-rw-rw-r--    1 root     system         4720 Jan 11 2010  netsvc.conf
-rw-r--r--    1 root     system         4630 Jan 30 2010  inittab.itm1
-rw-r--r--    1 root     system           96 Feb 21 2010  auto_master
-rw-r--r--    1 root     system           94 Feb 21 2010  auto_home
drwx------    5 root     system          256 Feb 21 2010  multibos/
-rw-r--r--    1 root     system           71 Feb 22 2010  PowerPathExtensions
-rwx------    1 root     system          512 Feb 22 2010  rc.shutdown*
-r--------    1 root     system         1217 Feb 22 2010  disk.proto.ext.scsi.pseudo.power
-r--------    1 root     system        19040 Feb 22 2010  powermt.custom
-rw-r--r--    1 bin      bin             121 Feb 22 2010  shells
-rw-rw-r--    1 root     printq         1640 Feb 22 2010  qconfig
-rw-r--r--    1 bin      bin            3324 Feb 22 2010  pse.conf
-rw-r--r--    1 root     system         2279 Feb 22 2010  profile
-rw-rw-r--    1 bin      system            0 Feb 22 2010  dumpdates
-rw-r--r--    1 bin      bin            1547 Feb 22 2010  dlpi.conf
-rw-r--r--    1 root     system         1564 Feb 22 2010  csh.login
-r-xr-xr-x    1 bin      bin            1298 Feb 22 2010  csh.cshrc*
-rw-r--r--    1 root     system         3598 Feb 22 2010  cronlog.conf
-rw-r--r--    1 root     system         2270 Feb 22 2010  consdef
-rw-rw-r--    1 root     system          258 Feb 22 2010  check_config.files
-rw-r--r--    1 bin      bin            1721 Feb 22 2010  xtiso.conf
-rw-r--r--    1 root     system          408 Feb 22 2010  swapspaces
-rw-r--r--    1 root     security       2128 Feb 22 2010  nscontrol.conf
-r--r--r--    1 bin      bin             880 Feb 22 2010  motd
-rwx------    1 root     system         3121 Feb 22 2010  rc.powerfail*
-rwx------    1 root     system         1161 Feb 22 2010  rc.ha_star*
-r-xr-xr--    1 bin      bin            2308 Feb 22 2010  rc.dacinet*
drwxr-xr-x   11 root     system         4096 Feb 22 2010  rc.d/
-r-xr-xr--    1 bin      bin            1247 Feb 22 2010  rc.CC*
-r-xr-xr--    1 bin      bin            1063 Feb 22 2010  rc.C2*
-rw-r--r--    1 bin      bin            2058 Feb 22 2010  pse_tune.conf
drwxr-xr-x    4 root     system          256 Feb 22 2010  wlm/
-r--r--r--    1 root     system         2340 Feb 22 2010  tsh_profile
-rw-rw-r--    1 root     system        16873 Feb 22 2010  trcfmt.Z
lrwxrwxrwx    1 root     bin              16 Feb 22 2010  drivers@ -> /usr/lib/drivers/
lrwxrwxrwx    1 root     system           18 Feb 22 2010  microcode@ -> /usr/lib/microcode/
lrwxrwxrwx    1 root     system           16 Feb 22 2010  methods@ -> /usr/lib/methods/
lrwxrwxrwx    1 bin      bin              24 Feb 22 2010  dtappintegrate@ -> /usr/sbin/dtappintegrate*
lrwxrwxrwx    1 root     system           14 Feb 22 2010  init@ -> /usr/sbin/init*
lrwxrwxrwx    1 root     system           10 Feb 22 2010  locks@ -> /var/locks/
drwxr-xr-x    3 root     system          256 Feb 22 2010  ewlm/
-rw-r--r--    1 root     security       1703 Feb 22 2010  methods.cfg
-rw-rw-r--    1 root     system        35937 Feb 22 2010  magic
lrwxrwxrwx    1 bin      bin              34 Feb 22 2010  LUMls.rc@ -> /var/LicenseUseManagement/LUMls.rc*
drwx------    2 root     system          256 Feb 22 2010  iscsi/
-rw-r--r--    1 root     system         1113 Feb 22 2010  hba.conf
-r-xr-x---    1 root     system          966 Feb 22 2010  preserve.list*
drwxr-xr-x    2 bin      bin            4096 Feb 22 2010  ncs/
drwxr-xr-x    2 root     system         4096 Feb 22 2010  mh/
-r-xr-xr-x    1 root     system          673 Feb 22 2010  rc.stopaacct*
-r-xr-xr-x    1 root     system          543 Feb 22 2010  rc.startaacct*
drwxr-xr-x    4 root     system          256 Feb 22 2010  project/
drwxr-xr-x    2 root     system          256 Feb 22 2010  acct/
lrwxrwxrwx    1 bin      bin              17 Feb 22 2010  i4ls.rc@ -> /var/ifor/i4ls.rc*
-rw-r--r--    1 bin      bin           15390 Feb 22 2010  atm.defs
-rw-------    1 root     system         6193 Feb 22 2010  pam.conf.authexec
-r--r--r--    1 root     system         4536 Feb 22 2010  options.file
-rw-r-----    1 root     system       112301 Feb 22 2010  mib.defs
-r--r--r--    1 root     system         6968 Feb 22 2010  isoservices
-r--r--r--    1 root     system         3306 Feb 22 2010  isomacros
-r--r--r--    1 root     system        12513 Feb 22 2010  isoentities
-r--r--r--    1 root     system         8573 Feb 22 2010  isobjects
-r--r--r--    1 root     system         2717 Feb 22 2010  isoaliases
drwxr-xr-x    2 root     system          256 Feb 22 2010  dhcpv6/
-rw-rw-r--    1 root     system         6201 Feb 22 2010  3270keys.dtterm
lrwxrwxrwx    1 root     system           15 Feb 22 2010  uucpd@ -> /usr/sbin/uucpd*
drwxr-xr-x    2 root     sys            4096 Feb 22 2010  uucp/
-r-xr-xr-x    1 root     system         2664 Feb 22 2010  tcp.clean*
drwxrwxr-x    2 root     system          256 Feb 22 2010  snmpinterfaces/
-r-xr-xr-x    1 root     system         1155 Feb 22 2010  slip.logout*
-r-xr-xr-x    1 root     system         1315 Feb 22 2010  slip.login*
-rw-r--r--    1 root     system         1227 Feb 22 2010  slip.hosts
-rw-rw-r--    1 root     system         1274 Feb 22 2010  telnet.conf
-rw-r--r--    1 root     system         4676 Feb 22 2010  syslog.conf
-rw-r--r--    1 root     system         2451 Feb 22 2010  bootptab
-rw-r-----    1 root     system         1810 Feb 22 2010  snmpmibd.conf
-rw-r-----    1 root     system         2603 Feb 22 2010  snmpd.peers
-rw-r-----    1 root     system        10043 Feb 22 2010  snmpd.conf
-r-xr-xr--    1 bin      bin            8614 Feb 22 2010  rc.net*
-r-xr-xr--    1 bin      bin            3364 Feb 22 2010  rc.bsdnet*
-rw-r-----    1 root     system         1852 Feb 22 2010  hostmibd.conf
-rw-r-----    1 root     system         7655 Feb 22 2010  aixmibd.conf
-rw-rw-r--    1 root     system         5397 Feb 22 2010  slp.conf
drwxr-xr-x    2 root     system          256 Feb 22 2010  mail/
lrwxrwxrwx    1 root     system           21 Feb 22 2010  sendmail.cf@ -> /etc/mail/sendmail.cf
lrwxrwxrwx    1 root     system           15 Feb 22 2010  route@ -> /usr/sbin/route*
lrwxrwxrwx    1 root     system           14 Feb 22 2010  ping@ -> /usr/sbin/ping*
lrwxrwxrwx    1 root     system           18 Feb 22 2010  ifconfig@ -> /usr/sbin/ifconfig*
lrwxrwxrwx    1 root     system           17 Feb 22 2010  aliases@ -> /etc/mail/aliases
-rw-r--r--    1 root     system         1040 Feb 22 2010  rpc
-rwxr-xr-x    1 root     system         9429 Feb 22 2010  rc.nfs*
lrwxrwxrwx    1 root     system           20 Feb 22 2010  rpc.pcnfsd@ -> /usr/sbin/rpc.pcnfsd*
lrwxrwxrwx    1 root     system           20 Feb 22 2010  gfsinstall@ -> /usr/sbin/gfsinstall*
drwxr-xr-x    3 bin      bin             256 Feb 22 2010  X11/
drwxr-xr-x    5 root     system          256 Feb 22 2010  perf/
-rwxr-xr--    1 root     system         7298 Feb 22 2010  rc.tcpip.tr.backup*
drwxr-xr-x    3 root     system          256 Feb 22 2010  ha/
-rw-rw-r--    1 root     system         2016 Feb 22 2010  environment
-rwxrwxr--    1 root     system         7381 Feb 22 2010  rc.tcpip*
-rwxrwxr-x    1 root     system          409 Feb 22 2010  fb_12_22_02_22*
-rw-r--r--    1 root     system         1035 Feb 22 2010  niminfo
-rw-r--r--    1 root     system         2049 Feb 22 2010  hosts.equiv
-r--r--r--    1 root     system         6482 Feb 22 2010  pam.conf
-rw-r--r--    1 root     system       347361 Feb 22 2010  services.bak
-rw-r--r--    1 root     system         4570 Feb 22 2010  inetd.conf.bak
lrwxrwxrwx    1 root     system           34 Feb 22 2010  seos.ini@ -> /sys_apps_01/security/acx/seos.ini
-rw-r--r--    1 root     system       347379 Apr 14 12:24 services.Apr-14-2010.ORIG
-rw-r--r--    1 root     system       347379 Apr 14 12:24 services
-rw-r--r--    1 root     system         4683 Apr 14 12:24 inetd.conf.Apr-14-2010.ORIG
-rw-rw-r--    1 root     system         1036 Apr 28 10:46 ntp.conf
-rwxr-xr-x    1 root     system          741 May 12 13:24 rc.itm1*
-rw-r--r--    1 root     system         9027 Jun 16 23:57 hosts.17Jun2010
-rwxr-x---    1 root     system         6398 Jul  9 15:51 tlmlog.properties*
-rw-r--r--    1 root     system         2106 Jul  9 15:51 tlm_mobility.cfg
-rw-r--r--    1 root     system         9102 Jul 12 14:02 hosts.13thJuly2010
-rw-rw-r--    1 root     system         4683 Jul 14 01:13 inetd.conf
-rw-r--r--    1 root     system         4697 Jul 19 06:53 inittab.19july10
-rw-r--r--    1 root     system          281 Aug  8 22:01 auto_direct
drwxrwxr-x    2 root     system         4096 Aug  8 22:42 vg/
-rw-r--r--    1 root     system          184 Aug 10 11:56 oratab.10thAug2010
-rw-r--r--    1 root     system         1771 Aug 10 12:34 vfs
-rwxr-xr-x    1 root     system         4152 Aug 10 12:34 rc.nfs4ss*
-rwxr-xr-x    1 root     system         4391 Aug 10 12:34 nfs.clean*
-r-xr-xr--    1 root     system         2087 Aug 10 12:35 securetcpip*
-rw-rw-r--    1 root     printq          580 Aug 10 12:37 prtglobalconfig
lrwxrwxrwx    1 root     system           12 Aug 10 12:40 wpars@ -> /etc/corrals/
-r-x------    2 root     system         2500 Aug 10 12:40 rc.wpars*
-r-x------    2 root     system         2500 Aug 10 12:40 rc.corrals*
-r-xr-xr--    1 bin      bin            6303 Aug 10 12:40 rc.bootc*
drwxrwxr-x    2 root     system         4096 Aug 10 12:40 objrepos/
drwx--x--x    3 root     system          256 Aug 10 12:40 corrals/
-r-x------    1 bin      bin            1762 Aug 10 12:40 rc.security.boot*
-rw-rw-r--    1 root     system      1446634 Aug 10 12:42 trcfmt
-r-xr-x---    1 root     system         4339 Aug 10 12:46 rc.tcptr*
-rw-r--r--    1 root     system         9921 Aug 10 12:46 protocols
-rw-r--r--    1 root     system         6482 Aug 10 12:46 pam.conf.websm.bak
-r-xr-xr-x    1 ipsec    ipsec           705 Aug 10 12:46 rc.ike*
drwxr-xr-x    3 ipsec    staff           256 Aug 10 12:46 ipsec/
drwxr-xr-x    2 root     system          256 Aug 10 12:47 rpm/
-r--------    1 root     system           18 Aug 10 12:48 bosboot.sum
-rw-r--r--    1 root     system         4961 Aug 10 13:16 filesystems
-rw-r--r--    1 root     system         4697 Aug 14 05:04 inittab.14august2010
-rw-r--r--    1 root     system         4698 Aug 14 05:06 inittab.20100814_050624.preU.save
-rwxr-xr-x    1 root     system         3647 Aug 14 05:06 rc.orig.7078238*
-rw-r--r--    1 root     system            7 Aug 14 05:10 atmsvcd.pid
drwxr-xr-x    4 root     system         4096 Aug 14 05:10 emc/
-rw-r--r--    1 root     system         4311 Aug 14 05:10 tlmagent.ini
-rw-r--r--    1 root     system            8 Aug 14 05:10 syslog.pid
drwx------    2 root     system          256 Aug 14 05:10 tunables/
-rwxr-xr-x    1 root     system         3674 Aug 14 05:33 rc*
-rw-r--r--    1 root     system         4372 Aug 14 05:33 inittab.100814_052729.preI.save
-rw-r--r--    1 root     system         4697 Aug 14 05:33 inittab
-rwxr-xr-x    1 root     system          275 Aug 28 00:43 rc.tws*
-rw-r--r--    1 root     system         9134 Sep  8 09:31 hosts.Sep082010
-rw-rw-r--    1 root     system         9242 Sep 14 14:39 hosts
-rw-r--r--    1 root     system         4051 Sep 17 22:50 ftpusers
drwxr-xr-x    5 root     system          256 Sep 21 15:42 Tivoli/
drwxr-x---    9 root     security      16384 Sep 21 22:47 security/
-rw-r--r--    1 root     system        31151 Sep 22 07:02 passwd
-rw-r--r--    1 root     system         5234 Sep 22 07:02 group
-rw-rw-r--    1 oracle   dba             185 Sep 22 10:40 oratab
-rw-r--r--    1 oracle   dba             232 Sep 22 10:49 oraInst.loc
-rw-r--r--    1 root     system        33696 Sep 22 11:03 utmp
-rw-r--r--    1 root     system            8 Sep 22 11:10 ntp.drift
doem1s @ oem0stl0:/etc
$ vi oraInst.loc
"oraInst.loc" 5 lines, 232 characters inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
#inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107
inst_group=dba
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"oraInst.loc" 5 lines, 232 characters


#inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107#:wq"oraInst.loc" 5 lines, 232 characters 
doem1s @ oem0stl0:/etc
$ k
doem1s @ oem0stl0:/etc
$ 
doem1s @ oem0stl0:/etc
$ cd -
/oracle/product/v10.2.0.4/OPatch
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ opatch lsinventory
Invoking OPatch 10.2.0.5.0

Oracle Interim Patch Installer version 10.2.0.5.0
Copyright (c) 2010, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v10.2.0.4
Central Inventory : /oracle/product/v10.2.0.4/oraInventory.10204
   from           : /etc/oraInst.loc
OPatch version    : 10.2.0.5.0
OUI version       : 10.2.0.4.0
OUI location      : /oracle/product/v10.2.0.4/oui
Log file location : /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch2010-09-22_11-46-00AM.log

Patch history file: /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch_history.txt

Lsinventory Output file location : /oracle/product/v10.2.0.4/cfgtoollogs/opatch/lsinv/lsinventory2010-09-22_11-46-00AM.txt

--------------------------------------------------------------------------------
Installed Top-level Products (2): 

Oracle Database 10g                                                  10.2.0.1.0
Oracle Database 10g Release 2 Patch Set 3                            10.2.0.4.0
There are 2 products installed in this Oracle Home.


Interim patches (34) :

Patch  9173248      : applied on Tue May 04 17:53:51 CDT 2010
Unique Patch ID:  12019569
   Created on 9 Dec 2009, 07:37:56 hrs PST8PDT
   Bugs fixed:
     9173248

Patch  9173244      : applied on Tue May 04 17:53:46 CDT 2010
Unique Patch ID:  12019569
   Created on 9 Dec 2009, 07:37:54 hrs PST8PDT
   Bugs fixed:
     9173244

Patch  9119226      : applied on Tue May 04 17:53:42 CDT 2010
Unique Patch ID:  12019569
   Created on 5 Jan 2010, 23:11:51 hrs PST8PDT
   Bugs fixed:
     8534387, 8290506, 9119226, 7375644, 8836308, 7150470, 7592346

Patch  8836686      : applied on Tue May 04 17:53:38 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:36 hrs PST8PDT
   Bugs fixed:
     8836686

Patch  8836684      : applied on Tue May 04 17:53:35 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:34 hrs PST8PDT
   Bugs fixed:
     8836684

Patch  8836683      : applied on Tue May 04 17:53:31 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:33 hrs PST8PDT
   Bugs fixed:
     8309623, 8836683

Patch  8836681      : applied on Tue May 04 17:53:27 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:31 hrs PST8PDT
   Bugs fixed:
     8836681, 8309587

Patch  8836678      : applied on Tue May 04 17:53:22 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:29 hrs PST8PDT
   Bugs fixed:
     8836678

Patch  8836677      : applied on Tue May 04 17:53:18 CDT 2010
Unique Patch ID:  12019569
   Created on 11 Sep 2009, 01:30:13 hrs PST8PDT
   Bugs fixed:
     8836677

Patch  8836675      : applied on Tue May 04 17:53:14 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:23 hrs PST8PDT
   Bugs fixed:
     8309637, 8836675

Patch  8836671      : applied on Tue May 04 17:53:10 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:23 hrs PST8PDT
   Bugs fixed:
     8836671

Patch  8836667      : applied on Tue May 04 17:53:06 CDT 2010
Unique Patch ID:  12019569
   Created on 4 Sep 2009, 11:00:21 hrs PST8PDT
   Bugs fixed:
     8836667

Patch  8568405      : applied on Wed Aug 12 16:42:27 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:27 hrs PST8PDT
   Bugs fixed:
     8568405

Patch  8568404      : applied on Wed Aug 12 16:42:22 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:25 hrs PST8PDT
   Bugs fixed:
     8568404

Patch  8568402      : applied on Wed Aug 12 16:42:17 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:23 hrs PST8PDT
   Bugs fixed:
     6870937, 8568402

Patch  8568398      : applied on Wed Aug 12 16:42:11 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:20 hrs PST8PDT
   Bugs fixed:
     6392076, 8568398

Patch  8568397      : applied on Wed Aug 12 16:42:04 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:17 hrs PST8PDT
   Bugs fixed:
     8568397

Patch  8568395      : applied on Wed Aug 12 16:41:59 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 18:00:15 hrs PST8PDT
   Bugs fixed:
     8309639, 8568395

Patch  8309642      : applied on Wed Aug 12 16:41:49 CDT 2009
Unique Patch ID:  11408846
   Created on 18 Mar 2009, 20:38:30 hrs PST8PDT
   Bugs fixed:
     8309642

Patch  8309632      : applied on Wed Aug 12 16:41:39 CDT 2009
Unique Patch ID:  11408846
   Created on 18 Mar 2009, 20:37:46 hrs PST8PDT
   Bugs fixed:
     8309632

Patch  8309592      : applied on Wed Aug 12 16:41:30 CDT 2009
Unique Patch ID:  11408846
   Created on 18 Mar 2009, 20:36:51 hrs PST8PDT
   Bugs fixed:
     8309592

Patch  7609058      : applied on Wed Aug 12 16:41:20 CDT 2009
Unique Patch ID:  11408846
   Created on 9 Jun 2009, 17:59:56 hrs PST8PDT
   Bugs fixed:
     7609058

Patch  7609057      : applied on Wed Aug 12 16:41:15 CDT 2009
Unique Patch ID:  11408846
   Created on 4 Jun 2009, 12:10:30 hrs PST8PDT
   Bugs fixed:
     7609057

Patch  7375617      : applied on Wed Aug 12 16:41:10 CDT 2009
Unique Patch ID:  11408846
   Created on 16 Sep 2008, 02:00:43 hrs PST8PDT
   Bugs fixed:
     7375617

Patch  7375613      : applied on Wed Aug 12 16:41:06 CDT 2009
Unique Patch ID:  11408846
   Created on 16 Sep 2008, 02:00:41 hrs PST8PDT
   Bugs fixed:
     7375613

Patch  7375611      : applied on Wed Aug 12 16:41:01 CDT 2009
Unique Patch ID:  11408846
   Created on 16 Sep 2008, 02:00:38 hrs PST8PDT
   Bugs fixed:
     7375611

Patch  7197583      : applied on Wed Aug 12 16:40:56 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:32 hrs PST8PDT
   Bugs fixed:
     7197583

Patch  7155254      : applied on Wed Aug 12 16:40:46 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:30 hrs PST8PDT
   Bugs fixed:
     7155254

Patch  7155253      : applied on Wed Aug 12 16:39:06 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:27 hrs PST8PDT
   Bugs fixed:
     7155253

Patch  7155252      : applied on Wed Aug 12 16:37:46 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:25 hrs PST8PDT
   Bugs fixed:
     7155252

Patch  7155251      : applied on Wed Aug 12 16:37:41 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:24 hrs PST8PDT
   Bugs fixed:
     7155251

Patch  7155250      : applied on Wed Aug 12 16:37:36 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:22 hrs PST8PDT
   Bugs fixed:
     7155250

Patch  7155249      : applied on Wed Aug 12 16:37:30 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:17:01 hrs PST8PDT
   Bugs fixed:
     7155249

Patch  7155248      : applied on Wed Aug 12 16:37:24 CDT 2009
Unique Patch ID:  11408846
   Created on 10 Jul 2008, 03:06:50 hrs PST8PDT
   Bugs fixed:
     7155248



--------------------------------------------------------------------------------

OPatch succeeded.
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ lsnrctl stop 

LSNRCTL for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production on 22-SEP-2010 11:46:29

Copyright (c) 1991, 2007, Oracle.  All rights reserved.

Connecting to (ADDRESS=(PROTOCOL=TCP)(HOST=oem0stl0)(PORT=1527))
The command completed successfully
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ ps -ef | grep inh
  oracle  6094964        1   0   Aug 14      -  1:03 /oracle/product/v10.2.0.4/bin/tnslsnr LISTENER -inherit 
  oracle  4915612  9306188   0 11:46:53  pts/6  0:00 grep inh 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ kill -9 6094964
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ ps -ef | grep inh
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/OPatch
$ cd /oracle/product/v10.2.0.4/patches_10204/9655017
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/patches_10204/9655017
$ export PATH=$PATH:/oracle/local/tools
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/patches_10204/9655017
$ opatch napply -skip_subset -skip_duplicate
Invoking OPatch 10.2.0.5.0

Oracle Interim Patch Installer version 10.2.0.5.0
Copyright (c) 2010, Oracle Corporation.  All rights reserved.

UTIL session

Oracle Home       : /oracle/product/v10.2.0.4
Central Inventory : /oracle/product/v10.2.0.4/oraInventory.10204
   from           : /etc/oraInst.loc
OPatch version    : 10.2.0.5.0
OUI version       : 10.2.0.4.0
OUI location      : /oracle/product/v10.2.0.4/oui
Log file location : /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch2010-09-22_11-51-35AM.log

Patch history file: /oracle/product/v10.2.0.4/cfgtoollogs/opatch/opatch_history.txt

Invoking utility "napply"
Checking conflict among patches...
Checking if Oracle Home has components required by patches...
Checking skip_duplicate
These patches will be skipped because they are duplicates of some patch(es) in the Oracle Home: 7155248,7155249,7155250,7155251,7155252,7155253,7155254,7197583,7375611,7375613,7375617,7609057,7609058,8309592,8309632,8568395,8568397,8568398,8568402,8568404,8568405,8836667,8836671,8836675,8836677,8836678,8836681,8836683,8836684,8836686,9173244
OPatch continues with these patches: 9442328,9442331,9442335,9442339,9655017,9678690,9678695,9678697
Checking skip_subset
Checking conflicts against Oracle Home...

Conflicts/Supersets for each patch are:

Patch : 9655017

        Bug Superset of 9119226
        Super set bugs are:
        8534387,  8290506,  9119226,  7375644,  8836308,  7150470,  7592346

Patch : 9678690

        Bug Superset of 8309642
        Super set bugs are:
        8309642

Patch : 9678695

        Bug Superset of 9173248
        Super set bugs are:
        9173248

OPatch found that the following patches are not required.
They are either subset of the patches in Oracle Home (or) subset of the patches in the given list 
(or) duplicate : 
   7155248   7155249   7155250   7155251   7155252   7155253   7155254   7197583   7375611   7375613   7375617   7609057   7609058   8309592   8309632   8568395   8568397   8568398   8568402   8568404   8568405   8836667   8836671   8836675   8836677   8836678   8836681   8836683   8836684   8836686   9173244

Patches [   9119226   8309642   9173248 ] will be rolled back.


Do you want to proceed? [y|n]
y
User Responded with: Y
OPatch continues with these patches:   9442328  9442331  9442335  9442339  9655017  9678690  9678695  9678697  

Do you want to proceed? [y|n]
y
User Responded with: Y

Running prerequisite checks...

OPatch detected non-cluster Oracle Home from the inventory and will patch the local system only.


Please shutdown Oracle instances running out of this ORACLE_HOME on the local system.
(Oracle Home = '/oracle/product/v10.2.0.4')


Is the local system ready for patching? [y|n]
y
User Responded with: Y
Backing up files affected by the patch 'NApply' for restore. This might take a while...
Execution of 'sh /oracle/product/v10.2.0.4/patches_10204/9655017/9655017/custom/scripts/pre -apply 9655017 ':


Return Code = 0

Applying patch 9442328...

ApplySession applying interim patch '9442328' to OH '/oracle/product/v10.2.0.4'
ApplySession rolling back interim patch '9119226' from OH '/oracle/product/v10.2.0.4'
Execution of 'sh /oracle/product/v10.2.0.4/.patch_storage/9119226_Jan_5_2010_23_11_51/original_patch/custom/scripts/pre -rollback 9119226 ':


Return Code = 0

Patching component oracle.rdbms.rsf, 10.2.0.4.0...
Deleting file "/oracle/product/v10.2.0.4/cpu/CPUJan2010/rollback_all.lst"
Deleting file "/oracle/product/v10.2.0.4/cpu/CPUJan2010/rollback_new.lst"

Patching component oracle.rdbms, 10.2.0.4.0...
Deleting file "/oracle/product/v10.2.0.4/cpu/CPUJan2010/catcpu.sql"
Deleting file "/oracle/product/v10.2.0.4/cpu/CPUJan2010/catcpu_rollback.sql"
Deleting file "/oracle/product/v10.2.0.4/rdbms/admin/bundledata_CPU.xml"
Deleting file "/oracle/product/v10.2.0.4/rdbms/admin/catbundle.sql"
Deleting file "/oracle/product/v10.2.0.4/cpu/scripts/sdo_oct2009.sql"
RollbackSession removing interim patch '9119226' from inventory

--------------------------------------------------------------------------------
********************************************************************************
********************************************************************************
**                                ATTENTION                                   **
**                                                                            **
** Please note that the Security Patch Installation (Patch Deinstallation) is **
** not complete until all the Post Installation (Post Deinstallation)         **
** instructions noted in the Readme accompanying this patch, have been        **
** successfully completed.                                                    **
**                                                                            **
********************************************************************************
********************************************************************************

--------------------------------------------------------------------------------

Execution of 'sh /oracle/product/v10.2.0.4/.patch_storage/9119226_Jan_5_2010_23_11_51/original_patch/custom/scripts/post -rollback 9119226 ':


Return Code = 0
ApplySession rolling back interim patch '8309642' from OH '/oracle/product/v10.2.0.4'

Patching component oracle.network.listener, 10.2.0.4.0...
Updating archive file "/oracle/product/v10.2.0.4/network/lib/libnlsnr10.a"  with "network/lib/libnlsnr10.a/nsglgr.o"
Updating archive file "/oracle/product/v10.2.0.4/network/lib/libnlsnr10.a"  with "network/lib/libnlsnr10.a/nsglro.o"
Updating archive file "/oracle/product/v10.2.0.4/network/lib32/libnlsnr10.a"  with "network/lib32/libnlsnr10.a/nsglgr.o"
Updating archive file "/oracle/product/v10.2.0.4/network/lib32/libnlsnr10.a"  with "network/lib32/libnlsnr10.a/nsglro.o"
RollbackSession removing interim patch '8309642' from inventory
ApplySession rolling back interim patch '9173248' from OH '/oracle/product/v10.2.0.4'

Patching component oracle.network.rsf, 10.2.0.4.0...
Updating archive file "/oracle/product/v10.2.0.4/lib/libnro10.a"  with "lib/libnro10.a/ncrfgp.o"
Updating archive file "/oracle/product/v10.2.0.4/lib/libnro10.a"  with "lib/libnro10.a/ncrfidsa.o"
Updating archive file "/oracle/product/v10.2.0.4/lib32/libnro10.a"  with "lib32/libnro10.a/ncrfgp.o"
Updating archive file "/oracle/product/v10.2.0.4/lib32/libnro10.a"  with "lib32/libnro10.a/ncrfidsa.o"

Patching component oracle.rdbms, 10.2.0.4.0...
RollbackSession removing interim patch '9173248' from inventory


OPatch back to application of the patch '9442328' after auto-rollback.

Backing up files affected by the patch '9442328' for rollback. This might take a while...

Patching component oracle.rdbms.dbscripts, 10.2.0.4.0...
Copying file to "/oracle/product/v10.2.0.4/rdbms/admin/catexp.sql"
ApplySession adding interim patch '9442328' to inventory

Verifying the update...
Inventory check OK: Patch ID 9442328 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9442328 are present in Oracle Home.

Applying patch 9442331...

ApplySession applying interim patch '9442331' to OH '/oracle/product/v10.2.0.4'
Backing up files affected by the patch '9442331' for rollback. This might take a while...

Patching component oracle.javavm.server, 10.2.0.4.0...
Copying file to "/oracle/product/v10.2.0.4/javavm/install/jvm_exp.sql"
ApplySession adding interim patch '9442331' to inventory

Verifying the update...
Inventory check OK: Patch ID 9442331 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9442331 are present in Oracle Home.

Applying patch 9442335...

ApplySession applying interim patch '9442335' to OH '/oracle/product/v10.2.0.4'
Backing up files affected by the patch '9442335' for rollback. This might take a while...

Patching component oracle.javavm.server, 10.2.0.4.0...
Copying file to "/oracle/product/v10.2.0.4/javavm/install/initjvm.sql"
Copying file to "/oracle/product/v10.2.0.4/javavm/install/jvmursc.sql"
ApplySession adding interim patch '9442335' to inventory

Verifying the update...
Inventory check OK: Patch ID 9442335 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9442335 are present in Oracle Home.

Applying patch 9442339...

ApplySession applying interim patch '9442339' to OH '/oracle/product/v10.2.0.4'
Backing up files affected by the patch '9442339' for rollback. This might take a while...

Patching component oracle.rdbms.rsf, 10.2.0.4.0...
Updating archive file "/oracle/product/v10.2.0.4/lib/libgeneric10.a"  with "lib/libgeneric10.a/qcdo.o"
Updating archive file "/oracle/product/v10.2.0.4/lib32/libgeneric10.a"  with "lib32/libgeneric10.a/qcdo.o"

Patching component oracle.rdbms, 10.2.0.4.0...
Updating archive file "/oracle/product/v10.2.0.4/lib/libserver10.a"  with "lib/libserver10.a/kks1.o"
Updating archive file "/oracle/product/v10.2.0.4/lib/libserver10.a"  with "lib/libserver10.a/opiprs.o"
Updating archive file "/oracle/product/v10.2.0.4/lib/libserver10.a"  with "lib/libserver10.a/aud.o"
ApplySession adding interim patch '9442339' to inventory

Verifying the update...
Inventory check OK: Patch ID 9442339 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9442339 are present in Oracle Home.

Applying patch 9655017...

ApplySession applying interim patch '9655017' to OH '/oracle/product/v10.2.0.4'
Backing up files affected by the patch '9655017' for rollback. This might take a while...

Patching component oracle.rdbms.rsf, 10.2.0.4.0...
Copying file to "/oracle/product/v10.2.0.4/cpu/CPUJul2010/rollback_all.lst"
Copying file to "/oracle/product/v10.2.0.4/cpu/CPUJul2010/rollback_new.lst"

Patching component oracle.rdbms, 10.2.0.4.0...
Copying file to "/oracle/product/v10.2.0.4/cpu/CPUJul2010/catcpu.sql"
Copying file to "/oracle/product/v10.2.0.4/cpu/CPUJul2010/catcpu_rollback.sql"
Copying file to "/oracle/product/v10.2.0.4/rdbms/admin/bundledata_CPU.xml"
Copying file to "/oracle/product/v10.2.0.4/rdbms/admin/catbundle.sql"
Copying file to "/oracle/product/v10.2.0.4/cpu/scripts/amdcpu.sql"
Copying file to "/oracle/product/v10.2.0.4/cpu/scripts/apscpu.sql"
Copying file to "/oracle/product/v10.2.0.4/cpu/scripts/xoqcpu.sql"
Copying file to "/oracle/product/v10.2.0.4/cpu/scripts/sdo_oct2009.sql"
Copying file to "/oracle/product/v10.2.0.4/cpu/scripts/bug9371993.sql"
Copying file to "/oracle/product/v10.2.0.4/cpu/scripts/bug9016295.sql"
ApplySession adding interim patch '9655017' to inventory

Verifying the update...
Inventory check OK: Patch ID 9655017 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9655017 are present in Oracle Home.

Applying patch 9678690...

ApplySession applying interim patch '9678690' to OH '/oracle/product/v10.2.0.4'
Backing up files affected by the patch '9678690' for rollback. This might take a while...

Patching component oracle.network.rsf, 10.2.0.4.0...
Updating archive file "/oracle/product/v10.2.0.4/network/lib/libnlsnr10.a"  with "network/lib/libnlsnr10.a/nsglgr.o"
Updating archive file "/oracle/product/v10.2.0.4/network/lib/libnlsnr10.a"  with "network/lib/libnlsnr10.a/nsglro.o"
Updating archive file "/oracle/product/v10.2.0.4/network/lib32/libnlsnr10.a"  with "network/lib32/libnlsnr10.a/nsglgr.o"
Updating archive file "/oracle/product/v10.2.0.4/network/lib32/libnlsnr10.a"  with "network/lib32/libnlsnr10.a/nsglro.o"

Patching component oracle.network.listener, 10.2.0.4.0...
ApplySession adding interim patch '9678690' to inventory

Verifying the update...
Inventory check OK: Patch ID 9678690 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9678690 are present in Oracle Home.

Applying patch 9678695...

ApplySession applying interim patch '9678695' to OH '/oracle/product/v10.2.0.4'
Backing up files affected by the patch '9678695' for rollback. This might take a while...

Patching component oracle.network.rsf, 10.2.0.4.0...
Updating archive file "/oracle/product/v10.2.0.4/lib/libnro10.a"  with "lib/libnro10.a/ncrfgp.o"
Updating archive file "/oracle/product/v10.2.0.4/lib/libnro10.a"  with "lib/libnro10.a/ncrfidsa.o"
Updating archive file "/oracle/product/v10.2.0.4/lib32/libnro10.a"  with "lib32/libnro10.a/ncrfgp.o"
Updating archive file "/oracle/product/v10.2.0.4/lib32/libnro10.a"  with "lib32/libnro10.a/ncrfidsa.o"

Patching component oracle.network.listener, 10.2.0.4.0...
ApplySession adding interim patch '9678695' to inventory

Verifying the update...
Inventory check OK: Patch ID 9678695 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9678695 are present in Oracle Home.

Applying patch 9678697...

ApplySession applying interim patch '9678697' to OH '/oracle/product/v10.2.0.4'
Backing up files affected by the patch '9678697' for rollback. This might take a while...

Patching component oracle.oraolap, 10.2.0.4.0...
Copying file to "/oracle/product/v10.2.0.4/olap/admin/amdu101.sql"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/cwm2awcg.sql"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/cwm2mrag.sql"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/cwm2mrgt.sql"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/xoqu101.sql"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/xoqu920.sql"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/dbmsaw.sql"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapiboo.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapidcm.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapidcm92010.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapidsm.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapidsm92010.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapiecm.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapiecm92010.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapimdm.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapimdm92010.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapimdx.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapimod.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapimod92010.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapiomd.plb"
Copying file to "/oracle/product/v10.2.0.4/olap/admin/olapiomd92010.plb"
ApplySession adding interim patch '9678697' to inventory

Verifying the update...
Inventory check OK: Patch ID 9678697 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9678697 are present in Oracle Home.
Running make for target client_sharedlib
Running make for target ioracle
Running make for target client_sharedlib
Running make for target itnslsnr
Execution of 'sh /oracle/product/v10.2.0.4/patches_10204/9655017/9655017/custom/scripts/post -apply 9655017 ':


Return Code = 0

The local system has been patched and can be restarted.

UtilSession: N-Apply done.
--------------------------------------------------------------------------------
The following warnings have occurred during OPatch execution:
1) OUI-67302:
OPatch found that the following patches are not required.
They are either subset of the patches in Oracle Home (or) subset of the patches in the given list 
(or) duplicate : 
   7155248   7155249   7155250   7155251   7155252   7155253   7155254   7197583   7375611   7375613   7375617   7609057   7609058   8309592   8309632   8568395   8568397   8568398   8568402   8568404   8568405   8836667   8836671   8836675   8836677   8836678   8836681   8836683   8836684   8836686   9173244
2) OUI-67303:
Patches [   9119226   8309642   9173248 ] will be rolled back.

--------------------------------------------------------------------------------
OPatch Session completed with warnings.

OPatch completed with warnings.
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/patches_10204/9655017
$ opatch lisinventory | grep 9655017
Patch  9655017      : applied on Wed Sep 22 11:53:21 CDT 2010
     8534387, 8290506, 7375644, 9352191, 9655017, 7150470, 7592346, 9119226, 8836308
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/patches_10204/9655017
$ sqlplus 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/patches_10204/9655017
$ cd 
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/patches_10204/9655017
$ cd $ORACLE_HOME/rdbms/admin
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/rdbms/admin
$ sqlplus /nolog

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Sep 22 11:56:20 2010

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.

SQL> CONNECT / AS SYSDBA
Connected to an idle instance.
SQL> STARTUP
ORACLE instance started.

Total System Global Area 1996488704 bytes
Fixed Size                  2085136 bytes
Variable Size             905973488 bytes
Database Buffers         1073741824 bytes
Redo Buffers               14688256 bytes
Database mounted.
Database opened.
SQL> @catbundle.sql cpu apply

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.





Generating apply and rollback scripts...
Check the following file for errors:
/oracle/product/v10.2.0.4/cfgtoollogs/catbundle/catbundle_CPU_DOEM1S_GENERATE_2010Sep22_11_57_25.log
Apply script: /oracle/product/v10.2.0.4/rdbms/admin/catbundle_CPU_DOEM1S_APPLY.sql
Rollback script: /oracle/product/v10.2.0.4/rdbms/admin/catbundle_CPU_DOEM1S_ROLLBACK.sql

PL/SQL procedure successfully completed.

Executing script file...




SQL> COLUMN spool_file NEW_VALUE spool_file NOPRINT
SQL> SELECT '/oracle/product/v10.2.0.4/cfgtoollogs/catbundle/' || 'catbundle_CPU_' || name || '_APPLY_' || TO_CHAR(SYSDATE, 'YYYYMonDD_hh24_mi_ss', 'NLS_DATE_LANGUAGE=''AMERICAN''') || '.log' AS spool_file FROM v$database;




SQL> SPOOL &spool_file
SQL> exec dbms_registry.set_session_namespace('SERVER')

PL/SQL procedure successfully completed.

SQL> PROMPT Skipping Oracle Text because it is not installed or versions mismatch...
Skipping Oracle Text because it is not installed or versions mismatch...
SQL> PROMPT Skipping Oracle Data Mining because it is not installed or versions mismatch...
Skipping Oracle Data Mining because it is not installed or versions mismatch...
SQL> PROMPT Skipping Oracle Spatial because it is not installed or versions mismatch...
Skipping Oracle Spatial because it is not installed or versions mismatch...
SQL> PROMPT Processing JAVAVM Option...
Processing JAVAVM Option...
SQL> ALTER SESSION SET current_schema = sys;

Session altered.

SQL> @?/cpu/scripts/bug9371993.sql
SQL> 
SQL> revoke execute on "oracle/aurora/util/Wrapper" from public;

Revoke succeeded.

SQL> @?/cpu/scripts/bug9016295.sql
SQL> @?/javavm/install/jvm_exp.sql
SQL> Rem
SQL> Rem $Header: javavm/install/jvm_exp.sql /st_recommended_10.2.0.4.0/2 2010/03/03 15:27:07 etucker Exp $
SQL> Rem
SQL> Rem dbms_jvm_exp_perms.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbms_jvm_exp_perms.sql - supports export of java permissions
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This package is registered in sys.exppkgobj$.  This will enable
SQL> Rem      exporting of all permmissions.  Any permissions different from those
SQL> Rem      in the target db will be added to java$policy$ if necessary.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      import_perms can not be run alone.  It depends on the strings emitted
SQL> Rem      by the export_perms() output to create the beginning table.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    etucker     03/03/10     - add protection for revoke
SQL> Rem    etucker     02/17/10     - XbranchMerge
SQL> Rem                               etucker_rfi_backport_9016295_10.2.0.4.4 from
SQL> Rem                               st_javavm_10.2
SQL> Rem    etucker     02/13/10     - add revoke
SQL> Rem    etucker     02/11/10     - fix role
SQL> Rem    etucker     02/11/10     - Backport etucker_bug-9016295 from main
SQL> Rem    etucker     08/30/07     - policy table fixes update
SQL> Rem    etucker     06/28/05    -  fix query
SQL> Rem    etucker     06/13/05   -  add version check for backward compat
SQL> Rem    etucker     06/08/05  -  remove set stuff
SQL> Rem    etucker     05/06/05  - etucker_bug-3993297
SQL> Rem    etucker     05/06/05 -  more support
SQL> Rem    etucker     05/02/05 - Created
SQL> Rem
SQL> 
SQL> create or replace package DBMS_JVM_EXP_PERMS AUTHID CURRENT_USER as
  2    TYPE temp_rec is record (
  3         kind        dba_java_policy.kind%TYPE,
  4         grantee     dba_java_policy.grantee%TYPE,
  5         type_schema dba_java_policy.type_schema%TYPE,
  6         type_name   dba_java_policy.type_name%TYPE,
  7         name        dba_java_policy.name%TYPE,
  8         action      dba_java_policy.action%TYPE,
  9         enabled     dba_java_policy.enabled%TYPE
 10         );
 11  
 12    TYPE temp_java_policy is table of temp_rec;
 13  
 14    function create_exp(objid IN number,
 15                        version in varchar2,
 16                        new_block OUT PLS_INTEGER) return varchar2;
 17  
 18    function grant_exp (objid IN NUMBER,
 19                        isdba IN PLS_INTEGER,
 20                        grantor OUT VARCHAR2,
 21                        version IN VARCHAR2,
 22                        new_block OUT PLS_INTEGER) RETURN varchar2;
 23  
 24    function audit_exp (objid IN NUMBER,
 25                        version IN VARCHAR2,
 26                        new_block OUT PLS_INTEGER) RETURN varchar2;
 27  
 28    function drop_exp (objid IN NUMBER,
 29                       version IN VARCHAR2,
 30                       new_block OUT PLS_INTEGER) RETURN varchar2;
 31  
 32    function audit_sysprivs_exp (version IN VARCHAR2,
 33                                 new_block OUT PLS_INTEGER ) RETURN varchar2;
 34    function grant_sysprivs_exp(version IN varchar2,
 35                                new_block OUT PLS_INTEGER
 36                               ) return varchar2;
 37    procedure import_jvm_perms(pcol temp_java_policy);
 38    function  export_perms(state IN OUT PLS_INTEGER, new_block OUT PLS_INTEGER)
 39                          return varchar2;
 40  end DBMS_JVM_EXP_PERMS;
 41  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace package body DBMS_JVM_EXP_PERMS as
  2    EXP_END    CONSTANT PLS_INTEGER := 999999;
  3    EXP_START  CONSTANT PLS_INTEGER := 0;
  4    cursor policy_q is select kind, grantee, type_schema,type_name,
  5                              name,action, enabled from dba_java_policy where
  6                              enabled='ENABLED';
  7    zone PLS_INTEGER := EXP_START;
  8  
  9  
 10    function grant_sysprivs_exp(version IN varchar2,
 11                                new_block OUT PLS_INTEGER
 12                               ) return varchar2 as
 13  
 14    comm_str    varchar2(4000);
 15    Begin
 16      -- Check version is >= 10.2
 17      if version < '10.02.00.00.00' then
 18        return '';
 19      end if;
 20  
 21      sys.dbms_zhelp_ir.check_sys_priv(DBMS_ZHELP_IR.KZSSTA);
 22  
 23      <<exp_done>>
 24      if zone = EXP_END then
 25        zone := EXP_START;
 26        if policy_q%ISOPEN = TRUE then
 27          close policy_q;
 28        end if;
 29        return '';
 30      end if;
 31  
 32      comm_str := export_perms(zone, new_block);
 33  
 34      if comm_str is null then
 35        zone := EXP_END;
 36        goto exp_done;
 37      else
 38        zone := zone + 1;
 39        return comm_str;
 40      end if;
 41    exception
 42      when others then
 43        zone := EXP_START;
 44        raise;
 45    end grant_sysprivs_exp;
 46  
 47    function create_exp(objid IN number,
 48                        version in varchar2,
 49                        new_block OUT PLS_INTEGER) return varchar2 as
 50    Begin
 51      return '';
 52    end create_exp;
 53  
 54    function grant_exp (objid IN NUMBER,
 55                        isdba IN PLS_INTEGER,
 56                        grantor OUT VARCHAR2,
 57                        version IN VARCHAR2,
 58                        new_block OUT PLS_INTEGER) RETURN varchar2 as
 59    Begin
 60      return '';
 61    end grant_exp;
 62  
 63    function audit_exp (objid IN NUMBER,
 64                        version IN VARCHAR2,
 65                        new_block OUT PLS_INTEGER) RETURN varchar2 as
 66    Begin
 67      return '';
 68    end audit_exp;
 69  
 70    function audit_sysprivs_exp (version IN VARCHAR2,
 71                                 new_block OUT PLS_INTEGER ) RETURN varchar2 as
 72    Begin
 73      return '';
 74    end audit_sysprivs_exp;
 75  
 76    function drop_exp (objid IN NUMBER,
 77                       version IN VARCHAR2,
 78                       new_block OUT PLS_INTEGER) RETURN varchar2 as
 79    Begin
 80      return '';
 81    end drop_exp;
 82  
 83   -- uses the temp_java_perms table built by the first part of import
 84   -- and adds permissions and policy permissions as necessary.
 85    procedure import_jvm_perms(pcol temp_java_policy) as
 86  
 87    row_count number;
 88  
 89    key       number;
 90  
 91    POLICYPERM CONSTANT varchar2(50) :=
 92          'oracle.aurora.rdbms.security.PolicyTablePermission';
 93  
 94    class  varchar2(500);
 95  
 96    action varchar2(200);
 97  
 98    pol_seq number := 0 ;
 99    run_seq number := 0 ;
100  
101    Begin
102  
103      -- Check privs
104      sys.dbms_zhelp_ir.check_sys_priv(DBMS_ZHELP_IR.KZSSTA);
105  
106      -- we need to disable the RESTRICTion on RuntimePermission#LoadLibrary
107      select seq into pol_seq from dba_java_policy
108             where kind = 'RESTRICT' and type_schema='SYS'
109             and type_name = POLICYPERM and
110             name = '0:java.lang.RuntimePermission#loadLibrary.*' and
111             enabled='ENABLED';
112  
113      if(pol_seq != 0) then
114          dbms_java.disable_permission(pol_seq);
115      end if;
116  
117      select seq into run_seq from dba_java_policy
118             where kind = 'RESTRICT' and type_schema='SYS'
119             and type_name = 'java.lang.RuntimePermission' and
120             name = 'loadLibrary.*' and enabled='ENABLED';
121  
122      if(run_seq != 0) then
123          dbms_java.disable_permission(run_seq);
124      end if;
125  
126  
127      -- This is the main loop that goes through each record
128      -- and check the target dba_java_policy table to see if there is
129      -- a like permission there already.  If not then the permission
130      -- is created.
131  
132      for i in pcol.FIRST .. pcol.LAST
133      loop
134          -- Check if permission is already in dba_java_policy
135          select count(*) into row_count from dba_java_policy d where
136          pcol(i).kind = d.kind and
137          pcol(i).grantee = d.grantee and
138          pcol(i).type_schema = d.type_schema and
139          pcol(i).type_name = d.type_name and
140          (pcol(i).name = d.name or (pcol(i).name is null and d.name is null)
141           or ((d.name ='*' or d.name is null) and pcol(i).name != null)) and
142          (pcol(i).action = d.action or (pcol(i).action is null and
143          d.action is null) or ((d.action = '*' or d.action is null) and
144          pcol(i).action != null));
145          -- If this is non-zero then we must grant or restrict
146          if row_count = 0 then
147            -- GRANT
148            if pcol(i).kind = 'GRANT' then
149            -- Policy Permissions are handled differently
150              if pcol(i).type_name = POLICYPERM then
151                if(instr(pcol(i).name,'0',1,1) = 0) then
152                  class := pcol(i).name;
153                  action := '';
154                else
155                  class := substr(pcol(i).name,3,instr(pcol(i).name,'#',1,1)-3);
156                  action := substr(pcol(i).name,instr(pcol(i).name,'#',1,1)+1);
157                end if;
158                dbms_java.grant_policy_permission(pcol(i).grantee,
159                  pcol(i).type_schema, class, action, key);
160              else -- regular grants
161                dbms_java.grant_permission(pcol(i).grantee,
162                  pcol(i).type_schema||':'||pcol(i).type_name,
163                  pcol(i).name, pcol(i).action,key);
164              end if;
165            else -- RESTRICT
166              if pcol(i).type_name = POLICYPERM then
167                dbms_java.restrict_permission(pcol(i).grantee,
168                  pcol(i).type_schema||':'||POLICYPERM, pcol(i).name,'',key);
169              else
170                 dbms_java.restrict_permission(pcol(i).grantee,
171                  pcol(i).type_schema||':'||pcol(i).type_name,
172                  pcol(i).name, pcol(i).action,key);
173              end if;
174            end if;
175            if pcol(i).enabled = 'DISABLE' then
176              dbms_java.disable_permission(key);
177            end if;
178          else
179            goto end_loop;
180          end if;
181      <<end_loop>>
182      null;
183      end loop;
184  
185      -- reenable the RESTRICTions run_seq must be first!
186      if( run_seq != 0) then
187         dbms_java.enable_permission(run_seq);
188      end if;
189      if( pol_seq != 0) then
190         dbms_java.enable_permission(pol_seq);
191      end if;
192    exception
193      WHEN OTHERS THEN
194       raise;
195    end import_jvm_perms;
196  
197    function export_perms(state IN OUT PLS_INTEGER, new_block OUT PLS_INTEGER)
198          return varchar2 as
199  
200    kind        varchar2(8);
201    grantee     varchar2(30);
202    type_schema varchar2(30);
203    type_name   varchar2(4000);
204    name        varchar2(4000);
205    action      varchar2(4000);
206    enabled     varchar2(8);
207  
208    Begin
209  -- open the dba_java_policy cursor and return temp tale creation
210      IF policy_q%ISOPEN = FALSE and state = 0 THEN
211        open policy_q;
212        new_block := 0;
213        return 'execute immediate (''CREATE TABLE TEMP_JAVA_PRIVS' ||
214               ' AS SELECT KIND, GRANTEE, TYPE_SCHEMA, TYPE_NAME,' ||
215               ' NAME, ACTION, ENABLED FROM DBA_JAVA_POLICY WHERE ROWNUM > 1'');';
216      end if;
217  --  Process the insert commands for import.
218      if policy_q%ISOPEN = TRUE then
219        Fetch policy_q into kind, grantee, type_schema,
220                            type_name, name, action, enabled;
221        if policy_q%NOTFOUND OR policy_q%NOTFOUND IS NULL THEN
222          close policy_q;
223          state := EXP_END -1;
224      else
225    -- process each row and right the inserts
226         if state = 1 then
227           new_block := 1;
228         else
229           new_block := 0;
230         end if;
231         return 'INSERT INTO TEMP_JAVA_PRIVS VALUES(''' || kind || ''',''' ||
232                 grantee || ''',''' || type_schema || ''',''' || type_name ||
233                 ''',''' || name || ''',''' || action || ''',''' ||
234                 enabled || ''');';
235        end if;
236      end if;
237      if state = EXP_END-1 then
238        new_block :=1;
239        return
240  'DECLARE
241     TJP SYS.DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;
242     CURSOR C1 IS SELECT KIND,GRANTEE,TYPE_SCHEMA,TYPE_NAME,
243                         NAME,ACTION,ENABLED FROM TEMP_JAVA_PRIVS;
244  BEGIN
245     OPEN C1;
246     FETCH C1 BULK COLLECT INTO TJP;
247     CLOSE C1;
248     SYS.DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(TJP);
249     EXECUTE IMMEDIATE(''DROP TABLE TEMP_JAVA_PRIVS'');
250  END;';
251      end if;
252  -- export is done
253      return '';
254    end export_perms;
255  
256  end DBMS_JVM_EXP_PERMS;
257  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> DELETE FROM exppkgobj$ where package = 'DBMS_JVM_EXP_PERMS';

1 row deleted.

SQL> insert into sys.exppkgobj$ values('DBMS_JVM_EXP_PERMS', 'SYS', 1, 29, 1, 4000);

1 row created.

SQL> commit;

Commit complete.

SQL> 
SQL> 
SQL> 
SQL> GRANT EXECUTE ON sys.dbms_jvm_exp_perms TO IMP_FULL_DATABASE;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_jvm_exp_perms TO EXP_FULL_DATABASE;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_jvm_exp_perms for sys.dbms_jvm_exp_perms;

Synonym created.

SQL> /

Synonym created.

SQL> 
SQL> -- This will cuase an error after the first run but it is harmless
SQL> --
SQL> begin
  2  initjvmaux.exec('revoke execute on sys.dbms_jvm_exp_perms from PUBLIC');
  3  exception
  4  when others then
  5  if sqlcode not in (-01927, -06550, -06512) then raise; end if;
  6  end;
  7  /
revoke execute on sys.dbms_jvm_exp_perms from PUBLIC

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/javavm/install/jvm_exp.sql
SQL> Rem
SQL> Rem $Header: javavm/install/jvm_exp.sql /st_recommended_10.2.0.4.0/2 2010/03/03 15:27:07 etucker Exp $
SQL> Rem
SQL> Rem dbms_jvm_exp_perms.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbms_jvm_exp_perms.sql - supports export of java permissions
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This package is registered in sys.exppkgobj$.  This will enable
SQL> Rem      exporting of all permmissions.  Any permissions different from those
SQL> Rem      in the target db will be added to java$policy$ if necessary.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      import_perms can not be run alone.  It depends on the strings emitted
SQL> Rem      by the export_perms() output to create the beginning table.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    etucker     03/03/10     - add protection for revoke
SQL> Rem    etucker     02/17/10     - XbranchMerge
SQL> Rem                               etucker_rfi_backport_9016295_10.2.0.4.4 from
SQL> Rem                               st_javavm_10.2
SQL> Rem    etucker     02/13/10     - add revoke
SQL> Rem    etucker     02/11/10     - fix role
SQL> Rem    etucker     02/11/10     - Backport etucker_bug-9016295 from main
SQL> Rem    etucker     08/30/07     - policy table fixes update
SQL> Rem    etucker     06/28/05    -  fix query
SQL> Rem    etucker     06/13/05   -  add version check for backward compat
SQL> Rem    etucker     06/08/05  -  remove set stuff
SQL> Rem    etucker     05/06/05  - etucker_bug-3993297
SQL> Rem    etucker     05/06/05 -  more support
SQL> Rem    etucker     05/02/05 - Created
SQL> Rem
SQL> 
SQL> create or replace package DBMS_JVM_EXP_PERMS AUTHID CURRENT_USER as
  2    TYPE temp_rec is record (
  3         kind        dba_java_policy.kind%TYPE,
  4         grantee     dba_java_policy.grantee%TYPE,
  5         type_schema dba_java_policy.type_schema%TYPE,
  6         type_name   dba_java_policy.type_name%TYPE,
  7         name        dba_java_policy.name%TYPE,
  8         action      dba_java_policy.action%TYPE,
  9         enabled     dba_java_policy.enabled%TYPE
 10         );
 11  
 12    TYPE temp_java_policy is table of temp_rec;
 13  
 14    function create_exp(objid IN number,
 15                        version in varchar2,
 16                        new_block OUT PLS_INTEGER) return varchar2;
 17  
 18    function grant_exp (objid IN NUMBER,
 19                        isdba IN PLS_INTEGER,
 20                        grantor OUT VARCHAR2,
 21                        version IN VARCHAR2,
 22                        new_block OUT PLS_INTEGER) RETURN varchar2;
 23  
 24    function audit_exp (objid IN NUMBER,
 25                        version IN VARCHAR2,
 26                        new_block OUT PLS_INTEGER) RETURN varchar2;
 27  
 28    function drop_exp (objid IN NUMBER,
 29                       version IN VARCHAR2,
 30                       new_block OUT PLS_INTEGER) RETURN varchar2;
 31  
 32    function audit_sysprivs_exp (version IN VARCHAR2,
 33                                 new_block OUT PLS_INTEGER ) RETURN varchar2;
 34    function grant_sysprivs_exp(version IN varchar2,
 35                                new_block OUT PLS_INTEGER
 36                               ) return varchar2;
 37    procedure import_jvm_perms(pcol temp_java_policy);
 38    function  export_perms(state IN OUT PLS_INTEGER, new_block OUT PLS_INTEGER)
 39                          return varchar2;
 40  end DBMS_JVM_EXP_PERMS;
 41  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace package body DBMS_JVM_EXP_PERMS as
  2    EXP_END    CONSTANT PLS_INTEGER := 999999;
  3    EXP_START  CONSTANT PLS_INTEGER := 0;
  4    cursor policy_q is select kind, grantee, type_schema,type_name,
  5                              name,action, enabled from dba_java_policy where
  6                              enabled='ENABLED';
  7    zone PLS_INTEGER := EXP_START;
  8  
  9  
 10    function grant_sysprivs_exp(version IN varchar2,
 11                                new_block OUT PLS_INTEGER
 12                               ) return varchar2 as
 13  
 14    comm_str    varchar2(4000);
 15    Begin
 16      -- Check version is >= 10.2
 17      if version < '10.02.00.00.00' then
 18        return '';
 19      end if;
 20  
 21      sys.dbms_zhelp_ir.check_sys_priv(DBMS_ZHELP_IR.KZSSTA);
 22  
 23      <<exp_done>>
 24      if zone = EXP_END then
 25        zone := EXP_START;
 26        if policy_q%ISOPEN = TRUE then
 27          close policy_q;
 28        end if;
 29        return '';
 30      end if;
 31  
 32      comm_str := export_perms(zone, new_block);
 33  
 34      if comm_str is null then
 35        zone := EXP_END;
 36        goto exp_done;
 37      else
 38        zone := zone + 1;
 39        return comm_str;
 40      end if;
 41    exception
 42      when others then
 43        zone := EXP_START;
 44        raise;
 45    end grant_sysprivs_exp;
 46  
 47    function create_exp(objid IN number,
 48                        version in varchar2,
 49                        new_block OUT PLS_INTEGER) return varchar2 as
 50    Begin
 51      return '';
 52    end create_exp;
 53  
 54    function grant_exp (objid IN NUMBER,
 55                        isdba IN PLS_INTEGER,
 56                        grantor OUT VARCHAR2,
 57                        version IN VARCHAR2,
 58                        new_block OUT PLS_INTEGER) RETURN varchar2 as
 59    Begin
 60      return '';
 61    end grant_exp;
 62  
 63    function audit_exp (objid IN NUMBER,
 64                        version IN VARCHAR2,
 65                        new_block OUT PLS_INTEGER) RETURN varchar2 as
 66    Begin
 67      return '';
 68    end audit_exp;
 69  
 70    function audit_sysprivs_exp (version IN VARCHAR2,
 71                                 new_block OUT PLS_INTEGER ) RETURN varchar2 as
 72    Begin
 73      return '';
 74    end audit_sysprivs_exp;
 75  
 76    function drop_exp (objid IN NUMBER,
 77                       version IN VARCHAR2,
 78                       new_block OUT PLS_INTEGER) RETURN varchar2 as
 79    Begin
 80      return '';
 81    end drop_exp;
 82  
 83   -- uses the temp_java_perms table built by the first part of import
 84   -- and adds permissions and policy permissions as necessary.
 85    procedure import_jvm_perms(pcol temp_java_policy) as
 86  
 87    row_count number;
 88  
 89    key       number;
 90  
 91    POLICYPERM CONSTANT varchar2(50) :=
 92          'oracle.aurora.rdbms.security.PolicyTablePermission';
 93  
 94    class  varchar2(500);
 95  
 96    action varchar2(200);
 97  
 98    pol_seq number := 0 ;
 99    run_seq number := 0 ;
100  
101    Begin
102  
103      -- Check privs
104      sys.dbms_zhelp_ir.check_sys_priv(DBMS_ZHELP_IR.KZSSTA);
105  
106      -- we need to disable the RESTRICTion on RuntimePermission#LoadLibrary
107      select seq into pol_seq from dba_java_policy
108             where kind = 'RESTRICT' and type_schema='SYS'
109             and type_name = POLICYPERM and
110             name = '0:java.lang.RuntimePermission#loadLibrary.*' and
111             enabled='ENABLED';
112  
113      if(pol_seq != 0) then
114          dbms_java.disable_permission(pol_seq);
115      end if;
116  
117      select seq into run_seq from dba_java_policy
118             where kind = 'RESTRICT' and type_schema='SYS'
119             and type_name = 'java.lang.RuntimePermission' and
120             name = 'loadLibrary.*' and enabled='ENABLED';
121  
122      if(run_seq != 0) then
123          dbms_java.disable_permission(run_seq);
124      end if;
125  
126  
127      -- This is the main loop that goes through each record
128      -- and check the target dba_java_policy table to see if there is
129      -- a like permission there already.  If not then the permission
130      -- is created.
131  
132      for i in pcol.FIRST .. pcol.LAST
133      loop
134          -- Check if permission is already in dba_java_policy
135          select count(*) into row_count from dba_java_policy d where
136          pcol(i).kind = d.kind and
137          pcol(i).grantee = d.grantee and
138          pcol(i).type_schema = d.type_schema and
139          pcol(i).type_name = d.type_name and
140          (pcol(i).name = d.name or (pcol(i).name is null and d.name is null)
141           or ((d.name ='*' or d.name is null) and pcol(i).name != null)) and
142          (pcol(i).action = d.action or (pcol(i).action is null and
143          d.action is null) or ((d.action = '*' or d.action is null) and
144          pcol(i).action != null));
145          -- If this is non-zero then we must grant or restrict
146          if row_count = 0 then
147            -- GRANT
148            if pcol(i).kind = 'GRANT' then
149            -- Policy Permissions are handled differently
150              if pcol(i).type_name = POLICYPERM then
151                if(instr(pcol(i).name,'0',1,1) = 0) then
152                  class := pcol(i).name;
153                  action := '';
154                else
155                  class := substr(pcol(i).name,3,instr(pcol(i).name,'#',1,1)-3);
156                  action := substr(pcol(i).name,instr(pcol(i).name,'#',1,1)+1);
157                end if;
158                dbms_java.grant_policy_permission(pcol(i).grantee,
159                  pcol(i).type_schema, class, action, key);
160              else -- regular grants
161                dbms_java.grant_permission(pcol(i).grantee,
162                  pcol(i).type_schema||':'||pcol(i).type_name,
163                  pcol(i).name, pcol(i).action,key);
164              end if;
165            else -- RESTRICT
166              if pcol(i).type_name = POLICYPERM then
167                dbms_java.restrict_permission(pcol(i).grantee,
168                  pcol(i).type_schema||':'||POLICYPERM, pcol(i).name,'',key);
169              else
170                 dbms_java.restrict_permission(pcol(i).grantee,
171                  pcol(i).type_schema||':'||pcol(i).type_name,
172                  pcol(i).name, pcol(i).action,key);
173              end if;
174            end if;
175            if pcol(i).enabled = 'DISABLE' then
176              dbms_java.disable_permission(key);
177            end if;
178          else
179            goto end_loop;
180          end if;
181      <<end_loop>>
182      null;
183      end loop;
184  
185      -- reenable the RESTRICTions run_seq must be first!
186      if( run_seq != 0) then
187         dbms_java.enable_permission(run_seq);
188      end if;
189      if( pol_seq != 0) then
190         dbms_java.enable_permission(pol_seq);
191      end if;
192    exception
193      WHEN OTHERS THEN
194       raise;
195    end import_jvm_perms;
196  
197    function export_perms(state IN OUT PLS_INTEGER, new_block OUT PLS_INTEGER)
198          return varchar2 as
199  
200    kind        varchar2(8);
201    grantee     varchar2(30);
202    type_schema varchar2(30);
203    type_name   varchar2(4000);
204    name        varchar2(4000);
205    action      varchar2(4000);
206    enabled     varchar2(8);
207  
208    Begin
209  -- open the dba_java_policy cursor and return temp tale creation
210      IF policy_q%ISOPEN = FALSE and state = 0 THEN
211        open policy_q;
212        new_block := 0;
213        return 'execute immediate (''CREATE TABLE TEMP_JAVA_PRIVS' ||
214               ' AS SELECT KIND, GRANTEE, TYPE_SCHEMA, TYPE_NAME,' ||
215               ' NAME, ACTION, ENABLED FROM DBA_JAVA_POLICY WHERE ROWNUM > 1'');';
216      end if;
217  --  Process the insert commands for import.
218      if policy_q%ISOPEN = TRUE then
219        Fetch policy_q into kind, grantee, type_schema,
220                            type_name, name, action, enabled;
221        if policy_q%NOTFOUND OR policy_q%NOTFOUND IS NULL THEN
222          close policy_q;
223          state := EXP_END -1;
224      else
225    -- process each row and right the inserts
226         if state = 1 then
227           new_block := 1;
228         else
229           new_block := 0;
230         end if;
231         return 'INSERT INTO TEMP_JAVA_PRIVS VALUES(''' || kind || ''',''' ||
232                 grantee || ''',''' || type_schema || ''',''' || type_name ||
233                 ''',''' || name || ''',''' || action || ''',''' ||
234                 enabled || ''');';
235        end if;
236      end if;
237      if state = EXP_END-1 then
238        new_block :=1;
239        return
240  'DECLARE
241     TJP SYS.DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;
242     CURSOR C1 IS SELECT KIND,GRANTEE,TYPE_SCHEMA,TYPE_NAME,
243                         NAME,ACTION,ENABLED FROM TEMP_JAVA_PRIVS;
244  BEGIN
245     OPEN C1;
246     FETCH C1 BULK COLLECT INTO TJP;
247     CLOSE C1;
248     SYS.DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(TJP);
249     EXECUTE IMMEDIATE(''DROP TABLE TEMP_JAVA_PRIVS'');
250  END;';
251      end if;
252  -- export is done
253      return '';
254    end export_perms;
255  
256  end DBMS_JVM_EXP_PERMS;
257  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> DELETE FROM exppkgobj$ where package = 'DBMS_JVM_EXP_PERMS';

1 row deleted.

SQL> insert into sys.exppkgobj$ values('DBMS_JVM_EXP_PERMS', 'SYS', 1, 29, 1, 4000);

1 row created.

SQL> commit;

Commit complete.

SQL> 
SQL> 
SQL> 
SQL> GRANT EXECUTE ON sys.dbms_jvm_exp_perms TO IMP_FULL_DATABASE;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_jvm_exp_perms TO EXP_FULL_DATABASE;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_jvm_exp_perms for sys.dbms_jvm_exp_perms;

Synonym created.

SQL> /

Synonym created.

SQL> 
SQL> -- This will cuase an error after the first run but it is harmless
SQL> --
SQL> begin
  2  initjvmaux.exec('revoke execute on sys.dbms_jvm_exp_perms from PUBLIC');
  3  exception
  4  when others then
  5  if sqlcode not in (-01927, -06550, -06512) then raise; end if;
  6  end;
  7  /
revoke execute on sys.dbms_jvm_exp_perms from PUBLIC

PL/SQL procedure successfully completed.

SQL> 
SQL> PROMPT Skipping OLAP Analytic Workspace because it is not installed or versions mismatch...
Skipping OLAP Analytic Workspace because it is not installed or versions mismatch...
SQL> PROMPT Skipping OLAP Catalog because it is not installed or versions mismatch...
Skipping OLAP Catalog because it is not installed or versions mismatch...
SQL> PROMPT Processing Oracle Database Packages and Types...
Processing Oracle Database Packages and Types...
SQL> ALTER SESSION SET current_schema = sys;

Session altered.

SQL> @?/rdbms/admin/catexp.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catexp.sql /st_recommended_10.2.0.4.0/1 2010/01/21 20:33:39 mjangir Exp $ expvew.sql
SQL> Rem
SQL> Rem Copyright (c) 1987, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem NAME
SQL> Rem    CATEXP81.SQL - CATalog EXPort/import sql script
SQL> Rem  FUNCTION
SQL> Rem    Creates internal views for Export/Import utility
SQL> Rem  NOTES
SQL> Rem    Must be run when connected to SYS or INTERNAL.
SQL> Rem
SQL> Rem    This file is organized into 3 sections:
SQL> Rem     Section 1: Views needed by BOTH export and import
SQL> Rem     Section 2: Views required by import ONLY
SQL> Rem     Section 3: Views required by export ONLY
SQL> Rem
SQL> Rem     Import does not currently require any views of its own. The views
SQL> Rem     used by both tools are moved to the top so that a user doing an import
SQL> Rem     only has to run part of this file. Since there are common views
SQL> Rem     a separate file called catimp.sql was not created for now for
SQL> Rem     maintenance reasons.
SQL> Rem
SQL> Rem     No views depend on catalog.sql. This script can be run standalone.
SQL> Rem
SQL> Rem
SQL> Rem  MODIFIED
SQL> Rem     mjangir    01/18/10 - Backport mjangir_bug-8982033 from main
SQL> Rem     mjangir    06/07/07 - bug 5872788 operator dependency ordering
SQL> Rem     dkapoor    05/23/07 - XbranchMerge dkapoor_bug-5882894 from
SQL> Rem                           st_rdbms_10.1
SQL> Rem     dkapoor    02/15/07 - do not export ORACLE_OCM
SQL> Rem     sdavidso   12/04/06 - Backport sdavidso_bug-4087161 from main
SQL> Rem     mjangir    11/27/06 - Backport mjangir_bug-5176017 from main
SQL> Rem     kamble     04/24/06 - Backport kamble_bug-4711857 from main
SQL> Rem     jgalanes   04/13/06 - Backport jgalanes_bug-4656020 from main
SQL> Rem     geadon     03/27/06 - Backport geadon_bug-4375555 from main
SQL> Rem     dgagne     01/26/06 - add replace for apos in exu10asc view for
SQL> Rem                           columns with apos in them
SQL> Rem     dgagne     03/16/06 - Backport dgagne_bug-4758949 from main
SQL> Rem     jgalanes   07/13/05 - 4375555 IOT w/mapping table in TRANSPORTABLE
SQL> Rem                           mode
SQL> Rem     cdilling   05/11/05 - Fix 4347949 - ignore java classes owned by SYS
SQL> Rem     jgalanes   05/09/05 - Fix 4046842 - exclude types not related to
SQL> Rem                           subject table
SQL> Rem     cdilling   05/02/05 - ignore WMSYS
SQL> Rem     kneel      11/11/04 - fix lrg 1795214: unique constraint error on
SQL> Rem                           import
SQL> Rem     jgalanes   10/27/04 - Fix 3906846 - add exu102xtyp view
SQL> Rem     araghava   10/25/04 - 3448802: don't partobj$ to get blocksize in
SQL> Rem                           *_LOBS
SQL> Rem     jgalanes   10/15/04 - 3651756 switch from SELECT_CATALOG_ROLE
SQL> Rem                           to ExP_FULL_DATABASE on exu?lnk
SQL> Rem     jgalanes   09/28/04 - PLSQL_CCFLAGS
SQL> Rem     rburns     09/13/04 - check for SYS user
SQL> Rem     jgalanes   08/31/04 - Column encryption
SQL> Rem     jgalanes   07/21/04 - Fix 3047454 TTS with unused ADT columns
SQL> Rem     cdilling   07/01/04 - Do not export EXFSYS schema or HELP table
SQL> Rem     jgalanes   06/10/04 - 3617574 add HAKAN factor to exu81tts
SQL> Rem     rvissapr   06/09/04 - proj 5523 dblink pswd encode
SQL> Rem     jgalanes   04/23/04 - Fix 3447083 - IOT degree lost
SQL> Rem     mxiao      03/25/03 - add EXU10SNAP*
SQL> Rem     jgalanes   03/05/04 - Adding new views for 3467567 imp_tab_trig &
SQL> Rem                           imp_lob_notnull
SQL> Rem     jgalanes   02/25/04 - Fix 2654811 exu81tabs trigflag with row movement
SQL> Rem     bmccarth   02/03/04 - check tables making use of template part.
SQL> Rem     jgalanes   12/18/03 - Fix 2734632 - PRESERVE SPECIFICATION TIMESTAMP
SQL> Rem     jgalanes   12/18/03 - Fix 3107208 - replacing missing view
SQL> Rem     jgalanes   01/26/04 - Fix 2539145 EXEMPT ACCESS POLICY - EXPExEMPT
SQL> Rem     hikimura   11/11/03 - 3159568: add type to exu8ref
SQL> Rem     jgalanes   11/10/03 - lrg1566954 dataobj# ordering
SQL> Rem     jgalanes   11/06/03 - new views for 3230116 - compression
SQL> Rem     kamble     09/08/03 - 3071475: return attr name if lob is user defined
SQL> Rem     hikimura   08/01/03 - 2977202: add view imp9con
SQL> Rem     jgalanes   08/20/03 - Fix lrg1336525 - table stats for IOTs
SQL> Rem     clei       07/15/03 - synonym polices no longer attached to base object
SQL> Rem     kamble     06/25/03 - 2803911: add view exu8col_tts_unused_col
SQL> Rem     mramache   06/23/03 - sql profiles
SQL> Rem     bmccarth   06/27/03 - 10i version of exu9coe that includes column
SQL> Rem                           with default values for object tables
SQL> Rem     jgalanes   05/21/03 - PLSQL_COMPILER_FLAGS changes
SQL> Rem     cdilling   05/19/03 - Do not export DBSNMP user
SQL> Rem     aramarao   04/24/03 - 2900891 fix ora-904 on spolicy exporting from 817
SQL> Rem     jgalanes   05/20/03 - create exu10doso for 2946068
SQL> Rem     krajaman   05/20/03 - Remove d_owner# from dependency$
SQL> Rem     jgalanes   05/02/03 - 2859106 more supplemental log stuff
SQL> Rem     jgalanes   04/01/03 - Fix 2869900 by fixing DECODE in imp_lob_info view
SQL> Rem     bmccarth   03/18/03 - ignore DMSYS
SQL> Rem     bmccarth   03/20/03 - exclude recycle bin object from transportable
SQL> Rem                           and domain index secondary object views
SQL> Rem     kamble     02/27/03 - imp9tvoid - get latest tvoid
SQL> Rem     bmccarth   01/22/03 - binary float/double values incorrect
SQL> Rem     wfisher    01/27/03 - Granting RESUMABLE priv to *_FULL_DATABASE roles
SQL> Rem     jgalanes   01/29/03 - PL/SQL compiler optimize switch changes
SQL> Rem     mxiao      01/13/03 - retrieve COMMENT in exu9snap
SQL> Rem     bmccarth   01/13/03 - return opqtype$ out-of-line flag
SQL> Rem     atsukerm   12/27/02 - grant profile creation to imp_full_database
SQL> Rem     jgalanes   01/03/03 - Fix lrg by adding lob.property to lob_chunksize view
SQL> Rem     bmccarth   01/08/03 - exclude 21/22 types from tabxxx views
SQL> Rem     cdilling   01/06/03 - Do not export DIP
SQL> Rem     jdavison   12/13/02 - Do not export SI_INFORMTN_SCHEMA
SQL> Rem     bmccarth   10/29/02 - exclude recycle bin objects
SQL> Rem     tkeefe     09/24/02 - Move proxy_data$ and proxy_role_data$ out of
SQL> Rem                           bootstrap region
SQL> Rem     vkarra     08/08/02 - tablespace groups
SQL> Rem     sasriniv   09/05/02 - Fix 2544428
SQL> Rem     nireland   09/04/02 - Add select any seq to exp_full_database
SQL> Rem     bmccarth   08/20/02 - don't exclude secondary object from exu9ltts
SQL> Rem     mxiao      08/07/02 - add new view for 10i mv logs
SQL> Rem     twtong     08/22/02 - add alias_txt to exu9snap
SQL> Rem     jgalanes   08/08/02 - Fix 2383871 by exporting typeid
SQL> Rem     sasriniv   08/01/02 - Fix lrg caused by 2261722
SQL> Rem     jgalanes   07/18/02 - Add new view for 2247291 LOB triggers to
SQL> Rem                           get chunk size
SQL> Rem     sasriniv   07/03/02 - Fix 2261722
SQL> Rem     araghava   05/15/02 - partition #s no longer go from 1->n. don't use
SQL> Rem                           predicate part# = 1.
SQL> Rem     jgalanes   05/07/02 - Fix bug 2349201.
SQL> Rem     bmccarth   04/29/02 - v$compatibility going away
SQL> Rem     bmccarth   03/29/02 - remove uid check from exu9xmlst
SQL> Rem     jgalanes   04/03/02 - Fix bug 2300104 - support UNDER clause of
SQL> Rem                           CREATE VIEW.
SQL> Rem     jgalanes   02/15/02 - Fix 2226749 by improving type ordering.
SQL> Rem     emagrath   02/08/02 - Exclude hidden columns for NOT NULL constr.
SQL> Rem     jgalanes   01/30/02 - bug 2182686 - use source$ for triggers export.
SQL> Rem     bmccarth   01/28/02 - exclude xdb schema, add views to grab xdb info
SQL> Rem     emagrath   01/07/02 - Elim. endian REF problem
SQL> Rem     jgalanes   12/19/01 - Fix bug 2127010 by ordering types..
SQL> Rem     jgalanes   12/10/01 - make imp9tvoid fetch object STATUS.
SQL> Rem     bmccarth   12/21/01 - ordered collections
SQL> Rem     nireland   11/14/01 - Fix column comment problem. #2106151
SQL> Rem     nireland   11/06/01  - Add defsubpcnt to EXU9PDS. #2089034
SQL> Rem     celsbern   11/01/01 - adding grant on exu9actionobj.
SQL> Rem     bmccarth   10/23/01 - merge error in exu81actionobj
SQL> Rem     celsbern   10/19/01  - merge LOG to MAIN
SQL> Rem     clei       10/11/01  -
> Rem     prakumar   10/10/01  - 2035111:Add a hint to exu9lbp & exu81lbsp to
SQL> Rem                            improve performance
SQL> Rem     bmccarth   10/17/01  - log branch merge
SQL> Rem     dgagne     10/12/01  - add support for table/tablespace compress option
SQL> Rem     jgalanes   10/05/01  - implement support for type synonyms.
SQL> Rem     prakumar   09/18/01  - add support for grant on java (re)source objects
SQL> Rem     clei       08/30/01  - change exu9rls to support VPD policies on
SQL> Rem                            synonym
SQL> Rem     dgagne     09/12/01  - add support for subpartition templates
SQL> Rem     dgagne     08/29/01  - add support for range/list composite partitions
SQL> Rem     bmccarth   08/27/01  - typeo in 8lnk view
SQL> Rem     bmccarth   08/21/01  - return flags from link table
SQL> Rem     emagrath   08/14/01  - Elim. probs with REF and other constraints
SQL> Rem     bmccarth   08/02/01  - New view to containing tables with unused
SQL> Rem                            columns
SQL> Rem     bmccarth   07/24/01  - log based replication
SQL> Rem     pabingha   07/17/01  - add exu9mvlu view
SQL> Rem     nireland   07/05/01  - Amend exu9ind to exclude ALL OID PK indices
SQL> Rem     druthven   06/29/01  - 1826338 - improve performance of exu81lbspu
SQL> Rem     dmwong     05/30/01  - bug1796876 - quotes in FGA predicates.
SQL> Rem     dmwong     05/27/01  - bug1802004 - remove trailing spaces in exu9rls.
SQL> Rem     pabingha   05/09/01  - add oldest times to CDC MV Log views
SQL> Rem     htseng     04/12/01  - eliminate execute twice (remove ;).
SQL> Rem     clei       04/16/01  - add static policy
SQL> Rem     wfisher    04/18/01  - Relax restrictions on when 'is type of' is
SQL> Rem                            generated.
SQL> Rem     prakumar   04/03/01 -  Support col NOT NULL constraint for object table
SQL> Rem     gclaborn   04/02/01  - Inc. perf. of partitioned lob views: #1712758
SQL> Rem     dgagne     04/04/01  - Add import view to get compatibility mode
SQL> Rem     nireland   03/14/01  - Fix pre-8.1 trigger export. #1675586
SQL> Rem     tkeefe     03/14/01  - Simplify normalization of n-tier schema.
SQL> Rem     htseng     03/13/01  - remove an extra line from create/select imp9usr
SQL> Rem     somichi    03/05/01  - 1206380: Grant 'analyze any' privilege to
SQL> Rem                                     imp_full_database role
SQL> Rem     wesmith    03/01/01  - exu8coo: include snapshot hidden column
SQL> Rem     htseng     03/01/01  - add new query imp9usr for checking import user.
SQL> Rem     abrumm     02/20/01  - external_tab$: store access params as lob
SQL> Rem     dgagne     02/26/01  - fix exu9ind for stats on sys gen constraints
SQL> Rem     emagrath   02/16/01  - Support Opaque Type LOB storage
SQL> Rem     bmccarth   02/15/01  - imp9tvoid needs to use kzsrorol
SQL> Rem     bmccarth   02/07/01  - exu8col need coltype
SQL> Rem     bmccarth   01/08/01  - type evolution
SQL> Rem     emagrath   01/29/01  - Support XMLType CLOB storage
SQL> Rem     dmwong     01/28/01  - remove EXEMPT ACCESS POLICY for 8.0
SQL> Rem                            compatibility
SQL> Rem     prakumar   01/15/01  - Fix for bug 1218370
SQL> Rem     wfisher    01/08/01  - Type inheritance.
SQL> Rem     wesmith    12/28/00  - code review comments
SQL> Rem     dgagne     12/27/00  - change views with connect by for perf. gain
SQL> Rem     wesmith    12/13/00  - 9.0 export/import support for MVs
SQL> Rem     gmurphy    12/11/00  - Dont export LBACSYS in full export
SQL> Rem     jingliu    12/07/00  - add column synnam2 in exu8syn
SQL> Rem     abgupta    12/07/00  - disallow export of functional indices created
SQL> Rem                            as part of create MV.
SQL> Rem     dgagne     12/08/00  - add support for null associations
SQL> Rem     arithikr   12/13/00  - 1489592: expect ORA-1921 for
SQL> Rem                            imp_,exp_full_database
SQL> Rem     dgagne     12/04/00  - update for 9i
SQL> Rem     htseng     12/08/00  - Decode AL16UTF16 to UTF8 in exu8cset to fix
SQL> Rem                            9idb to 8i.
SQL> Rem     emagrath   11/28/00  - Exclude OIDINDEXs from index view
SQL> Rem     cku        11/17/00  - PBMJI
SQL> Rem     htseng     11/13/00  - add constraint using index support
SQL> Rem     dgagne     11/16/00  - remove tab_ovf references
SQL> Rem     rburns     11/09/00  - remove & for sqlplus
SQL> Rem     slawande   11/09/00  - Add export support for seq# in mvlog.
SQL> Rem     emagrath   10/31/00  - Support IOT MAPPING TABLE
SQL> Rem     prakumar   10/30/00  - #1421243:Ref column not null constraint was lost
SQL> Rem     emagrath   10/20/00  - Provide statistics info for PIOTs
SQL> Rem     dgagne     10/18/00  - put exu8dimu back in for 8.1.5 exp
SQL> Rem     nshodhan   10/17/00  - filter out oid only snapshot logs for 81views
SQL> Rem     jingliu    10/13/00  - code review comment
SQL> Rem     wfisher    10/11/00  - NLS_CHAR_LENGTH -> NLS_LENGTH_SEMANTICS
SQL> Rem     jingliu    09/29/00  - modify jobq related export view
SQL> Rem     bmccarth   09/28/00  - add view for domain index partitions
SQL> Rem     jgalanes   09/25/00  - Adding table qualifiers to new MV log views.
SQL> Rem     jgalanes   07/06/00  - Adding view for CDC style MV logs
SQL> Rem     dgagne     09/29/00  - update exu8ref for ref const on views
SQL> Rem     dgagne     09/26/00  - add support for tab_ovf$ to all table views
SQL> Rem     prakumar   09/18/00  - Fix view exu81javt to support shortened java obj
SQL> Rem     prakumar   09/10/00  - Bug 1347528:fix ts_type in exu8sto view.
SQL> Rem     nshodhan   09/06/00  - Add exu9snapl
SQL> Rem     wfisher    09/05/00  - Bitmap join indexes
SQL> Rem     htseng     08/31/00  - add row level scn support
SQL> Rem     htseng     08/24/00  - correct rollback seg bit
SQL> Rem     emagrath   07/28/00  - Multi-blocksize support
SQL> Rem     dgagne     10/11/00  - add view for obtaining compiler switches
SQL> Rem     nireland   07/25/00  - Fix exu81fil. #1244182
SQL> Rem     htseng     07/17/00  - undo tablespace support
SQL> Rem     bmccarth   07/12/00  - Domain index v2 changes
SQL> Rem     dgagne     07/11/00  - Update constraint views to not include tables in
SQL> Rem     dmwong     07/10/00  - add support for partitiond fine grained access.
SQL> Rem     dgagne     06/26/00  - Add support for 9.0 N-tier authentication
SQL> Rem     dgagne     07/18/00  - modify exu81tabs for external tables
SQL> Rem     bmccarth   06/22/00  - Change exu9nta for breakup of proxy$ table
SQL> Rem     nireland   06/07/00  - Add isonline to exu81sto
SQL> Rem     wfisher    06/16/00  - Unicode support
SQL> Rem     rmurthy    06/20/00  - change objauth.option column to hold flag bits
SQL> Rem     nireland   05/31/00  - Don't export constraints for ORDSYS etc.#1308267
SQL> Rem     wfisher    05/24/00  - Use partitioning info for logical tablespace exp
SQL> Rem     bmccarth   05/16/00  - bug 1296644 - performance of stored procedure ex
SQL> Rem     arithikr   05/10/00  - Bad merge, restore the file
SQL> Rem     jdavison   04/25/00  - Adjust creation of exu816ctx view.
SQL> Rem     htseng     04/11/00  - need quots for column name in lob clause
SQL> Rem     dmwong     08/31/98  - add exu81approle to support application role
SQL> Rem     tlee       10/13/98  - support adt attribute column on partition keys
SQL> Rem     nireland   03/21/00  - Fix outer join problem with exu8syn
SQL> Rem     dgagne     04/06/00  - add support for n-tier 8.1 project
SQL> Rem     rvissapr   03/06/00  - add support to create context accessed globally
SQL> Rem     dgagne     03/21/00  - update views used to examine indexes with const
SQL> Rem     dgagne     02/29/00  - Change exu81nos to export stats with named contr
SQL> Rem     emagrath   02/25/00  - Get attributes for LOBs in PIOTs
SQL> Rem     bmccarth   01/14/00  - icache: check for icache_imp_plsql
SQL> Rem     nireland   01/20/00  - tempflags now obsolete
SQL> Rem     wfisher    02/08/00  -  Create mode for logically exporting tablespaces
SQL> Rem     nireland   12/22/99  - Fetch index partition base object #
SQL> Rem     bmccarth   11/11/99  - incorrect merge- remove outer joints from
SQL> Rem                            exu816tgr
SQL> Rem     bmccarth   11/01/99  - performance work on exu816tgr
SQL> Rem     wfisher    10/21/99  - Don't look at invalid types on scalar nested tab
SQL> Rem     bmccarth   10/13/99  - bug 991834 - exu8orfs - remove cdef$ use
SQL> Rem     htseng     09/09/99  - fix primary key missing nologging attribute
SQL> Rem     cchui      08/18/99  - modify exu8coo to check for RLS hidden col
SQL> Rem     wfisher    08/17/99  - Fixing up grant for exu816sqv
SQL> Rem     wfisher    08/04/99  - Support sql versioning for snapshots/ update ver
SQL> Rem     wfisher    08/09/99  - fixing exu81tts and exu81usci
SQL> Rem     nireland   07/28/99  - Need update any table for LOBs. #861310
SQL> Rem     thoang     07/22/99  - Not using spare1 and spare2 from col$.
SQL> Rem     emagrath   07/08/99  - Support enhanced trigger events
SQL> Rem     dmwong     07/06/99  - add view to test for trusted oracle
SQL> Rem     mjungerm   06/15/99  - add java shared data object type
SQL> Rem     wfisher    06/24/99  - SQL Version support
SQL> Rem     cyyip      05/26/99  - remove special character '&'
SQL> Rem     wfisher    05/28/99  - Speeding up EXUTTS query
SQL> Rem     nvishnub   05/04/99  - Fix bug # 882543 (filter_non_existent_types)
SQL> Rem     nireland   04/21/99  - Remove bogus DROP ROLE. #874826
SQL> Rem     lbarton    04/26/99  - make export sensitive to COLLSTO COMPATIBILITY
SQL> Rem     nvishnub   04/19/99  - Fix views to improve performance.
SQL> Rem     nireland   04/09/99  - Cope with large tables. #867018
SQL> Rem     nvishnub   03/24/99  - E/I support for fast rebuild of domain indexes.
SQL> Rem     wfisher    03/26/99  - Make synonym ordering y2k ready
SQL> Rem     wfisher    03/18/99  - Redo view dependency ordering
SQL> Rem     wfisher    03/08/99  - TS for IOTS comes from index
SQL> Rem     wfisher    02/24/99  - more column statistics
SQL> Rem     lbarton    03/12/99  - change exu81javt
SQL> Rem     wfisher    02/15/99  - Don't export precomputed statistics when associa
SQL> Rem     nvishnub   01/07/99  - Handle indexes due to constraints correctly.
SQL> Rem     lbarton    02/22/99  - filter cartridge-owned objects
SQL> Rem     nvishnub   02/25/99  - Optimize view exu8dim(u).
SQL> Rem     wfisher    01/06/99  - bug 745470: vlen needed for testing overflow
SQL> Rem     wfisher    12/21/98  - Support associations
SQL> Rem     tlee       12/10/98  - change privilege rewrite to query rewrite
SQL> Rem     vkarra     11/19/98  - fix 81ind_base
SQL> Rem     masubram   11/17/98  - code review comments
SQL> Rem     masubram   10/13/98  - add two columns to exu81srt
SQL> Rem     mimoy      11/13/98  - Support NEVER REFRESH for snapshot in exu81snap
SQL> Rem     wesmith    11/13/98  - RepAPI export code review fixes
SQL> Rem     jingliu    11/12/98  - Fix imp/exp snapshot log related difs
SQL> Rem     lbarton    11/09/98  - new priv: administer database trigger
SQL> Rem     wfisher    11/04/98  - Add new privs to impexp roles
SQL> Rem     wesmith    11/02/98  - Fix view exu81rgsu
SQL> Rem     jingliu    10/30/98  - Support snapshot log export for 8.1
SQL> Rem     tlee       10/27/98  - get compress option for piot in exu81usci
SQL> Rem     wesmith    10/20/98  - Modify view exu81snap to nvl() flavor_id
SQL> Rem     wesmith    10/15/98  - Add support for export of RepAPI snapshots
SQL> Rem     tlee       10/13/98  - support adt attribute column on partition keys
SQL> Rem     avaradar   10/07/98  - get property value in exu8col
SQL> Rem     nvishnub   10/20/98  - Enumerate partitioned constraints indices.
SQL> Rem     tlee       10/02/98  - get subpart storage for transportable tablespace
SQL> Rem     avaradar   09/28/98  - compare intcol# in exu8spok, exu8poki, exu8pok
SQL> Rem     wfisher    09/08/98  - Specify default histograms if no histograms exis
SQL> Rem     avaradar   09/07/98  - Hidden column support for snapshots
SQL> Rem     lbarton    09/09/98  - Filter types owned by cartridges
SQL> Rem     tlee       09/01/98  - transportable tablespace with nested table
SQL> Rem     nvishnub   08/26/98  - Filter special schema objects.
SQL> Rem     tlee       08/25/98  - transportable tablespace with iot
SQL> Rem     tlee       08/25/98  - update defbufpool of default level
SQL> Rem     whuang     08/19/98  - fake index
SQL> Rem     nvishnub   08/05/98  - E/I of primary key refs.
SQL> Rem     nvishnub   07/29/98  - Filter datetime interval types.
SQL> Rem     nireland   07/28/98  - Correctly identify constraint indices. #686272
SQL> Rem     lbarton    08/04/98  - use new dbms_java names
SQL> Rem     tlee       07/22/98  - remove ts_type from exupds, update exu8lob
SQL> Rem     lbarton    07/13/98  - lrid downgrade support
SQL> Rem     nvishnub   07/13/98  - Add tablespace_type to storage info.
SQL> Rem     lbarton    06/19/98  - Java longname support
SQL> Rem     tlee       06/14/98  - lob and varray as lob partitioned obj support
SQL> Rem     tlee       06/10/98  - tspitr support of new partitioning
SQL> Rem     amsrivas   06/07/98  - Bug 536970
SQL> Rem     gclaborn   06/08/98  - Add system procedural object and action support
SQL> Rem     nvishnub   06/05/98  - Put back lob-index storage clause.
SQL> Rem     gclaborn   06/04/98  - Separate new export tables
SQL> Rem     asurpur    06/03/98  - Adding changes to exu8grs
SQL> Rem     asurpur    06/02/98  - Changing view exu8spv to not export some privile
SQL> Rem     gclaborn   06/02/98  - Update operator / indextype support
SQL> Rem     lbarton    05/26/98  - javasnm$ has changed
SQL> Rem     nvishnub   05/20/98  - Fix exu8ink to not to include 0 cols.
SQL> Rem     gclaborn   05/08/98  - Add views on exppkgs$ / expdep$: Subset exu8tab
SQL> Rem                            and exu8typ from 81 versions; no secondary obj.
SQL> Rem     tlee       05/07/98  - fix exu8pds and update tabcompart$ changes
SQL> Rem     dmwong     05/07/98  - require select_catalog_role for exu81rls
SQL> Rem     nvishnub   05/01/98  - Lob storage for varrays.
SQL> Rem     ayalaman   05/01/98  - Key compression : add preccnt to exu81ind
SQL> Rem     nvishnub   04/29/98  - Nested table enhancements.
SQL> Rem     hasun      04/28/98  - Exclude 8.1 snapshots from V8.0.X export
SQL> Rem     wfisher    04/27/98  - Adding support for flags
SQL> Rem     nvishnub   04/21/98  - Support for bitmapped tablespaces.
SQL> Rem     lbarton    04/16/98  - filter system events from pre8.1 triggers
SQL> Rem     wfisher    04/15/98  - Support Dimensions
SQL> Rem     dmwong     04/15/98  - add exu81rls for fine grain access control
SQL> Rem     smuthuli   04/13/98  - bug 487555.roll forward from 805
SQL> Rem     tlee       04/13/98  - rename comppart$->tabcompart$ add indcompart$
SQL> Rem     gclaborn   04/07/98  - Fetch implementation type details in exu81doi
SQL> Rem     dmwong     04/02/98  - add support for application context
SQL> Rem     ayalaman   03/27/98  - use 2 bytes of pctthres for guess quality
SQL> Rem     sparrokk   03/18/98  - 621964: EXECUTE ANY TYPE for exp/imp roles
SQL> Rem     nvishnub   03/13/98  - Fix view exu8iov to use bitand.
SQL> Rem     nvishnub   03/11/98  - E/I of partitioned IOTs.
SQL> Rem     wfisher    03/02/98  - Save raw analyze statistics at export
SQL> Rem     lbarton    02/23/98  - changes for java
SQL> Rem     vkarra     02/12/98  - single table cluster
SQL> Rem     tlee       02/09/98  - 81 partitioned object support
SQL> Rem     nireland   02/06/98  - SYS_NC_ROWINFO$ is 0x200 in sys.col$. #606078
SQL> Rem     nvishnub   12/17/97  - Support for datetime-interval datatypes.
SQL> Rem     cfreiwal   02/24/98  - key compression : add preccnt to exu8uscu
SQL> Rem     thoang     12/11/97  - Updated views to exclude unused columns
SQL> Rem     gclaborn   12/19/97  - Filter 2ndary objects, add oper/indextype sup.
SQL> Rem     wfisher    12/02/97  - Merge from wfisher_catexp804 in 8.0.4
SQL> Rem     gclaborn   12/02/97  - Add Functional / Domain Index support
SQL> Rem     wesmith    11/21/97  - Correct grant of snapshot view
SQL> Rem     wesmith    11/20/97  - add 8.1 views to support aggregate snapshots
SQL> Rem     mdepledg   10/08/97  - add spare1 to exu8tab
SQL> Rem     wfisher    09/19/97  - Bug 547977 -- support parallel for indexes
SQL> Rem     bmoy       09/16/97  - fix imp8repcat view.
SQL> Rem     wfisher    09/16/97  - Allow export of privs and role grants to public
SQL> Rem     wfisher    08/27/97  - fix exu8opt definition
SQL> Rem     wfisher    08/26/97  - Add exu8opt
SQL> Rem     bmoy       07/03/97  - Fix imp8repcat, add check for user#.
SQL> Rem     jpearson   06/20/97  - bug 498610 - view text and trigger action sizes
SQL> Rem     jstenois   06/12/97  - distributed security domains in export
SQL> Rem     wfisher    06/12/97  - Support trusted links
SQL> Rem     jstenois   06/06/97  - recover from V$OPTIONS changes
SQL> Rem     rsarwal    05/29/97  - Remove Echo
SQL> Rem     gdoherty   05/10/97  - remove blank lines that break sqlplus
SQL> Rem     bmoy       05/05/97  - Fix bug 454318.
SQL> Rem     jstenois   04/17/97  - support trigger with different owner than table
SQL> Rem     bmoy       03/27/97  - Replication support for Imp, added imp8repcat
SQL> Rem     jpearson   04/01/97  - fix index on nested_table_id col of inner table
SQL> Rem     jpearson   03/11/97  - partitioned cache support
SQL> Rem     wfisher    03/25/97  - adding exu8csn and exu8csnu (scalar nested table
SQL> Rem     jstenois   03/21/97  - get account status from user$
SQL> Rem     jpearson   02/13/97  - fix date specifications
SQL> Rem     gdoherty   01/30/97  - Get dataobj# in exu8lob for PITR
SQL> Rem     syeung     11/14/96  - Snapshot DDL: grant exu8glob to public
SQL> Rem     adowning   10/08/96  - fix snapshot views
SQL> Rem     syeung     08/29/96  - snapshot ddl
SQL> Rem     wfisher    11/08/96  - exu8tab(u) and exu8cset are used by import too
SQL> Rem     wfisher    10/31/96  - SYS_NC_SETID$ -> NESTED_TABLE_ID
SQL> Rem     jpearson   10/29/96  - bitmap indexes on inner nested tables
SQL> Rem     gdoherty   10/22/96  - add dobjid to exu8tbp and exu8ixp
SQL> Rem     jpearson   10/22/96  - export views in dependency order
SQL> Rem     syeung     10/07/96  - bug 374657: merge bitmap index fix from 7.3
SQL> Rem     syeung     10/03/96  - bump up EXPORT_VIEWS_VERSION for 8.0.2
SQL> Rem     syeung     09/25/96  - nchar support
SQL> Rem     echong     09/26/96  - modify exu8ink to handle ADTs
SQL> Rem     echong     09/17/96  - define exu8ink for iots
SQL> Rem     jpearson   09/17/96  - fix exu8tabi modified flag
SQL> Rem     jpearson   09/13/96  - fix exu8lob view
SQL> Rem     syeung     09/11/96  - password management
SQL> Rem     ixhu       07/31/96  - dataobj# and tabno for point-in-time recovery
SQL> Rem     jpearson   09/11/96  - modify ref scope handling
SQL> Rem     jpearson   08/30/96  - fix column comments on extent tables and views
SQL> Rem     jpearson   08/28/96  - fix cache flag in exu8tab and exu8clu
SQL> Rem     jpearson   08/21/96  - nested table column names
SQL> Rem     asurpur    07/31/96  - Granting *_catalog_roles to *_full_database
SQL> Rem     jpearson   08/19/96  - modify nested table support
SQL> Rem     wfisher    08/14/96  - LOB clauses on CREATE TABLE for attributes
SQL> Rem     jpearson   08/08/96  - support REF SCOPE
SQL> Rem     jpearson   08/06/96  - extent views fix for dropped types
SQL> Rem     syeung     07/19/96  - purified
SQL> Rem     jpearson   07/29/96  - handle INSTEAD OF triggers
SQL> Rem     jpearson   07/24/96  - simplify incremental export
SQL> Rem     jpearson   07/11/96  - fix merge errors
SQL> Rem     syeung     07/01/96  - system generated name changed
SQL> Rem     jpearson   07/10/96  - add catalog roles
SQL> Rem     syeung     06/24/96  - clu.spare4->avgchn in exu8clu
SQL> Rem     syeung     06/19/96  - fix snapshot views
SQL> Rem     echong     07/08/96  - define exu8iovu for iots
SQL> Rem     echong     06/24/96  - add iot comments
SQL> Rem     echong     06/17/96  - add defer to exu8con
SQL> Rem     jpearson   06/27/96  - support for librarys and execute any type priv
SQL> Rem     wfisher    06/25/96  - Don't get lob descriptions for lob attributes
SQL> Rem     jpearson   06/14/96  - change views for indices to support objects
SQL> Rem     jpearson   06/13/96  - support constraints on adt columns
SQL> Rem     wfisher    06/13/96  - Add SYS_NC_ to system generated column names
SQL> Rem     jpearson   06/12/96  - fix type body audit information
SQL> Rem     jpearson   06/11/96  - support for objects in incremental export
SQL> Rem     jpearson   06/11/96  - fix type body views
SQL> Rem     jpearson   06/10/96  - add views for types, librarys and directory alia
SQL> Rem     wfisher    06/07/96  - Add in more object views
SQL> Rem     wfisher    06/06/96  - Adding object views
SQL> Rem     jpearson   06/05/96  - modify exugrn[u] for directorys
SQL> Rem     asurpur    05/29/96  - Removing select on private views from select_cat
SQL> Rem     wfisher    05/23/96  - Adding object support for columns
SQL> Rem     mmonajje   05/22/96  - Replace action col name with action#
SQL> Rem     wfisher    05/16/96  - Return property and type information for tables
SQL> Rem     echong     05/24/96  - Modify exu8tab to include iots
SQL> Rem     syeung     05/16/96  - fix merge problem
SQL> Rem     asurpur    05/15/96  - Dictionary Protection: Granting privileges
SQL> Rem     syeung     05/14/96  - modified for replication changes
SQL> Rem     ixhu       05/13/96  - export v7 tables, clusters, p'd tables in Beta1
SQL> Rem     ccchang    05/10/96  - add nologging support
SQL> Rem     ixhu       05/08/96  - support ts$ online$ and contents$ changes
SQL> Rem     asurpur    04/08/96  - Dictionary Protection Implementation
SQL> Rem     ajasuja    05/02/96  - merge OBJ to BIG
SQL> Rem     ixhu       04/11/96  - AQ support: new expact$ columns
SQL> Rem     syeung     04/24/96  - Add property to exu8uscu
SQL> Rem     syeung     04/12/96  - fix header conflict
SQL> Rem     ccchang    03/15/96  - Support for PTI
SQL> Rem     syeung     04/10/96  - change unique$ to property in exu8ind
SQL> Rem     ixhu       04/03/96  - increment export view version number for 8.0
SQL> Rem     ixhu       02/28/96  - tablespace point-in-time recovery: exu8tsn
SQL> Rem     syeung     02/28/96  - add support deferred constraints and
SQL> Rem                            temporary tables
SQL> Rem     ixhu       02/26/96  - fix exu8fil view
SQL> Rem     ixhu       02/24/96  - fix exu8clu tsno
SQL> Rem     atsukerm   02/09/96  - fix file$ references.
SQL> Rem     ixhu       01/16/96  - ind$ spare8 to type in exu8ind* for bitmap index
SQL> Rem     ixhu       01/03/96  - ts-rel DBA: exu8sto, exu8stou, exu8tne,
SQL> Rem                            exu8tab, exu8clu, exu8ind, exu8rsg, exu8uscu,
SQL> Rem     achaudhr   10/25/95  - PTI: fix parallel, cache
SQL> Rem                          - PTI: global replace {imp, exu}7* -> {imp, exu}8*
SQL> Rem     aho        11/13/95  - iot
SQL> Rem     achaudhr   10/25/95  - PTI: fix parallel, cache
SQL> Rem     achaudhr   08/22/95  - PTI: t$.modified -> t$.flags
SQL> Rem     gdoherty   08/31/95  - mergetrans fix_pti_merge_bugs
SQL> Rem     achaudhr   07/20/95  - PTI: t.modified -> t.flags
SQL> Rem     ccchang    10/10/95  - add bitmap to exu7ind view for bitmap index
SQL> Rem     ixhu       09/18/95  - bug 250819 - misspelt RECORD, referential
SQL> Rem     ixhu       09/11/95  - bug 110894 - add exu7ordu to speed up exu7vewu
SQL> Rem     bhimatsi   07/11/95  - merge changes from branch 1.37.720.2
SQL> Rem     ssamu      06/15/95  - change views on tab$
SQL> Rem     ixhu       05/25/95  - add content to exu7tbs
SQL> Rem     ixhu       05/15/95  - bug 274629 - export ts quota even for dropped ts
SQL> Rem     lcprice    05/08/95  - merge changes from branch 1.37.720.1
SQL> Rem     ixhu       04/18/95  - add imp7uec for unlimited extent compatibility
SQL> Rem     jcchou     04/17/95  - (258186) fix
SQL> Rem     ixhu       04/04/95  - temporary/permanent tablespace in exu7tbs
SQL> Rem     ixhu       03/09/95  - add segcol# in exu7col & exu7colu, exu7cset
SQL> Rem     lcprice    04/18/95  - Fix bug #267737 - default roles processing
SQL> Rem     vraghuna   08/19/94  - move views reqd by both imp and exp to the top
SQL> Rem     vraghuna   08/18/94  - move compatibility checks from sql.bsq
SQL> Rem     vraghuna   08/15/94  - bug 227714 - add exu7cpo
SQL> Rem     jloaiza    07/08/94  - bitand modified column
SQL> Rem     vraghuna   06/20/94  - add support for hash cluster functions
SQL> Rem     vraghuna   06/10/94  - bug 218372 - speed up exu7del
SQL> Rem     vraghuna   06/09/94  - bug 219654 - add NVLs for ||l and cache params
SQL> Rem     vraghuna   05/16/94  - bug 215597 - change exu7snaplu also
SQL> Rem     vraghuna   05/12/94  - bug 215597 - change exu7snapl to exclude slog
SQL> Rem     vraghuna   04/24/94  - bug 211989 - add create roles but not drop
SQL> Rem     ltung      03/02/94  - merge changes from branch 1.15.710.1
SQL> Rem     vraghuna   02/09/94  - add exu7ver for version control
SQL> Rem     vraghuna   02/02/94  - bug 190236 - add outer join to exu7ord in exu7ve
SQL> Rem     vraghuna   01/17/94  - bug 191751 - add support for deferred RPC/RepCat
SQL> Rem     vraghuna   01/12/94  - bug 191750 - add support for refresh groups
SQL> Rem     vraghuna   01/11/94  - bug 191749 - add support for job queues exu7jbq
SQL> Rem     vraghuna   01/11/94  - bug 193733 - use basename in incr trigger views
SQL> Rem     vraghuna   01/11/94  - bug 193732 - fix exu7del for trigs, pkg bodies
SQL> Rem     vraghuna   01/10/94  - bug 192781 - add basetable name for trigger view
SQL> Rem     vraghuna   12/30/93  - bug 192652 - change MM to MI for exu7spr
SQL> Rem     vraghuna   12/21/93  - bug 191879 - grants issued twice
SQL> Rem     vraghuna   12/06/93  - bug 186073 - add read only tablespaces
SQL> Rem     vraghuna   08/18/93  - bug 174029 - moving role creation to sql.bsq
SQL> Rem     vraghuna   07/07/93  - add support for updatable snapshots
SQL> Rem     vraghuna   06/17/93  - bug 166480 - add exu7erc for resource costs
SQL> Rem     vraghuna   06/17/93  - bug 168261 - imp_full_database needs insert priv
SQL> Rem     vraghuna   06/17/93  - bug 166482 - export role passwords
SQL> Rem     vraghuna   05/27/93  - bug 166484 - add audt to exu7spr
SQL> Rem     ltung      05/16/93  - export parallel/cache parameters
SQL> Rem     vraghuna   03/15/93  - bug 140485 - incrementals on tables with constra
SQL> Rem     vraghuna   03/12/93  - bug 152906 - add tspname to exu7uscu
SQL> Rem     vraghuna   01/27/93  - bug 146283 - add exu7usc
SQL> Rem     vraghuna   12/18/92  - bug 143375 - break up exu7col
SQL> Rem     vraghuna   12/02/92  - bug 139302 - speed up exu7colnn
SQL> Rem     tpystyne   11/07/92  - use create or replace view
SQL> Rem     vraghuna   10/28/92  - bug 130560 - add exu7ful
SQL> Rem     vraghuna   10/23/92  - bug 135594 - remove exu7inv and exu7invu
SQL> Rem     glumpkin   10/20/92  - Renamed from EXPVEW.SQL
SQL> Rem     vraghuna   10/14/92  - bug 131957 - add field to exu7sto and exu7stou
SQL> Rem     vraghuna   07/14/92  - bug 115048 - support for analyze statement
SQL> Rem     cheigham   06/24/92  - add exu7colnn view
SQL> Rem     cheigham   06/22/92  - fix cdef$, col$ joins to accommodate changes for
SQL> Rem     jbellemo   06/12/92  - add mapping for MLSLABEL
SQL> Rem     vraghuna   06/03/92  - bug 39511 - add exu7grs
SQL> Rem     cheigham   05/27/92  - speed up exu7vew
SQL> Rem     cheigham   02/13/92  - add select any to imp_full_database
SQL> Rem     cheigham   02/13/92  - grant alter any table to imp_full_database
SQL> Rem     cheigham   01/29/92  - export altered clusters in inc. exports
SQL> Rem     cheigham   01/09/92  - add more privs to imp_full_database
SQL> Rem     cheigham   11/15/91  - fix object codes
SQL> Rem     cheigham   11/06/91  - fix inc. trigger views
SQL> Rem     cheigham   11/02/91  - merge in hash changes
SQL> Rem     cheigham   10/11/91  - view names: exu -> exu7
SQL> Rem     cheigham   09/27/91  - add snapshot views
SQL> Rem     sksingh    09/30/91  - merge changes from branch 1.13.50.1
SQL> Rem     sksingh    09/23/91  - replace spare1, 2, 3 with match, refact, enabled
SQL> Rem     agupta     09/20/91  - add support for lists/groups storage params
SQL> Rem     agupta     08/16/91  - enable|disable constraints
SQL> Rem     agupta     07/30/91  - 7037 - views not created in dependency or
SQL> Rem     agupta     07/02/91  - timestamp syntax for procedures
SQL> Rem     agupta     06/21/91  - fix errors in exurlg
SQL> Rem     agupta     06/14/91  - user$ column name changes
SQL> Rem     agupta     05/31/91  - add userid to tablespace quota view
SQL> Rem     agupta     05/04/91  - fix unique constraints bug
SQL> Rem     agupta     04/16/91  - fix auditing views
SQL> Rem     jwijaya    04/12/91  - remove LINKNAME IS NULL
SQL> Rem     rkooi      04/01/91  - add 'o.linkname IS NULL' clause
SQL> Rem     Gupta      02/26/90  - Lots of modifications for V7
SQL> Rem     Hong       10/31/88  - don't export quotas of 0
SQL> Rem     Hong       09/21/88  - allow null precision/scale
SQL> Rem     Hong       09/10/88  - fix outer joins
SQL> Rem     Hong       08/10/88  - get default/temp tablespace in exuusr
SQL> Rem     Hong       07/01/88  - get obj id in some views
SQL> Rem     Hong       06/10/88  - remove userid != 0 from views
SQL> Rem     Hong       04/28/88  - comment$ moved to com$
SQL> Rem     Hong       03/24/88  - add audit field to exu7seq
SQL> Rem     Hong       03/07/88  - deal with initrans, maxtrans
SQL> Rem                            add views for constraints, sequence #
SQL> Rem     Hong       02/01/88  - add exuico and exuicou
SQL> Rem                            temporary commented out col$.default$
SQL> Rem     Hong       02/01/88  - fix exufil to use v$dbfile directly
SQL> Rem     Hong       12/12/87  - fix exutbs
SQL> Rem     Hong       12/07/87  - handle min extents
SQL> Rem
SQL> 
SQL> WHENEVER SQLERROR EXIT;
SQL> DOC
DOC>######################################################################
DOC>######################################################################
DOC>    The following PL/SQL block will cause an ORA-20000 error and
DOC>    terminate the current SQLPLUS session if the user is not SYS.
DOC>    Disconnect and reconnect with AS SYSDBA.
DOC>######################################################################
DOC>######################################################################
DOC>#
SQL> 
SQL> DECLARE
  2    p_user VARCHAR2(30);
  3  BEGIN
  4      SELECT USER INTO p_user FROM DUAL;
  5      IF p_user != 'SYS' THEN
  6          RAISE_APPLICATION_ERROR (-20000,
  7             'This script must be run AS SYSDBA');
  8      END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> WHENEVER SQLERROR CONTINUE;
SQL> 
SQL> REM
SQL> REM This role allows the grantee to perform full database exports including
SQL> REM incremental exports
SQL> REM
SQL> REM Expect ORA-1921 for CREATE ROLE exp_full_database if this file is run
SQL> REM as part of the migration script and the role existed in the previous
SQL> REM release. Dropping will require DBA to regrant the role.
SQL> REM
SQL> CREATE ROLE exp_full_database;
CREATE ROLE exp_full_database
            *
ERROR at line 1:
ORA-01921: role name 'EXP_FULL_DATABASE' conflicts with another user or role name


SQL> GRANT SELECT ANY TABLE TO exp_full_database;

Grant succeeded.

SQL> GRANT BACKUP ANY TABLE TO exp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE ANY PROCEDURE TO exp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE ANY TYPE TO exp_full_database;

Grant succeeded.

SQL> GRANT SELECT ANY SEQUENCE to exp_full_database;

Grant succeeded.

SQL> GRANT RESUMABLE to exp_full_database;

Grant succeeded.

SQL> GRANT INSERT, UPDATE, DELETE ON sys.incexp TO exp_full_database;

Grant succeeded.

SQL> GRANT INSERT, UPDATE, DELETE ON sys.incvid TO exp_full_database;

Grant succeeded.

SQL> GRANT INSERT, UPDATE, DELETE ON sys.incfil TO exp_full_database;

Grant succeeded.

SQL> GRANT exp_full_database TO DBA;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM This role allows the grantee to perform full database imports
SQL> REM
SQL> REM Expect ORA-1921 for CREATE ROLE imp_full_database if this file is run
SQL> REM as part of the migration script and the role existed in the previous
SQL> REM release. Dropping will require DBA to regrant the role.
SQL> REM
SQL> CREATE ROLE imp_full_database;
CREATE ROLE imp_full_database
            *
ERROR at line 1:
ORA-01921: role name 'IMP_FULL_DATABASE' conflicts with another user or role name


SQL> GRANT BECOME USER TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY CLUSTER TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY INDEX TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY PROCEDURE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY SEQUENCE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY SNAPSHOT TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY SYNONYM TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY TRIGGER TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY VIEW TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE PROFILE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE PUBLIC DATABASE LINK TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE DATABASE LINK TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE PUBLIC SYNONYM TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ROLLBACK SEGMENT TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ROLE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE TABLESPACE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE USER TO imp_full_database;

Grant succeeded.

SQL> GRANT AUDIT ANY TO imp_full_database;

Grant succeeded.

SQL> GRANT COMMENT ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT ALTER ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT SELECT ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE ANY PROCEDURE TO imp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE ANY TYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT INSERT ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT UPDATE ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY DIRECTORY TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY TYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY LIBRARY TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY CONTEXT TO imp_full_database;

Grant succeeded.

SQL> GRANT ADMINISTER DATABASE TRIGGER TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY OPERATOR TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY INDEXTYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY DIMENSION TO imp_full_database;

Grant succeeded.

SQL> GRANT GLOBAL QUERY REWRITE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY SQL PROFILE TO imp_full_database;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Privileges needed to execute PL/SQL blocks
SQL> REM
SQL> REM NOTE:  privileges that need to be granted via packages (e.g.,
SQL> REM        MANAGE_ANY_QUEUE) will be granted in the relevant package (e.g.,
SQL> REM        catqueue.sql) rather than here.  These privileges are identified in
SQL> REM        the SYSTEM_PRIVILEGE_MAP with PROPERTY!= 0
SQL> REM
SQL> GRANT DROP ANY OUTLINE TO imp_full_database;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Granting the roles access views/packages from the dictionary;
SQL> REM
SQL> GRANT SELECT_CATALOG_ROLE TO exp_full_database;

Grant succeeded.

SQL> GRANT SELECT_CATALOG_ROLE TO imp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE_CATALOG_ROLE TO imp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE_CATALOG_ROLE TO exp_full_database;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For import of incremental export files
SQL> REM
SQL> GRANT DROP ANY CLUSTER TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY INDEX TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY PROCEDURE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY SEQUENCE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY SNAPSHOT TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY SYNONYM TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY TRIGGER TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY VIEW TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP PROFILE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP PUBLIC DATABASE LINK TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP PUBLIC SYNONYM TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ROLLBACK SEGMENT TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY ROLE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP TABLESPACE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP USER TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY DIRECTORY TO imp_full_database;

Grant succeeded.

SQL> GRANT ALTER ANY TYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY TYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY LIBRARY TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY CONTEXT TO imp_full_database;

Grant succeeded.

SQL> GRANT ALTER ANY PROCEDURE TO  imp_full_database;

Grant succeeded.

SQL> GRANT ALTER ANY TRIGGER TO  imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY OPERATOR TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY INDEXTYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY DIMENSION TO imp_full_database;

Grant succeeded.

SQL> GRANT ANALYZE ANY TO imp_full_database;

Grant succeeded.

SQL> GRANT RESUMABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY SQL PROFILE TO imp_full_database;

Grant succeeded.

SQL> 
SQL> GRANT imp_full_database TO DBA;

Grant succeeded.

SQL> 
SQL> REM **********  I M P O R T A N T  **********  I M P O R T A N T  **********
SQL> REM This first view selects all rows from sys.obj$ that are NOT secondary
SQL> REM objects as created by Domain Indexes. Secondary objects are not normally
SQL> REM exported because the domain index's CREATE INDEX at import time will create
SQL> REM them. However, when doing domain index 'fast rebuild' we do place certain
SQL> REM classes of secondary objects (tables & their types, indexes) in the
SQL> REM export file.
SQL> REM
SQL> REM exu81obj should be used as a substitute for obj$ in all top level views
SQL> REM of object classes whose secondary objects will NEVER be exported; i.e, are
SQL> REM not exported during DI 'fast rebuild'.  Those object classes that can be
SQL> REM exp. in DI fast rebuild (tables/indexes) should continue to use obj$ and
SQL> REM filtering (or not) of 2ndary objects will be done at run time via a bind
SQL> REM var. on the WHERE clauses of the appropriate SELECT statements in exuiss.c.
SQL> REM
SQL> REM When and if Pt. In Time Recovery ever supports domain indexes, it will have
SQL> REM to allow export of secondary objects because these comprise the storage for
SQL> REM the index. At that time, all object classes that PITR exports will have to
SQL> REM switch from using exu81obj (static filtering) back to obj$ and dynamically
SQL> REM filter off secondary objects as appropriate.
SQL> REM **********  I M P O R T A N T  **********  I M P O R T A N T  **********
SQL> 
SQL> CREATE OR REPLACE VIEW exu81obj AS
  2          SELECT  o$.*
  3          FROM    sys.obj$ o$, sys.user$ u$
  4          WHERE   BITAND(o$.flags, 16) != 16 AND
  5                  /* Ignore recycle bin objects */
  6                  BITAND(o$.flags, 128) != 128 AND
  7                  o$.owner# = u$.user# AND
  8                  u$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
  9                                  'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
 10                                  'DIP',     'DMSYS', 'DBSNMP', 'EXFSYS',
 11                                  'WMSYS', 'ORACLE_OCM')
 12  /

View created.

SQL> GRANT SELECT ON sys.exu81obj TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get SQL Version information -- this version needs to be hardcoded as 8.1.6
SQL> REM when new versions of sql are generated.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816maxsqv (
  2                  version#, sql_version) AS
  3          SELECT  sv.version#, sv.sql_version
  4          FROM    sys.sql_version$ sv
  5          WHERE   sv.version# = (
  6                      SELECT  MAX(sv2.version#)
  7                      FROM    sys.sql_version$ sv2)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu816maxsqv TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM The following helper view identifies interesting older sql versions in
SQL> REM the database. Only sql versions other than the database sql version are
SQL> REM identified.  Versions later than the export view's version are down-graded
SQL> REM to the version of the export views being used.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816sqv AS
  2          SELECT  sv.*
  3          FROM    sys.sql_version$ sv
  4         WHERE   sv.version# < (
  5                      SELECT  m.version#
  6                      FROM    sys.exu816maxsqv m)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu816sqv TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM ***************************************************
SQL> REM Section 1: Views required by BOTH export and import
SQL> REM ***************************************************
SQL> REM
SQL> 
SQL> REM
SQL> REM 'Database' (SYSTEM tablespace) block size - used only in pre 9.0 Exports
SQL> REM for db blocksize and Imports that need to support V5 CREATE/ALTER SPACE
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8bsz (
  2                  blocksize) AS
  3          SELECT  ts$.blocksize
  4          FROM    sys.ts$ ts$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8bsz TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all users
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8usr (
  2                  name, userid, passwd, defrole, datats, tempts, profile#,
  3                  profname, astatus, ext_username) AS
  4          SELECT  u.name, u.user#, DECODE(u.password, 'N', '', u.password),
  5                  DECODE(u.defrole, 0, 'N', 1, 'A', 2, 'L', 3, 'E', 'X'),
  6                  ts1.name, DECODE(BITAND(ts2.flags,2048),2048,'SYSTEM',ts2.name),
  7                  u.resource$, p.name, u.astatus,
  8                  u.ext_username
  9          FROM    sys.user$ u, sys.ts$ ts1, sys.ts$ ts2, sys.profname$ p
 10          WHERE   u.datats# = ts1.ts# AND
 11                  u.tempts# = ts2.ts# AND
 12                  u.type# = 1 AND
 13                  u.resource$ = p.profile# AND
 14                  u.name NOT IN ( 'ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 15                                  'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
 16                                  'DIP',     'DMSYS', 'DBSNMP', 'EXFSYS',
 17                                  'WMSYS','ORACLE_OCM')
 18  /

View created.

SQL> GRANT SELECT ON sys.exu8usr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8usru AS
  2          SELECT  *
  3          FROM    sys.exu8usr
  4          WHERE   userid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8usru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM check if user has priv to do a full db export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ful(
  2                  role) AS
  3          SELECT  u.name
  4          FROM    sys.x$kzsro, sys.user$ u
  5          WHERE   kzsrorol != UID AND
  6                  kzsrorol != 1 AND
  7                  u.user# = kzsrorol
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8ful TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM ---------------------------------------------------------------------
> REM                        General and User Table Views
SQL> REM ---------------------------------------------------------------------
> REM
SQL> REM  Notes:
SQL> REM      The 'latest' release view will return all supportable
SQL> REM      tables while views used by prior releases should exclude
SQL> REM      (if at all possible) tables which contain items
SQL> REM      (such as data types) that are not supported on the specific
SQL> REM      version's platform.
SQL> REM
SQL> REM ---------------------------------------------------------------------
> 
SQL> REM
SQL> REM V10.0 Table view
SQL> REM
SQL> REM Notes:
SQL> REM    Includes tables with columns we don't deal with so we can
SQL> REM    produce a better error to the 10i user.
SQL> REM
SQL> REM  xdbool added for 10i and out-of-line ordering
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10tabs (
  2                  objid, dobjid, name, owner, ownerid, tablespace, tsno, fileno,
  3                  blockno, audit$, comment$, clusterflag, mtime, modified, tabno,
  4                  pctfree$, pctused$, initrans, maxtrans, degree, instances,
  5                  cache, tempflags, property, deflog, tsdeflog, roid, recpblk,
  6                  secondaryobj, rowcnt, blkcnt, avgrlen, tflags, trigflag,
  7                  objstatus, xdbool)
  8        AS                                                      /* Heap tables */
  9          SELECT
 10                  o$.obj#, o$.dataobj#, o$.name, u$.name, o$.owner#, ts$.name,
 11                  t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
 12                  NVL(t$.bobj#, 0), o$.mtime,
 13                  DECODE(BITAND(t$.flags, 1), 1, 1, 0), NVL(t$.tab#, 0),
 14                  MOD(t$.pctfree$, 100), t$.pctused$, t$.initrans, t$.maxtrans,
 15                  NVL(t$.degree, 1), NVL(t$.instances, 1),
 16                  DECODE(BITAND(t$.flags, 8), 8, 1, 0),
 17                  MOD(TRUNC(o$.flags / 2), 2), t$.property,
 18                  DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
 19                  t$.spare1, DECODE(BITAND(o$.flags, 16), 16, 1, 0),
 20                  NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
 21                  t$.flags, t$.trigflag, o$.status,
 22                  (SELECT COUNT(*)
 23                      FROM sys.opqtype$ opq$
 24                      WHERE opq$.obj# = o$.obj# AND
 25                            BITAND(opq$.flags, 32) = 32 )
 26          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
 27                  sys.com$ c$
 28          WHERE   t$.obj# = o$.obj# AND
 29                  t$.ts# = ts$.ts# AND
 30                  u$.user# = o$.owner# AND
 31                  o$.obj# = c$.obj#(+) AND
 32                  c$.col#(+) IS NULL AND
 33                  BITAND(o$.flags,128) != 128 AND      /* Skip recycle bin */
 34                  BITAND(t$.property, 64+512) = 0 AND /*skip IOT and ovflw segs*/
 35                  BITAND(t$.flags, 536870912) = 0    /* skip IOT mapping table */
 36        UNION ALL                                         /* Index-only tables */
 37          SELECT  o$.obj#, o$.dataobj#, o$.name, u$.name, o$.owner#, ts$.name,
 38                  i$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
 39                  NVL(t$.bobj#, 0), o$.mtime,
 40                  DECODE(BITAND(t$.flags, 1), 1, 1, 0),
 41                  NVL(t$.tab#, 0), 0, 0, 0, 0,
 42                  NVL(t$.degree, 1), NVL(t$.instances, 1),
 43                  DECODE(BITAND(t$.flags, 8), 8, 1, 0),
 44                  MOD(TRUNC(o$.flags / 2), 2), t$.property,
 45                  DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
 46                  t$.spare1, DECODE(BITAND(o$.flags, 16), 16, 1, 0),
 47                  NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
 48                  t$.flags, t$.trigflag, o$.status,
 49                  (SELECT COUNT(*)
 50                      FROM sys.opqtype$ opq$
 51                      WHERE opq$.obj# = o$.obj# AND
 52                            BITAND(opq$.flags, 32) = 32 )
 53          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
 54                  sys.com$ c$, sys.ind$ i$
 55          WHERE   t$.obj# = o$.obj# AND
 56                  u$.user# = o$.owner# AND
 57                  o$.obj# = c$.obj#(+) AND
 58                  c$.col#(+) IS NULL AND
 59                  BITAND(o$.flags,128) != 128 AND      /* Skip recycle bin */
 60                  BITAND(t$.property, 64+512) = 64 AND /* IOT, but not overflow*/
 61                  t$.pctused$ = i$.obj# AND/* For IOTs, pctused has index obj# */
 62                  i$.ts# = ts$.ts#
 63  /

View created.

SQL> GRANT SELECT ON sys.exu10tabs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V10.0 Table views
SQL> REM
SQL> 
SQL> REM
SQL> REM V10.0 current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10tabsu AS
  2          SELECT  *
  3          FROM    sys.exu10tabs
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10tabsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu10tab
SQL> REM
SQL> REM Notes: filtered for secondaryobjs from above
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10tab AS
  2          SELECT  *
  3          FROM    sys.exu10tabs t$
  4          WHERE   t$.secondaryobj = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10tab TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10tabu AS
  2          SELECT  *
  3          FROM    sys.exu10tab
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10tabu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM End V10.0 Table views
SQL> REM
SQL> 
SQL> REM
SQL> REM V9.0 Table views
SQL> REM
SQL> REM Notes:
SQL> REM    Exclude tables with:
SQL> REM        columns of type BINARY_FLOAT (100) or BINARY_DOUBLE (101)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabs AS
  2          SELECT  *
  3          FROM    sys.exu10tabs
  4          WHERE  NOT EXISTS (
  5                     SELECT *
  6                     FROM   sys.col$ c$
  7                     WHERE  (c$.obj# = objid AND
  8                             (c$.type# = 100 OR
  9                             c$.type# = 101 )))
 10  /

View created.

SQL> GRANT SELECT ON sys.exu9tabs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V9.0 current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabsu AS
  2          SELECT  *
  3          FROM    sys.exu9tabs
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9tabsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu9tab
SQL> REM
SQL> REM Notes: filtered for secondaryobjs from above
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tab AS
  2          SELECT  *
  3          FROM    sys.exu9tabs t$
  4          WHERE   t$.secondaryobj = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9tab TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabu AS
  2          SELECT  *
  3          FROM    sys.exu9tab
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9tabu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM List of all tables with unused columns - taken directly from
SQL> REM catalog.sql's all_unused_col_tabs
SQL> REM Notes:
SQL> REM    Modifications to this view to filter out specific new datatypes
SQL> REM    are not required.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tab_unused_cols (
  2                  OBJID ) AS
  3          SELECT  o.obj#
  4          FROM    sys.user$ u, sys.obj$ o, sys.col$ c
  5          WHERE   o.owner# = u.user#
  6             AND  o.obj# = c.obj#
  7             AND BITAND(c.property,32768) = 32768            -- is unused column
  8             AND BITAND(c.property, 1) != 1              -- not ADT attribute col
  9             AND BITAND(c.property, 1024) != 1024         -- not NTAB's setid col
 10             AND (o.owner# = userenv('SCHEMAID')
 11                  OR o.obj# IN
 12                     (SELECT oa.obj#
 13                       FROM sys.objauth$ oa
 14                       WHERE grantee# IN ( select kzsrorol
 15                                   FROM x$kzsro
 16                                 )
 17                      )
 18                  OR EXISTS (SELECT NULL FROM v$enabledprivs
 19                              WHERE priv_number IN (-45 /* LOCK ANY TABLE */,
 20                                                    -47 /* SELECT ANY TABLE */,
 21                                                    -48 /* INSERT ANY TABLE */,
 22                                                    -49 /* UPDATE ANY TABLE */,
 23                                                    -50 /* DELETE ANY TABLE */)
 24                            )
 25                  )
 26  /

View created.

SQL> GRANT SELECT ON sys.exu9tab_unused_cols to PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V8.1 table views
SQL> REM
SQL> REM Notes: - exu81tabs is subseted off exu9tabs to filter out tables with
SQL> REM          non-null values in trigflag<30:5>
SQL> REM        - tempflags is now deprecated
SQL> REM
SQL> REM 2654811 row_movement_enabled (2097152) flag added in 9.2
SQL> REM          2097152 + 31 = 2097183
SQL> CREATE OR REPLACE VIEW exu81tabs AS
  2          SELECT  *
  3          FROM    sys.exu9tabs
  4          WHERE   BITAND(trigflag, 2097183) = trigflag
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tabsu AS
  2          SELECT  *
  3          FROM    sys.exu81tabs
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu81tab
SQL> REM
SQL> REM Notes: filtered for secondaryobjs from above
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tab AS
  2          SELECT  *
  3          FROM    sys.exu81tabs
  4          WHERE   secondaryobj = 0 AND
  5                  ( NOT EXISTS (
  6                           SELECT  *
  7                           FROM    sys.col$ c$, sys.coltype$ ct$, sys.type$ t$
  8                           WHERE   c$.obj# = objid AND
  9                                   ct$.toid = t$.toid AND
 10                                   c$.obj# = ct$.obj# AND
 11                                   c$.col# = ct$.col# AND
 12                                   ((BITAND(t$.PROPERTIES, 8) = 8) OR
 13                                   (BITAND(t$.PROPERTIES, 8192) = 8192))))
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81tab TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tabu AS
  2          SELECT  *
  3          FROM    sys.exu81tab
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V8.0 table view
SQL> REM
SQL> REM Notes: exu8tab is subseted off exu81tab to filter out tables with:
SQL> REM        columns of type UROWID (208)
SQL> REM        datetime interval types : (178 <= type <= 183)
SQL> REM        varying width character LOBs :
SQL> REM        - (type = 112 & ((800 < charsetid < 1000) or (charsetid > 2000)))
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tab AS
  2          SELECT  *
  3          FROM    sys.exu81tab
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.col$ c$
  7                      WHERE   c$.obj# = objid AND
  8                              (c$.type# = 208 OR
  9                               (c$.type# >= 178 AND
 10                                c$.type# <= 183) OR
 11                               (c$.type# = 112 AND
 12                                ((c$.charsetid > 800 AND
 13                                  c$.charsetid < 1000) OR
 14                                 c$.charsetid > 2000))))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu8tab TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V8.0 User's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tabu AS
  2          SELECT  *
  3          FROM    sys.exu8tab
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8tabu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Database Character Set and NCHAR Character Set
SQL> REM
SQL> REM Notes: For import and old versions of export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cset (
  2                  name, value) AS
  3          SELECT  name, DECODE (value$,'AL16UTF16','UTF8', value$)
  4          FROM    sys.props$
  5          WHERE   name IN ('NLS_CHARACTERSET',
  6                           'NLS_NCHAR_CHARACTERSET')
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8cset TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Database NLS settings
SQL> REM
SQL> REM Notes: for current version of export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9nls (
  2                  name, value) AS
  3          SELECT  name, value$
  4          FROM    sys.props$
  5          WHERE   name IN ('NLS_CHARACTERSET',
  6                           'NLS_NCHAR_CHARACTERSET',
  7                           'NLS_LENGTH_SEMANTICS')
  8  /

View created.

SQL> GRANT SELECT ON sys.exu9nls TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Check for Database Options
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8opt (
  2                  parameter, value) AS
  3          SELECT  parameter, DECODE(value, 'TRUE', 1, 'FALSE', 0, 2)
  4          FROM    sys.v$option
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8opt TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM ****************************************
SQL> REM Section 2: Views required by import ONLY
SQL> REM ****************************************
SQL> REM
SQL> 
SQL> REM
SQL> REM build replication procedures view
SQL> REM
SQL> CREATE OR REPLACE VIEW imp8repcat (
  2                  name, type) AS
  3          SELECT  name, type#
  4          FROM    sys.obj$
  5          WHERE   name IN ('DBMS_SNAPSHOT_UTL', 'DBMS_REPCAT_MIG') AND
  6                  type# = 11 AND
  7                  owner# = 0
  8  /

View created.

SQL> GRANT SELECT ON sys.imp8repcat TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Unlimited Extent Compatibility Information
SQL> REM
SQL> REM 8.0.6 import references this view which never returned any rows
SQL> REM so WHERE 1=0 will make sure that continues.
SQL> REM
SQL> CREATE OR REPLACE VIEW imp8uec (
  2                  release) AS
  3          SELECT  *
  4          FROM    DUAL
  5          WHERE   1=0
  6  /

View created.

SQL> GRANT SELECT ON sys.imp8uec TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain the TOID of an existing type
SQL> REM
SQL> CREATE OR REPLACE VIEW imp8ttd (
  2                  tname, towner, toid) AS
  3          SELECT  o$.name, u$.name, o$.oid$
  4          FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
  5          WHERE   o$.type# = 13 AND
  6                  o$.owner# = u$.user# AND
  7                  o$.oid$   = t$.toid  AND
  8                  t$.toid   = t$.tvoid                          /* Only latest */
  9  /

View created.

SQL> GRANT SELECT ON sys.imp8ttd TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp8ttdu (
  2                  tname, towner, toid) AS
  3          SELECT  o$.name, u$.name, o$.oid$
  4          FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
  5          WHERE   o$.type# = 13 AND
  6                  o$.owner# = u$.user# AND
  7                  o$.oid$   = t$.toid  AND
  8                  t$.toid  = t$.tvoid AND                  /* Only the latest */
  9                  (o$.owner# = UID OR                 /* owned by current user */
 10                  /* current user or public role have execute access to type */
 11                   o$.obj# IN (
 12                      SELECT  oa.obj#
 13                      FROM    sys.objauth$ oa
 14                      WHERE   oa.obj# = o$.obj# AND
 15                              oa.privilege# = 12 AND                /* execute */
 16                              oa.grantee# IN (UID, 1)) OR
 17                   /* current user or public role can execute any type */
 18                   EXISTS (
 19                      SELECT  NULL
 20                      FROM    sys.sysauth$ sa
 21                      WHERE   sa.grantee# IN (UID, 1) AND
 22                              sa.privilege# = -184))
 23  /

View created.

SQL> GRANT SELECT ON sys.imp8ttdu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp8cdt (
  2                  ownerid, bad) AS
  3          SELECT  co$.owner#, DECODE(BITAND(c$.defer, 16), 16, 1, 0)
  4          FROM    sys.cdef$ c$, sys.con$ co$
  5          WHERE   c$.defer IS NOT NULL AND
  6                  BITAND(c$.defer, 16) = 16 AND
  7                  c$.con# = co$.con#
  8  /

View created.

SQL> GRANT SELECT ON sys.imp8cdt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp8cdtu  AS
  2          SELECT  *
  3          FROM    sys.imp8cdt
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.imp8cdtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp8con (
  2                  ctname, tbname, username, intcol) AS
  3          SELECT  c.name, o.name, u.name, cc.intcol#
  4          FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.ccol$ cc,
  5                  sys.cdef$ cd
  6          WHERE   o.obj# = cc.obj# AND
  7                  c.con# = cc.con# AND
  8                  o.obj# = cd.obj# AND
  9                  u.user# = c.owner# AND
 10                  cd.con# = c.con# AND
 11                  cd.type# = 3 AND
 12                  BITAND(cd.defer, 8) = 8
 13  /

View created.

SQL> GRANT SELECT ON sys.imp8con TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp9con (
  2                  ctname, tbname, username, intcol, type) AS
  3          SELECT  c.name, o.name, u.name, cc.intcol#, cd.type#
  4          FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.ccol$ cc,
  5                  sys.cdef$ cd
  6          WHERE   o.obj# = cc.obj# AND
  7                  c.con# = cc.con# AND
  8                  o.obj# = cd.obj# AND
  9                  u.user# = c.owner# AND
 10                  cd.con# = c.con# AND
 11                  BITAND(cd.defer, 8) = 8
 12  /

View created.

SQL> GRANT SELECT ON sys.imp9con TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain the tvoid/hash of an existing type ("only latest" check is not
SQL> REM required here)
SQL> REM
SQL> CREATE OR REPLACE VIEW imp9tvoid (
  2                  tname, towner, hash, tvoid, status, typeid, roottoid) AS
  3          SELECT  o$.name, u$.name, t$.hashcode, t$.tvoid, o$.status, t$.typeid,
  4                  t$.roottoid
  5          FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
  6          WHERE   o$.type# = 13 AND
  7                  o$.owner# = u$.user# AND
  8                  t$.toid   = o$.oid$ AND
  9                  t$.toid   = t$.tvoid AND                  /* only the latest */
 10                  (UID  IN (o$.owner#, 0) OR                /* System or owner */
 11                     EXISTS (                          /* user has select role */
 12                       SELECT  role
 13                       FROM    sys.session_roles
 14                       WHERE   role = 'SELECT_CATALOG_ROLE') OR
 15                    (o$.obj# IN                       /* user has execute priv */
 16                     (SELECT oa$.obj#
 17                      FROM   sys.objauth$ oa$
 18                      WHERE o$.obj# = oa$.obj# AND
 19                            oa$.grantee# IN  /* granted to current user/public */
 20                                  (SELECT kzsrorol from x$kzsro)  AND
 21                            privilege# = 12)))                 /* Execute priv */
 22  /

View created.

SQL> GRANT SELECT ON sys.imp9tvoid TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM all users for IMPORT
SQL> REM
SQL> CREATE OR REPLACE VIEW imp9usr (name, userid) AS
  2          SELECT  u.name, u.user#
  3          FROM    sys.user$ u
  4          WHERE   u.user# = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.imp9usr TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get compatible parameter of target database.
SQL> REM
SQL> CREATE OR REPLACE VIEW imp9compat (compatible) AS
  2          SELECT  value
  3          FROM    v$parameter
  4          WHERE   name = 'compatible'
  5  /

View created.

SQL> GRANT SELECT ON sys.imp9compat TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get SYNONYMs for TYPEs.
SQL> REM This view is used by import in order to verify that a pre-existing
SQL> REM object is a SYNonym for (4) a TYPe.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp9syn4 (
  2                  synname, synowner, typename, typeowner) AS
  3          SELECT  o.name, u.name, s.name, s.owner
  4          FROM    sys.obj$ o, sys.user$ u, sys.syn$ s
  5          WHERE   s.obj# = o.obj# AND
  6                  u.user# = o.owner# AND
  7                  /* user is sys, or owner, or synonym is PUBLIC */
  8                  (UID IN (o.owner#, 0) OR o.owner# = 1 OR
  9                     EXISTS (                         /* user has select role */
 10                       SELECT  role
 11                       FROM    sys.session_roles
 12                       WHERE   role = 'SELECT_CATALOG_ROLE')) AND
 13                  EXISTS (
 14                    SELECT ot.obj#
 15                    FROM sys.obj$ ot
 16                    WHERE ot.name = s.name AND
 17                          ot.type# = 13 AND
 18                          ot.owner# = (
 19                              SELECT ut.user#
 20                              FROM sys.user$ ut
 21                              WHERE ut.name = s.owner))
 22  /

View created.

SQL> GRANT SELECT ON sys.imp9syn4 TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get the CHUNK size and Endian for a LOB column.
SQL> REM This view is used to get the CHUNK size and Endian property bit of an
SQL> REM existing LOB column in a table
SQL> REM (table may have been pre-created or different than Export size).
SQL> REM
SQL> create or replace view sys.imp_lob_info
  2      (OWNER, TABLE_NAME, COLUMN_NAME, CHUNK, LITTLE_ENDIAN)
  3  as
  4  select u.name, o.name, c.name, l.chunk * ts.blocksize,
  5          DECODE(BITAND(l.property, 512), 512, 1, 0)
  6  from sys.obj$ o, sys.col$ c, sys.tab$ ta, sys.lob$ l, sys.user$ u, sys.ts$ ts
  7  where o.owner# = u.user#
  8    and o.obj# = c.obj#
  9    and c.obj# = l.obj#
 10    and c.intcol# = l.intcol#
 11    and l.ts# = ts.ts#(+)
 12    and (o.owner# = userenv('SCHEMAID')
 13         or o.obj# in
 14              (select oa.obj#
 15               from sys.objauth$ oa
 16               where grantee# in ( select kzsrorol
 17                                   from x$kzsro
 18                                 )
 19              )
 20         or exists (select null from v$enabledprivs
 21                    where priv_number in (-45 /* LOCK ANY TABLE */,
 22                                          -47 /* SELECT ANY TABLE */,
 23                                          -48 /* INSERT ANY TABLE */,
 24                                          -49 /* UPDATE ANY TABLE */,
 25                                          -50 /* DELETE ANY TABLE */)
 26                   )
 27        )
 28    and o.obj# = ta.obj#
 29    and bitand(ta.property, 32) != 32    /* not partitioned table */
 30  union all
 31  select u.name, o.name, c.name,
 32         plob.defchunk * NVL(ts1.blocksize, NVL(
 33          (select ts2.blocksize
 34          from   sys.ts$ ts2, sys.lobfrag$ lf
 35          where  l.lobj# = lf.parentobj# and
 36                 lf.ts# = ts2.ts# and rownum < 2),
 37          (select ts2.blocksize
 38          from   sys.ts$ ts2, sys.lobcomppart$ lcp, sys.lobfrag$ lf
 39          where  l.lobj# = lcp.lobj# and lcp.partobj# = lf.parentobj# and
 40                 lf.ts# = ts2.ts# and rownum < 2))),
 41          DECODE(BITAND(l.property, 512), 512, 1, 0)
 42  from sys.obj$ o, sys.col$ c, sys.partlob$ plob,
 43       sys.lob$ l, sys.ts$ ts1, sys.tab$ ta,
 44       sys.user$ u
 45  where o.owner# = u.user#
 46    and o.obj# = c.obj#
 47    and c.obj# = l.obj#
 48    and c.intcol# = l.intcol#
 49    and l.lobj# = plob.lobj#
 50    and plob.defts# = ts1.ts# (+)
 51    and bitand(c.property,32768) != 32768           /* not unused column */
 52    and (o.owner# = userenv('SCHEMAID')
 53         or o.obj# in
 54              (select oa.obj#
 55               from sys.objauth$ oa
 56               where grantee# in ( select kzsrorol
 57                                   from x$kzsro
 58                                 )
 59              )
 60         or exists (select null from v$enabledprivs
 61                    where priv_number in (-45 /* LOCK ANY TABLE */,
 62                                          -47 /* SELECT ANY TABLE */,
 63                                          -48 /* INSERT ANY TABLE */,
 64                                          -49 /* UPDATE ANY TABLE */,
 65                                          -50 /* DELETE ANY TABLE */)
 66                   )
 67        )
 68    and o.obj# = ta.obj#
 69    and bitand(ta.property, 32) = 32         /* partitioned table */
 70  /

View created.

SQL> GRANT SELECT ON sys.imp_lob_info TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM View to see if a TYPE is used by any table in the database.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp10typused
  2      (OWNER, NAME, OID$) AS
  3          SELECT u.name, o_tab.name, o_typ.oid$
  4          FROM   sys.obj$ o_tab, sys.user$ u, sys.obj$ o_typ, sys.dependency$ d
  5          WHERE d.p_obj# = o_typ.obj#
  6          AND d.d_obj# = o_tab.obj#
  7          AND o_tab.type# = 2
  8          AND o_tab.owner# = u.user#
  9  /

View created.

SQL> GRANT SELECT ON sys.imp10typused TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM View to see if a TYPEID is used by another type in a type hierarchy.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp10typidused
  2      (TYPEID, TOID, ROOTTOID) AS
  3          SELECT typeid, toid, roottoid
  4          FROM sys.type$
  5  /

View created.

SQL> GRANT SELECT ON sys.imp10typidused TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM View to see if a table has a BEFORE ROW trigger defined on it.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp_tab_trig
  2      (TNAME, OWNER, TYPE) AS
  3          SELECT o.name, u.name, o.type#
  4          FROM sys.trigger$ tr, sys.obj$ o, sys.user$ u
  5          WHERE tr.baseobject = o.obj#
  6          AND    u.user#      = o.owner#
  7          AND   tr.type#      = 1             /* BEFORE ROW */
  8          AND   tr.insert$    = 1             /* for INSERT */
  9          AND   tr.enabled    = 1
 10          AND    o.owner#     = UID
 11  /

View created.

SQL> GRANT SELECT ON sys.imp_tab_trig TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM View to see if any LOB columns for a table have NOT NULL constraints.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp_lob_notnull
  2      (TNAME, OWNER, TYPE, ISNULL) AS
  3          SELECT o.name, u.name, c.type#, c.null$
  4          FROM sys.col$ c, sys.obj$ o, sys.user$ u
  5          WHERE c.obj#   = o.obj#
  6          AND   u.user#  = o.owner#
  7          AND   o.owner# = UID
  8  /

View created.

SQL> GRANT SELECT ON sys.imp_lob_notnull TO PUBLIC;

Grant succeeded.

SQL> 
SQL> -------------------------
SQL> 
SQL> 
SQL> REM
SQL> REM ****************************************
SQL> REM Section 3: Views required by export ONLY
SQL> REM ****************************************
SQL> REM
SQL> 
SQL> REM
SQL> REM IOT overflow segments
SQL> REM
SQL> REM Note tempflags now deprecated
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8iov (
  2                  objid, dobjid, name, bobjid, owner, ownerid, tablespace, tsno,
  3                  fileno, blockno, audit$, comment$, clusterflag, mtime,
  4                  modified, pctfree$, pctused$, initrans, maxtrans, degree,
  5                  instances, cache, tempflags, property, deflog, tsdeflog) AS
  6          SELECT  o$.obj#, o$.dataobj#, o$.name, t$.bobj#, u$.name, o$.owner#,
  7                  ts$.name, t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
  8                  NVL(t$.bobj#, 0), o$.mtime,
  9                  DECODE(BITAND(t$.flags, 1), 1, 1, 0), MOD(t$.pctfree$, 100),
 10                  t$.pctused$, t$.initrans, t$.maxtrans, NVL(t$.degree, 1),
 11                  NVL(t$.instances, 1), DECODE(BITAND(t$.flags, 128), 128, 1, 0),
 12                  MOD(TRUNC(o$.flags / 2), 2), t$.property,
 13                  DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging
 14          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
 15                  sys.com$ c$
 16          WHERE   t$.obj# = o$.obj# AND
 17                  t$.ts# = ts$.ts# AND
 18                  u$.user# = o$.owner# AND
 19                  o$.obj# = c$.obj#(+) AND
 20                  c$.col#(+) IS NULL AND
 21                  BITAND(t$.property, 512) = 512
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8iov TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's overflow segments
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8iovu AS
  2          SELECT  *
  3          FROM    sys.exu8iov
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8iovu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM iot INCLUDING key columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ink (
  2                  objid, ownerid, intcolid, name) AS
  3          SELECT  o$.obj#, o$.owner#, c$.intcol#, c$.name
  4          FROM    sys.obj$ o$, sys.ind$ i$, sys.col$ c$
  5          WHERE   i$.bo# = o$.obj# AND
  6                  c$.obj# = o$.obj# AND
  7                  c$.col# = i$.trunccnt AND
  8                  i$.trunccnt != 0
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8ink TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's INCLUDING key columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8inku AS
  2          SELECT  *
  3          FROM    sys.exu8ink
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8inku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.0 tables for incremental export
SQL> REM
SQL> REM Notes: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabi AS
  2          SELECT  t.*
  3          FROM    sys.exu9tab t, sys.incexp i, sys.incvid v
  4          WHERE   t.name = i.name(+) AND
  5                  t.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 2) = 2 AND
  7                  BITAND(t.property, 8192) = 0 AND          /* not inner table */
  8                  (BITAND(t.modified, 1) = 1 OR
  9                   t.mtime > i.itime OR
 10                   NVL(i.expid, 9999) > v.expid OR
 11                   /* determine if it has inner tables that have been
 12                   ** changed since last incremental export */
 13                   (BITAND(t.property, 4) = 4 AND          /* has inner tables */
 14                    EXISTS (
 15                      SELECT  0
 16                      FROM    sys.obj$ o2, sys.tab$ t2
 17                      WHERE   o2.obj# = t2.obj# AND
 18                              BITAND(t2.property, 8192) = 8192 AND
 19                              (o2.mtime > i.itime OR
 20                               BITAND(t2.flags, 1) = 1) AND
 21                              o2.obj# IN (
 22                                  SELECT  nt.ntab#
 23                                  FROM    sys.ntab$ nt
 24                                  START WITH nt.obj# = t.objid
 25                                  CONNECT BY PRIOR nt.ntab# = nt.obj#))))
 26  /

View created.

SQL> GRANT SELECT ON sys.exu9tabi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.0 tables for cumulative export:
SQL> REM
SQL> REM Notes: modified, last export was inc, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabc AS
  2          SELECT  t.*
  3          FROM    sys.exu9tab t, sys.incexp i, sys.incvid v
  4          WHERE   t.name = i.name(+) AND
  5                  t.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 2) = 2 AND
  7                  BITAND(t.property, 8192) = 0 AND          /* not inner table */
  8                  (BITAND(t.modified, 1) = 1 OR
  9                   i.itime > NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) OR
 10                   t.mtime > i.itime OR
 11                   NVL(i.expid, 9999) > v.expid OR
 12                   /* determine if it has inner tables that have been
 13                   ** changed since last incremental export */
 14                   (BITAND(t.property, 4) = 4 AND          /* has inner tables */
 15                    EXISTS (
 16                      SELECT  0
 17                      FROM    sys.obj$ o2, sys.tab$ t2
 18                      WHERE   o2.obj# = t2.obj# AND
 19                              BITAND(t2.property, 8192) = 8192 AND
 20                              (o2.mtime > i.itime OR
 21                               BITAND(t2.flags, 1) = 1) AND
 22                              o2.obj# IN (
 23                                  SELECT  nt.ntab#
 24                                  FROM    sys.ntab$ nt
 25                                  START WITH nt.obj# = t.objid
 26                                  CONNECT BY PRIOR nt.ntab# = nt.obj#))))
 27  /

View created.

SQL> GRANT SELECT ON sys.exu9tabc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.1 tables for incremental export
SQL> REM
SQL> REM Notes: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tabi AS
  2          SELECT  *
  3          FROM    sys.exu9tabi
  4          WHERE   BITAND(trigflag, 31) = trigflag
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.1 tables for cumulative export
SQL> REM
SQL> REM Notes: modified, last export was inc, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tabc AS
  2          SELECT  *
  3          FROM    sys.exu9tabc
  4          WHERE   BITAND(trigflag, 31) = trigflag
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 tables for incremental export
SQL> REM
SQL> REM Notes: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tabi AS
  2          SELECT  *
  3          FROM    sys.exu81tabi
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.col$ c$
  7                      WHERE   c$.obj# = objid AND
  8                              c$.type# = 208)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tabi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 tables for cumulative export:
SQL> REM
SQL> REM Notes: modified, last export was inc, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tabc AS
  2          SELECT  *
  3          FROM    sys.exu81tabc
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.col$ c$
  7                      WHERE   c$.obj# = objid AND
  8                              c$.type# = 208)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tabc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for all non-composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tbp (
  2                  objid, dobjid, bobjid, ownerid, pname, prowcnt, pblkcnt,
  3                  pavgrlen, pflags, partno, hiboundlen, hiboundval, tsname, tsno,
  4                  fileno, blockno, pctfree$, pctused$, initrans, maxtrans,
  5                  deflog, tsdeflog, blevel, leafcnt, distkey, lblkkey, dblkkey,
  6                  clufac, iflags) AS
  7          SELECT  o$.obj#, o$.dataobj#, tp$.bo#, o$.owner#, o$.subname,
  8                  NVL(tp$.rowcnt, -1), NVL(tp$.blkcnt, -1), NVL(tp$.avgrln, -1),
  9                  tp$.flags, tp$.part#, tp$.hiboundlen, tp$.hiboundval, ts$.name,
 10                  tp$.ts#, tp$.file#, tp$.block#, MOD(tp$.pctfree$, 100),
 11                  tp$.pctused$, tp$.initrans, tp$.maxtrans,
 12                  DECODE(BITAND(tp$.flags, 4), 4, 1, 0), ts$.dflogging, -1, -1,
 13                  -1, -1, -1, -1, -1
 14          FROM    sys.obj$ o$, sys.tabpart$ tp$, sys.ts$ ts$
 15          WHERE   o$.type# = 19 AND
 16                  tp$.obj# = o$.obj# AND
 17                  ts$.ts# = tp$.ts#
 18  /

View created.

SQL> GRANT SELECT ON sys.exu8tbp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for current user's non_composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tbpu AS
  2          SELECT  *
  3          FROM    sys.exu8tbp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8tbpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartition description for all composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbsp (
  2                  objid, dobjid, pobjid, ownerid, subpartno, subpname, tsname,
  3                  fileno, blockno, tsno, prowcnt, pblkcnt, pavgrlen, blevel,
  4                  leafcnt, distkey, lblkkey, dblkkey, clufac, hiboundlen,
  5                  hiboundval) AS
  6          SELECT  o.obj#, o.dataobj#, sp.pobj#, o.owner#, sp.subpart#, o.subname,
  7                  ts.name, sp.file#, sp.block#, sp.ts#, NVL(sp.rowcnt, -1),
  8                  NVL(sp.blkcnt, -1), NVL(sp.avgrln, -1), -1, -1, -1, -1, -1, -1,
  9                  sp.hiboundlen, sp.hiboundval
 10          FROM    sys.obj$ o, sys.tabsubpart$ sp, sys.ts$ ts
 11          WHERE   o.type# = 34 AND
 12                  sp.obj# = o.obj# AND
 13                  ts.ts# = sp.ts#
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81tbsp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartition description for current user's composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbspu AS
  2          SELECT  *
  3          FROM    sys.exu81tbsp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tbspu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM composite partition description for all composite partitioned tables
SQL> REM
SQL> REM Notes: blocksize should always be non null
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tbcp (
  2                  objid, dobjid, bobjid, ownerid, compname, partno, hiboundlen,
  3                  hiboundval, prowcnt, pblkcnt, pavgrlen, tsname, pctfree$,
  4                  pctused$, initrans, maxtrans, iniexts, extsize, minexts,
  5                  maxexts, extpct, flists, freegrp, pcache, deflog, tsdeflog,
  6                  blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, blocksize,
  7                  hscompress) AS
  8          SELECT  o.obj#, o.dataobj#, cp.bo#, o.owner#, o.subname, cp.part#,
  9                  cp.hiboundlen, cp.hiboundval, NVL(cp.rowcnt, -1),
 10                  NVL(cp.blkcnt, -1), NVL(cp.avgrln, -1), ts.name,
 11                  MOD(cp.defpctfree, 100), cp.defpctused, cp.definitrans,
 12                  cp.defmaxtrans, NVL(cp.definiexts, 0), NVL(cp.defextsize, 0),
 13                  NVL(cp.defminexts, 0), NVL(cp.defmaxexts, 0),
 14                  NVL(cp.defextpct, -1), NVL(cp.deflists, 0),
 15                  NVL(cp.defgroups, 0),
 16                  DECODE(cp.defbufpool, 1, 'KEEP', 2, 'RECYCLE', NULL),
 17                  cp.deflogging, ts.dflogging, -1, -1, -1, -1, -1, -1,
 18                  NVL(ts.blocksize, 2048), cp.spare2
 19          FROM    sys.obj$ o, sys.tabcompart$ cp, sys.ts$ ts
 20          WHERE   cp.obj# = o.obj# AND
 21                  cp.defts# = ts.ts# (+)
 22  /

View created.

SQL> GRANT SELECT ON sys.exu9tbcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for current user's composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tbcpu AS
  2          SELECT  *
  3          FROM    sys.exu9tbcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9tbcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Pre V9.0 composite partition desc. adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbcp (
  2                  objid, dobjid, bobjid, ownerid, compname, partno, hiboundlen,
  3                  hiboundval, prowcnt, pblkcnt, pavgrlen, tsname, pctfree$,
  4                  pctused$, initrans, maxtrans, iniexts, extsize, minexts,
  5                  maxexts, extpct, flists, freegrp, pcache, deflog, tsdeflog,
  6                  blevel, leafcnt, distkey, lblkkey, dblkkey, clufac) AS
  7          SELECT  p.objid, p.dobjid, p.bobjid, p.ownerid, p.compname, p.partno,
  8                  p.hiboundlen, p.hiboundval, p.prowcnt, p.pblkcnt, p.pavgrlen,
  9                  p.tsname, p.pctfree$, p.pctused$, p.initrans, p.maxtrans,
 10                  CEIL(p.iniexts * (p.blocksize / (
 11                      SELECT  t$.blocksize
 12                      FROM    sys.ts$ t$
 13                      WHERE   t$.ts# = 0))),
 14                  CEIL(p.extsize * (p.blocksize / (
 15                      SELECT  t$.blocksize
 16                      FROM    sys.ts$ t$
 17                      WHERE   t$.ts# = 0))),
 18                  p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.pcache,
 19                  p.deflog, p.tsdeflog, p.blevel, p.leafcnt, p.distkey,
 20                  p.lblkkey, p.dblkkey, p.clufac
 21          FROM    sys.exu9tbcp p
 22  /

View created.

SQL> GRANT SELECT ON sys.exu81tbcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 cur user's comp. part. desc. adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbcpu AS
  2          SELECT  *
  3          FROM    sys.exu81tbcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tbcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.2 view for getting template subpartition information
SQL> REM
SQL> 
SQL> CREATE OR REPLACE VIEW exu92tsp (
  2                  objid, ownerid, spart_position, subpname, tsname, tsno,
  3                  flags, hiboundlen, hiboundval) AS
  4          SELECT  dsp.bo#, o.owner#, dsp.spart_position, dsp.spart_name,
  5                  ts.name, dsp.ts#, dsp.flags, dsp.hiboundlen,
  6                  dsp.hiboundval
  7          FROM    sys.defsubpart$ dsp, sys.obj$ o, sys.ts$ ts
  8          WHERE   dsp.bo# = o.obj# AND
  9                  dsp.ts# = ts.ts# (+) AND
 10                  (UID IN (0, o.owner#) OR
 11                   EXISTS (
 12                      SELECT  role
 13                      FROM    sys.session_roles
 14                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu92tsp TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.2 view for getting template subpartition information for lob columns
SQL> REM
SQL> 
SQL> CREATE OR REPLACE VIEW exu92tspl (
  2                  objid, ownerid, cname, spart_position, intcol#, lobspname,
  3                  tsname, tsno) AS
  4          SELECT  dspl.bo#, o.owner#, '"'||c.name||'"', dspl.spart_position,
  5                  dspl.intcol#, dspl.lob_spart_name, ts.name,
  6                  dspl.lob_spart_ts#
  7          FROM    sys.defsubpartlob$ dspl, sys.obj$ o, sys.ts$ ts, sys.col$ c
  8          WHERE   dspl.bo# = o.obj# AND
  9                  dspl.lob_spart_ts# = ts.ts# (+) AND
 10                  o.obj# = c.obj# AND
 11                  dspl.intcol# = c.col# AND
 12                  (UID IN (0, o.owner#) OR
 13                   EXISTS (
 14                      SELECT  role
 15                      FROM    sys.session_roles
 16                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 17  /

View created.

SQL> GRANT SELECT ON sys.exu92tspl TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get information about a nested table
SQL> REM
SQL> REM Note tempflags now deprecated
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ntb (
  2                  pobjid, objid, name, dobjid, owner, ownerid, tablespace, tsno,
  3                  fileno, blockno, audit$, comment$, clusterflag, mtime,
  4                  modified, pctfree$, pctused$, initrans, maxtrans, degree,
  5                  instances, cache, tempflags, property, deflog, tsdeflog, roid,
  6                  colprop, expname, rowcnt, blkcnt, avgrlen, tflags, ntcolflgs,
  7                  intcolid, objstatus, coltype)
  8        AS
  9          SELECT  nt$.obj#, o$.obj#, o$.name, o$.dataobj#, u$.name, o$.owner#,
 10                  ts$.name, t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
 11                  NVL(t$.bobj#, 0), o$.mtime,
 12                  DECODE(BITAND(t$.flags, 1), 1, 1, 0), MOD(t$.pctfree$, 100),
 13                  t$.pctused$, t$.initrans, t$.maxtrans, NVL(t$.degree, 1),
 14                  NVL(t$.instances, 1), DECODE(BITAND(t$.flags, 128), 128, 1, 0),
 15                  MOD(TRUNC(o$.flags/2), 2), t$.property,
 16                  DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
 17                  cl$.property,
 18                  DECODE(BITAND(cl$.property, 1), 1, a$.name, cl$.name),
 19                  NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
 20                  t$.flags, NVL(ct$.flags, 0), cl$.intcol#, o$.status,
 21                  cl$.type#
 22          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
 23                  sys.com$ c$, sys.ntab$ nt$, sys.col$ cl$, sys.attrcol$ a$,
 24                  sys.coltype$ ct$
 25          WHERE   t$.obj# = o$.obj# AND
 26                  t$.ts# = ts$.ts# AND
 27                  u$.user# = o$.owner# AND
 28                  o$.obj# = c$.obj#(+) AND
 29                  c$.col#(+) IS NULL AND
 30                  nt$.ntab# = o$.obj# AND
 31                  cl$.obj# = ct$.obj# (+) AND
 32                  cl$.intcol# = ct$.intcol# (+)  AND
 33                  nt$.obj# = cl$.obj# AND
 34                  nt$.intcol# = cl$.intcol# AND
 35                  cl$.obj# = a$.obj# (+) AND
 36                  cl$.intcol# = a$.intcol# (+) AND
 37                  BITAND(cl$.property, 32768) != 32768    /* not unused column */
 38  /

View created.

SQL> GRANT SELECT ON sys.exu8ntb TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8ntbu AS
  2          SELECT  *
  3          FROM    sys.exu8ntb
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ntbu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get tables that were included in an incremental/cumulative export that
SQL> REM have inner nested tables
SQL> REM
SQL> REM use for inc/cum when record = yes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tntic (
  2                  objid, ownerid, tname) AS
  3          SELECT  o$.obj#, o$.owner#, o$.name
  4          FROM    sys.obj$ o$, sys.tab$ t$
  5          WHERE   (o$.owner#, o$.name) IN (
  6                      SELECT  i$.owner#, i$.name      /* tables in this export */
  7                      FROM    sys.incexp i$, sys.incvid v$
  8                      WHERE   i$.expid > v$.expid AND
  9                              i$.type# = 2) AND
 10                  t$.obj# = o$.obj# AND
 11                  BITAND(t$.property, 4) = 4              /* has nested tables */
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8tntic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM use for inc when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tnti (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu9tabi                        /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9tnti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM use for cum when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tntc (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu9tabc                        /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9tntc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM use for inc when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tnti (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu81tabi                       /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu81tnti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM use for cum when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tntc (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu81tabc                       /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu81tntc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 use for inc when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tnti (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu8tabi                        /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8tnti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 use for cum when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tntc (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu8tabc                        /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8tntc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for all non_composite partitioned indexes
SQL> REM and index organized tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ixp (
  2                  objid, dobjid, bobjid, ownerid, pname, prowcnt, pblkcnt,
  3                  pavgrlen, pflags, partno, hiboundlen, hiboundval, tsname, tsno,
  4                  fileno, blockno, pctfree$, pctused$, initrans, maxtrans,
  5                  deflog, tsdeflog, blevel, leafcnt, distkey, lblkkey, dblkkey,
  6                  clufac, iflags) AS
  7          SELECT  o$.obj#, o$.dataobj#, ip$.bo#, o$.owner#, o$.subname,
  8                  NVL(ip$.rowcnt, -1),
  9                  NVL2((
 10                      SELECT  i$.bo#
 11                      FROM    sys.ind$ i$
 12                      WHERE   i$.type# = 4 AND
 13                              i$.obj# = ip$.bo#),
 14                      NVL(ip$.leafcnt, -1), -1),  /* leafcnt (blkcnt) if table */
 15                  NVL((
 16                      SELECT  tp$.avgrln
 17                      FROM    sys.tabpart$ tp$              /* avglen if table */
 18                      WHERE   tp$.part# = ip$.part# AND
 19                              tp$.bo# = (
 20                                  SELECT  i$.bo#
 21                                  FROM    sys.ind$ i$
 22                                  WHERE   i$.type# = 4 AND        /* iot - top */
 23                                          i$.obj# = ip$.bo#)), -1),
 24                  NVL2((
 25                      SELECT  i$.bo#
 26                      FROM    sys.ind$ i$              /* stats flags if table */
 27                      WHERE   i$.type# = 4 AND
 28                              i$.obj# = ip$.bo#),
 29                      ip$.flags, -1),
 30                  ip$.part#, ip$.hiboundlen, ip$.hiboundval, ts$.name, ip$.ts#,
 31                  ip$.file#, ip$.block#, MOD(ip$.pctfree$, 100), 0, ip$.initrans,
 32                  ip$.maxtrans, DECODE(BITAND(ip$.flags, 4), 4, 1, 0),
 33                  ts$.dflogging, NVL(ip$.blevel, -1), NVL(ip$.leafcnt, -1),
 34                  NVL(ip$.distkey, -1), NVL(ip$.lblkkey, -1),
 35                  NVL(ip$.dblkkey, -1), NVL(ip$.clufac, -1), ip$.flags
 36          FROM    sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$
 37          WHERE   o$.type# = 20 AND
 38                  ip$.obj# = o$.obj# AND
 39                  ts$.ts# = ip$.ts#
 40  /

View created.

SQL> GRANT SELECT ON sys.exu8ixp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for current user's non_composite partitioned indexes.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ixpu AS
  2          SELECT  *
  3          FROM    sys.exu8ixp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ixpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for all composite partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ixcp (
  2                  objid, dobjid, bobjid, ownerid, compname, partno, hiboundlen,
  3                  hiboundval, prowcnt, pblkcnt, pavgrlen, tsname, pctfree$,
  4                  pctused$, initrans, maxtrans, iniexts, extsize, minexts,
  5                  maxexts, extpct, flists, freegrp, pcache, deflog, tsdeflog,
  6                  blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, blocksize,
  7                  hscompress) AS
  8          SELECT  o.obj#, o.dataobj#, icp.bo#, o.owner#, o.subname, icp.part#,
  9                  icp.hiboundlen, icp.hiboundval, NVL(icp.rowcnt, -1), -1, -1,
 10                  ts.name, MOD(icp.defpctfree, 100), 0, icp.definitrans,
 11                  icp.defmaxtrans, NVL(icp.definiexts, 0),
 12                  NVL(icp.defextsize, 0), NVL(icp.defminexts, 0),
 13                  NVL(icp.defmaxexts, 0), NVL(icp.defextpct, -1),
 14                  NVL(icp.deflists, 0), NVL(icp.defgroups, 0),
 15                  DECODE(icp.defbufpool, 1, 'KEEP', 2, 'RECYCLE', NULL),
 16                  icp.deflogging, ts.dflogging, NVL(icp.blevel, -1),
 17                  NVL(icp.leafcnt, -1), NVL(icp.distkey, -1),
 18                  NVL(icp.lblkkey, -1), NVL(icp.dblkkey, -1),
 19                  NVL(icp.clufac, -1),
 20                  NVL(ts.blocksize, (
 21                      SELECT  t$.blocksize
 22                      FROM    sys.ts$ t$
 23                      WHERE   t$.ts# = (NVL((
 24                                  SELECT  i$.ts#
 25                                  FROM    sys.ind$ i$
 26                                  WHERE   i$.obj# = icp.bo# AND
 27                                          i$.type# != 8 AND
 28                                          i$.type# != 4 AND
 29                                          BITAND(i$.flags, 4096) = 0),
 30                                             0)))),
 31                  0
 32          FROM    sys.obj$ o, sys.indcompart$ icp, sys.ts$ ts
 33          WHERE   icp.obj# = o.obj# AND
 34                  icp.defts# = ts.ts# (+)
 35  /

View created.

SQL> GRANT SELECT ON sys.exu9ixcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for current user's composite partitioned indexes.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ixcpu AS
  2          SELECT  *
  3          FROM    sys.exu9ixcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9ixcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 composite partition desc. adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ixcp (
  2                  objid, dobjid, bobjid, ownerid, compname, partno, hiboundlen,
  3                  hiboundval, prowcnt, pblkcnt, pavgrlen, tsname, pctfree$,
  4                  pctused$, initrans, maxtrans, iniexts, extsize, minexts,
  5                  maxexts, extpct, flists, freegrp, pcache, deflog, tsdeflog,
  6                  blevel, leafcnt, distkey, lblkkey, dblkkey, clufac) AS
  7          SELECT  p.objid, p.dobjid, p.bobjid, p.ownerid, p.compname, p.partno,
  8                  p.hiboundlen, p.hiboundval, p.prowcnt, p.pblkcnt, p.pavgrlen,
  9                  p.tsname, p.pctfree$, p.pctused$, p.initrans, p.maxtrans,
 10                  CEIL(p.iniexts * (p.blocksize / (
 11                      SELECT  t$.blocksize
 12                      FROM    sys.ts$ t$
 13                      WHERE   t$.ts# = 0))),
 14                  CEIL(p.extsize * (p.blocksize / (
 15                      SELECT  t$.blocksize
 16                      FROM    sys.ts$ t$
 17                      WHERE   t$.ts# = 0))),
 18                  p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.pcache,
 19                  p.deflog, p.tsdeflog, p.blevel, p.leafcnt, p.distkey,
 20                  p.lblkkey, p.dblkkey, p.clufac
 21          FROM    sys.exu9ixcp p
 22  /

View created.

SQL> GRANT SELECT ON sys.exu81ixcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's comp. part. desc. adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ixcpu AS
  2          SELECT  *
  3          FROM    sys.exu81ixcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81ixcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartition description for all composite partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ixsp (
  2                  objid, dobjid, pobjid, ownerid, subpartno, subpname, tsname,
  3                  fileno, blockno, tsno, prowcnt, pblkcnt, pavgrlen, blevel,
  4                  leafcnt, distkey, lblkkey, dblkkey, clufac, hiboundlen,
  5                  hiboundval) AS
  6          SELECT  o.obj#, o.dataobj#, isp.pobj#, o.owner#, isp.subpart#,
  7                  o.subname, ts.name, isp.file#, isp.block#, isp.ts#,
  8                  NVL(isp.rowcnt, -1), -1, -1, NVL(isp.blevel, -1),
  9                  NVL(isp.leafcnt, -1), NVL(isp.distkey, -1),
 10                  NVL(isp.lblkkey, -1), NVL(isp.dblkkey, -1),
 11                  NVL(isp.clufac, -1), isp.hiboundlen, isp.hiboundval
 12          FROM    sys.obj$ o, sys.indsubpart$ isp, sys.ts$ ts
 13          WHERE   o.type# = 35 AND
 14                  isp.obj# = o.obj# AND
 15                  ts.ts# = isp.ts#
 16  /

View created.

SQL> GRANT SELECT ON sys.exu81ixsp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartition description for current user's composite partitioned indexes.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ixspu AS
  2          SELECT  *
  3          FROM    sys.exu81ixsp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81ixspu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partitioning key columns for all partitioned tables. NOTE: property,
SQL> REM function, funclen added in anticipation of support for virtual cols. as
SQL> REM partitioning keys and to keep table and index part. views in synch.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pok (
  2                  objid, ownerid, posno, name, property, function, funclen) AS
  3          SELECT  o$.obj#, o$.owner#, p$.pos#,
  4                  DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
  5                  c$.property, c$.default$, c$.deflength
  6          FROM    sys.obj$ o$, sys.partcol$ p$, sys.col$ c$, sys.attrcol$ a$
  7          WHERE   o$.obj# = c$.obj# AND
  8                  o$.obj# = p$.obj# AND
  9                  p$.intcol# = c$.intcol# AND
 10                  p$.obj# = a$.obj# (+) AND
 11                  p$.intcol# = a$.intcol# (+)
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8pok TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partitioning key columns for current user's partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8poku AS
  2          SELECT  *
  3          FROM    sys.exu8pok
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8poku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartitioning key columns for all composite partitioned (R+H) tables.
SQL> REM NOTE: property, function, funclen added in anticipation of support for
SQL> REM function, funclen added in anticipation of support for virtual cols. as
SQL> REM partitioning keys and to keep table and index part. views in synch.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81spok (
  2                  objid, ownerid, posno, name, property, function, funclen) AS
  3          SELECT  o.obj#, o.owner#, spc.pos#,
  4                  DECODE(BITAND(c.property, 1), 1, a.name, c.name),
  5                  c.property, c.default$, c.deflength
  6          FROM    sys.obj$ o, sys.subpartcol$ spc, sys.col$ c, sys.attrcol$ a
  7          WHERE   o.obj# = c.obj# AND
  8                  o.obj# = spc.obj# AND
  9                  spc.intcol# = c.intcol# AND
 10                  spc.obj# = a.obj# (+) AND
 11                  spc.intcol# = a.intcol# (+)
 12  /

View created.

SQL> GRANT SELECT ON sys.exu81spok TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartitioning key columns for current user's composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81spoku AS
  2          SELECT  *
  3          FROM    sys.exu81spok
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81spoku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partitioning key columns for all partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8poki (
  2                  objid, ownerid, posno, name, property, function, funclen) AS
  3          SELECT  o.obj#, o.owner#, p.pos#,
  4                  DECODE(BITAND(c.property, 1), 1, a.name, c.name),
  5                  c.property, c.default$, c.deflength
  6          FROM    sys.obj$ o, sys.partcol$ p, sys.ind$ i, sys.col$ c,
  7                  sys.attrcol$ a
  8          WHERE   o.obj# = p.obj# AND
  9                  i.obj# = o.obj# AND
 10                  i.bo# = c.obj# AND
 11                  p.intcol# = c.intcol# AND
 12                  c.obj# = a.obj# (+) AND
 13                  c.intcol# = a.intcol# (+)
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8poki TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partitioning key columns for current user's partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pokiu AS
  2          SELECT  *
  3          FROM    sys.exu8poki
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8pokiu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartitioning key columns for all composite partitioned indexes
SQL> REM not used in 81
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81spoki (
  2                  objid, ownerid, posno, name, property, function, funclen) AS
  3          SELECT  o.obj#, o.owner#, sp.pos#, c.name, c.property, c.default$,
  4                  c.deflength
  5          FROM    sys.obj$ o, sys.subpartcol$ sp, sys.ind$ i, sys.col$ c
  6          WHERE   o.obj# = sp.obj# AND
  7                  i.obj# = o.obj# AND
  8                  i.bo# = c.obj# AND
  9                  sp.intcol# = c.intcol#
 10  /

View created.

SQL> GRANT SELECT ON sys.exu81spoki TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartitioning key columns for current user's composite
SQL> REM partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81spokiu AS
  2          SELECT  *
  3          FROM    sys.exu81spoki
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81spokiu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM table/index level storage definition for all partitioned tables/indexes
SQL> REM description on partitioned object
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pds (
  2                  objid, type, ownerid, ptype, subptype, pflag, pcnt, pkcnt,
  3                  pctfree$, pctused$, initrans, maxtrans, iniexts, extsize,
  4                  minexts, maxexts, extpct, flists, freegrp, tsname, deflog,
  5                  pcache, blocksize, hscompress, defsubpcnt) AS
  6          SELECT  o$.obj#, o$.type#, o$.owner#, po$.parttype,
  7                  MOD(po$.spare2, 256), NVL(po$.flags, 0), po$.partcnt,
  8                  po$.partkeycols, MOD(po$.defpctfree, 100), po$.defpctused,
  9                  po$.definitrans, po$.defmaxtrans, po$.deftiniexts,
 10                  po$.defextsize, po$.defminexts, po$.defmaxexts, po$.defextpct,
 11                  po$.deflists, po$.defgroups, ts$.name, po$.deflogging,
 12                  DECODE(po$.spare1, 1, 'KEEP', 2, 'RECYCLE', NULL),
 13                  NVL(ts$.blocksize, 2048),      /* non null for table/indexes */
 14                  (po$.spare2/4294967296),  /* divide by ^x80000000 for byte 4 */
 15                  MOD(TRUNC(po$.spare2/65536), 65536)
 16          FROM    sys.partobj$ po$, sys.obj$ o$, sys.ts$ ts$
 17          WHERE   po$.defts# = ts$.ts# (+) AND
 18                  po$.obj# = o$.obj#
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9pds TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's table/index level storage definition partitioned tables/indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pdsu AS
  2          SELECT  *
  3          FROM    sys.exu9pds
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9pdsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 part. table/index level storage def. adjusted for TS specific
SQL> REM blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pds (
  2                  objid, type, ownerid, ptype, subptype, pflag, pcnt, pkcnt,
  3                  pctfree$, pctused$, initrans, maxtrans, iniexts, extsize,
  4                  minexts, maxexts, extpct, flists, freegrp, tsname, deflog,
  5                  pcache) AS
  6          SELECT  p.objid, p.type, p.ownerid, p.ptype, p.subptype, p.pflag,
  7                  p.pcnt, p.pkcnt, p.pctfree$, p.pctused$, p.initrans,
  8                  p.maxtrans,
  9                  NVL(CEIL(p.iniexts * (p.blocksize / (
 10                      SELECT  t$.blocksize
 11                      FROM    sys.ts$ t$
 12                      WHERE   t$.ts# = 0))),
 13                      NULL),
 14                  NVL(CEIL(p.extsize * (p.blocksize / (
 15                      SELECT  t$.blocksize
 16                      FROM    sys.ts$ t$
 17                      WHERE   t$.ts# = 0))),
 18                      NULL),
 19                  p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.tsname,
 20                  p.deflog, p.pcache
 21          FROM    sys.exu9pds p
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8pds TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's part. table/index level storage def. adjusted for
SQL> REM TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pdsu AS
  2          SELECT  *
  3          FROM    sys.exu8pds
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8pdsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM not null constraints on columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8colnn (
  2                  tobjid, intcolid, conname, isnull, enabled, defer) AS
  3          SELECT  cc$.obj#, cc$.intcol#, con$.name, 1, NVL(cd$.enabled, 0),
  4                  NVL(cd$.defer, 0)
  5          FROM    sys.con$ con$, sys.cdef$ cd$, sys.ccol$ cc$
  6          WHERE   cc$.con# = cd$.con# AND
  7                  cd$.con# = con$.con# AND
  8                  cd$.type# IN (7, 11)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8colnn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8col_temp (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  colprop, comment$, dfltlen, enabled, defer, flags, charsetid,
  5                  charsetform, fsprecision, lfprecision, charlen) AS
  6          SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
  7                  c$.precision#, c$.scale, c$.type#, NVL(cn.isnull, 0),
  8                  cn.conname, c$.col#, c$.intcol#, c$.segcol#, c$.property,
  9                  com$.comment$, NVL(c$.deflength, 0), cn.enabled, cn.defer,
 10                  NVL(o$.flags, 0), NVL(c$.charsetid, 0), NVL(c$.charsetform, 0),
 11                  c$.scale, c$.precision#, c$.spare3
 12          FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$,
 13                  sys.exu8colnn cn
 14          WHERE   c$.obj# = o$.obj# AND
 15                  o$.owner# = u$.user# AND
 16                  c$.obj# = com$.obj#(+) AND
 17                  c$.intcol# = com$.col#(+) AND
 18                  c$.obj# = cn.tobjid AND
 19                  c$.intcol# = cn.intcolid
 20        UNION ALL
 21          SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
 22                  c$.precision#, c$.scale, c$.type#, 0, NULL, c$.col#,
 23                  c$.intcol#, c$.segcol#, c$.property, com$.comment$,
 24                  NVL(c$.deflength, 0), 0, 0, NVL(o$.flags, 0),
 25                  NVL(c$.charsetid, 0), NVL(c$.charsetform, 0), c$.scale,
 26                  c$.precision#, c$.spare3
 27          FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$
 28          WHERE   c$.obj# = o$.obj# AND
 29                  o$.owner# = u$.user# AND
 30                  c$.obj# = com$.obj#(+) AND
 31                  c$.intcol# = com$.col#(+) AND
 32                  BITAND(c$.property, 32768) != 32768 AND /* not unused column */
 33                  NOT EXISTS (
 34                      SELECT  NULL
 35                      FROM    sys.exu8colnn cn
 36                      WHERE   c$.obj# = cn.tobjid AND
 37                              c$.intcol# = cn.intcolid)
 38  /

View created.

SQL> GRANT SELECT ON sys.exu8col_temp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8col (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, type, isnull, conname, colid, intcolid,
  9                  segcolid, comment$, default$, dfltlen, enabled, defer,
 10                  v$.flags, colprop, '', '', v$.charsetid, v$.charsetform,
 11                  v$.fsprecision, v$.lfprecision, v$.charlen,  NVL(ct$.flags, 0)
 12          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$
 13          WHERE   c$.obj# = v$.tobjid AND
 14                  c$.intcol# = v$.intcolid AND
 15                  v$.tobjid = ct$.obj# (+) AND
 16                  (BITAND(v$.colprop, 32) != 32 OR      /* not a hidden column */
 17                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 18                   BITAND(v$.colprop, 4194304) = 4194304) /* RLS hidden column */
 19  /

View created.

SQL> GRANT SELECT ON sys.exu8col TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8colu AS
  2          SELECT  *
  3          FROM    sys.exu8col
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8colu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8col_temp_tts_unused_col (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  colprop, comment$, dfltlen, enabled, defer, flags, charsetid,
  5                  charsetform, fsprecision, lfprecision, charlen) AS
  6          SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
  7                  c$.precision#, c$.scale, c$.type#, NVL(cn.isnull, 0),
  8                  cn.conname, c$.col#, c$.intcol#, c$.segcol#, c$.property,
  9                  com$.comment$, NVL(c$.deflength, 0), cn.enabled, cn.defer,
 10                  NVL(o$.flags, 0), NVL(c$.charsetid, 0), NVL(c$.charsetform, 0),
 11                  c$.scale, c$.precision#, c$.spare3
 12          FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$,
 13                  sys.exu8colnn cn
 14          WHERE   c$.obj# = o$.obj# AND
 15                  o$.owner# = u$.user# AND
 16                  c$.obj# = com$.obj#(+) AND
 17                  c$.segcol# = com$.col#(+) AND
 18                  c$.obj# = cn.tobjid AND
 19                  c$.intcol# = cn.intcolid
 20        UNION ALL
 21          SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
 22                  c$.precision#, c$.scale, c$.type#, 0, NULL, c$.col#,
 23                  c$.intcol#, c$.segcol#, c$.property, com$.comment$,
 24                  NVL(c$.deflength, 0), 0, 0, NVL(o$.flags, 0),
 25                  NVL(c$.charsetid, 0), NVL(c$.charsetform, 0), c$.scale,
 26                  c$.precision#, c$.spare3
 27          FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$
 28          WHERE   c$.obj# = o$.obj# AND
 29                  o$.owner# = u$.user# AND
 30                  c$.obj# = com$.obj#(+) AND
 31                  c$.segcol# = com$.col#(+) AND
 32                  NOT EXISTS (
 33                      SELECT  NULL
 34                      FROM    sys.exu8colnn cn
 35                      WHERE   c$.obj# = cn.tobjid AND
 36                              c$.intcol# = cn.intcolid)
 37  /

View created.

SQL> GRANT SELECT ON sys.exu8col_temp_tts_unused_col TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8col_tts_unused_col (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, type, isnull, conname, colid, intcolid,
  9                  segcolid, comment$, default$, dfltlen, enabled, defer,
 10                  v$.flags, colprop, '', '', v$.charsetid, v$.charsetform,
 11                  v$.fsprecision, v$.lfprecision, v$.charlen,  NVL(ct$.flags, 0)
 12          FROM    sys.exu8col_temp_tts_unused_col v$, sys.col$ c$,
 13                  sys.coltype$ ct$
 14          WHERE   c$.obj# = v$.tobjid AND
 15                  c$.intcol# = v$.intcolid AND
 16                  v$.tobjid = ct$.obj# (+)  AND
 17                  (BITAND(v$.colprop,32768) = 32768 OR        /* unused column */
 18                   BITAND(v$.colprop, 32) != 32 OR      /* not a hidden column */
 19                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 20                   BITAND(v$.colprop, 4194304) = 4194304) /* RLS hidden column */
 21  /

View created.

SQL> GRANT SELECT ON sys.exu8col_tts_unused_col TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access columns in tables containing object oriented columns
SQL> REM in normal tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8coo (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name, v$.charsetid, v$.charsetform, v$.fsprecision,
 12                  v$.lfprecision, v$.charlen, NVL(ct$.flags,0)
 13          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 14                  sys.obj$ o$, sys.user$ u$
 15          WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
 16                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 17                   BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
 18                  v$.tobjid = c$.obj# (+) AND
 19                  v$.intcolid = c$.intcol# (+) AND
 20                  v$.tobjid = ct$.obj# (+) AND
 21                  v$.intcolid = ct$.intcol# (+) AND
 22                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 23                  NVL(o$.owner#, -1) = u$.user# (+) AND
 24                  NVL(o$.type#,13) = 13
 25  /

View created.

SQL> GRANT SELECT ON sys.exu8coo TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8coou AS
  2          SELECT  *
  3          FROM    sys.exu8coo
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8coou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access columns in extent tables, extent views and inner nested
SQL> REM tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8coe (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, colclass, charsetid, charsetform,
  6                  fsprecision, lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name,
 12                  DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
 13                          'SYS_NC_ROWINFO$', 3, 100),
 14                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 15                  v$.charlen, NVL(ct$.flags, 0)
 16          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 17                  sys.obj$ o$, sys.user$ u$
 18          WHERE   c$.obj# = v$.tobjid AND
 19                  c$.intcol# = v$.intcolid AND
 20                  (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
 21                   BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
 22                   BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
 23                  c$.obj# = ct$.obj# (+) AND
 24                  c$.intcol# = ct$.intcol# (+) AND
 25                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 26                  NVL(o$.owner#, -1) = u$.user# (+) AND
 27                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 28  /

View created.

SQL> GRANT SELECT ON sys.exu8coe TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8coeu AS
  2          SELECT  *
  3          FROM    sys.exu8coe
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8coeu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access columns in extent tables, extent views and inner nested
SQL> REM tables (v9.2+ with optional type synonyms)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coe (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, colclass, charsetid, charsetform,
  6                  fsprecision, lfprecision, charlen, tflags, typesyn) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name,
 12                  DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
 13                          'SYS_NC_ROWINFO$', 3, 100),
 14                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 15                  v$.charlen, NVL(ct$.flags, 0), s$.name
 16          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 17                  sys.obj$ o$, sys.user$ u$, sys.obj$ s$
 18          WHERE   c$.obj# = v$.tobjid AND
 19                  c$.intcol# = v$.intcolid AND
 20                  (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
 21                   BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
 22                   BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
 23                  c$.obj# = ct$.obj# (+) AND
 24                  c$.intcol# = ct$.intcol# (+) AND
 25                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 26                  NVL(o$.owner#, -1) = u$.user# (+) AND
 27                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 28                  AND ct$.synobj# IS NOT NULL AND /* has type synonym */
 29                  ct$.synobj# = s$.obj#
 30        UNION ALL
 31          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
 32                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
 33                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 34                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 35                  o$.name, u$.name,
 36                  DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
 37                          'SYS_NC_ROWINFO$', 3, 100),
 38                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 39                  v$.charlen, NVL(ct$.flags, 0), NULL
 40          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 41                  sys.obj$ o$, sys.user$ u$
 42          WHERE   c$.obj# = v$.tobjid AND
 43                  c$.intcol# = v$.intcolid AND
 44                  (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
 45                   BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
 46                   BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
 47                  c$.obj# = ct$.obj# (+) AND
 48                  c$.intcol# = ct$.intcol# (+) AND
 49                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 50                  NVL(o$.owner#, -1) = u$.user# (+) AND
 51                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 52                  AND ct$.synobj# IS NULL /* does not have type synonym */
 53  /

View created.

SQL> GRANT SELECT ON sys.exu9coe TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coeu AS
  2          SELECT  *
  3          FROM    sys.exu9coe
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9coeu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Extention of exu9coe to include 'normal' columns that may have
SQL> REM default values.  The corrisponding code in exp only uses that column
SQL> REM information when generating default statements for the object table.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10coe (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, colclass, charsetid, charsetform,
  6                  fsprecision, lfprecision, charlen, tflags, typesyn) AS
  7          SELECT  *
  8          FROM    sys.exu9coe
  9        UNION ALL
 10          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
 11                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
 12                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 13                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 14                  o$.name, u$.name,
 15                  DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
 16                          'SYS_NC_ROWINFO$', 3, 100),
 17                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 18                  v$.charlen, NVL(ct$.flags, 0), NULL
 19          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 20                  sys.obj$ o$, sys.user$ u$
 21          WHERE   c$.obj# = v$.tobjid AND
 22                  c$.intcol# = v$.intcolid AND
 23                  c$.intcol# = ct$.intcol# (+) AND
 24                  (BITAND(v$.colprop, 32)      != 32 OR          /* not hidden */
 25                   BITAND(v$.colprop, 1048608) = 1048608 OR  /* snapsht hidden */
 26                   BITAND(v$.colprop, 4194304) = 4194304) AND    /* RLS Hidden */
 27                  c$.obj# = ct$.obj# (+) AND
 28                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 29                  NVL(o$.owner#, -1) = u$.user# (+) AND
 30                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 31  /

View created.

SQL> GRANT SELECT ON sys.exu10coe TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10coeu AS
  2          SELECT  *
  3          FROM    sys.exu10coe
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10coeu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access columns in scalar inner nested tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8csn (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, colclass, charsetid, charsetform,
  6                  fsprecision, lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name,
 12                  DECODE (v$.name, 'NESTED_TABLE_ID', 2, 'COLUMN_VALUE', 3, 100),
 13                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 14                  v$.charlen, NVL(ct$.flags, 0)
 15          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 16                  sys.obj$ o$, sys.user$ u$
 17          WHERE   c$.obj# = v$.tobjid AND
 18                  c$.intcol# = v$.intcolid AND
 19                  c$.obj# = ct$.obj# (+) AND
 20                  c$.intcol# = ct$.intcol# (+) AND
 21                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 22                  NVL(o$.owner#, -1) = u$.user# (+) AND
 23                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 24  /

View created.

SQL> GRANT SELECT ON sys.exu8csn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8csnu AS
  2          SELECT  *
  3          FROM    sys.exu8csn
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8csnu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.0+ version of column views for TYPE SYNONYM support
SQL> REM
SQL> REM view to access columns in tables containing object oriented columns
SQL> REM in normal tables returning synonym of type if any was used
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coo (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags, typesyn) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name, v$.charsetid, v$.charsetform, v$.fsprecision,
 12                  v$.lfprecision, v$.charlen, NVL(ct$.flags,0), NULL
 13          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 14                  sys.obj$ o$, sys.user$ u$
 15          WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
 16                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 17                   BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
 18                  v$.tobjid = c$.obj# (+) AND
 19                  v$.intcolid = c$.intcol# (+) AND
 20                  v$.tobjid = ct$.obj# (+) AND
 21                  v$.intcolid = ct$.intcol# (+) AND
 22                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 23                  NVL(o$.owner#, -1) = u$.user# (+) AND
 24                  NVL(o$.type#,13) = 13 AND
 25                  ct$.synobj# IS NULL
 26        UNION ALL
 27          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
 28                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
 29                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 30                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 31                  o$.name, u$.name, v$.charsetid, v$.charsetform,
 32                  v$.fsprecision, v$.lfprecision, v$.charlen, NVL(ct$.flags,0),
 33                  so$.name
 34          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 35                  sys.obj$ o$, sys.user$ u$, sys.obj$ so$
 36          WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
 37                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 38                   BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
 39                  v$.tobjid = c$.obj# (+) AND
 40                  v$.intcolid = c$.intcol# (+) AND
 41                  v$.tobjid = ct$.obj# (+) AND
 42                  v$.intcolid = ct$.intcol# (+) AND
 43                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 44                  NVL(o$.owner#, -1) = u$.user# (+) AND
 45                  NVL(o$.type#,13) = 13 AND so$.obj# = ct$.synobj#
 46  /

View created.

SQL> GRANT SELECT ON sys.exu9coo TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 10.2+ version of column views for TTS mode
SQL> REM
SQL> REM view to include unused columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coo_tts_unused_col (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags, typesyn) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name, v$.charsetid, v$.charsetform, v$.fsprecision,
 12                  v$.lfprecision, v$.charlen, NVL(ct$.flags,0), NULL
 13          FROM    sys.exu8col_temp_tts_unused_col v$, sys.col$ c$, sys.coltype$ ct$,
 14                  sys.obj$ o$, sys.user$ u$
 15          WHERE   ((BITAND(v$.colprop, 32768) = 32768 AND /* unused col */
 16                    BITAND(v$.colprop, 1) != 1) OR        /* NOT ADT attr column */
 17                   (BITAND(v$.colprop, 32) != 32 OR       /* not a hidden column */
 18                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 19                   BITAND (v$.colprop, 4194304) = 4194304)) AND/* RLS hidden col*/
 20                  v$.tobjid = c$.obj# (+) AND
 21                  v$.intcolid = c$.intcol# (+) AND
 22                  v$.tobjid = ct$.obj# (+) AND
 23                  v$.intcolid = ct$.intcol# (+) AND
 24                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 25                  NVL(o$.owner#, -1) = u$.user# (+) AND
 26                  NVL(o$.type#,13) = 13 AND
 27                  ct$.synobj# IS NULL
 28        UNION ALL
 29          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
 30                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
 31                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 32                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 33                  o$.name, u$.name, v$.charsetid, v$.charsetform,
 34                  v$.fsprecision, v$.lfprecision, v$.charlen, NVL(ct$.flags,0),
 35                  so$.name
 36          FROM    sys.exu8col_temp_tts_unused_col v$, sys.col$ c$, sys.coltype$ ct$,
 37                  sys.obj$ o$, sys.user$ u$, sys.obj$ so$
 38          WHERE   ((BITAND(v$.colprop, 32768) = 32768 AND /* unused col */
 39                    BITAND(v$.colprop, 1) != 1) OR        /* NOT ADT attr column */
 40                  (BITAND(v$.colprop, 32) != 32 OR        /* not a hidden column */
 41                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 42                   BITAND (v$.colprop, 4194304) = 4194304)) AND/* RLS hidden col*/
 43                  v$.tobjid = c$.obj# (+) AND
 44                  v$.intcolid = c$.intcol# (+) AND
 45                  v$.tobjid = ct$.obj# (+) AND
 46                  v$.intcolid = ct$.intcol# (+) AND
 47                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 48                  NVL(o$.owner#, -1) = u$.user# (+) AND
 49                  NVL(o$.type#,13) = 13 AND so$.obj# = ct$.synobj#
 50  /

View created.

SQL> GRANT SELECT ON sys.exu9coo_tts_unused_col TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coou AS
  2          SELECT  *
  3          FROM    sys.exu9coo
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9coou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access column comments for extent table, inner nested tables
SQL> REM and extent views
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cmt (
  2                  userid, objid, colno, colname, cmnt) AS
  3          SELECT  o$.owner#, cm$.obj#, cm$.col#, c$.name, cm$.comment$
  4          FROM    sys.com$ cm$, sys.obj$ o$, sys.col$ c$
  5          WHERE   o$.obj# = cm$.obj# AND
  6                  c$.obj# = cm$.obj# AND
  7                  c$.intcol# = cm$.col#
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8cmt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8cmtu AS
  2          SELECT  *
  3          FROM    sys.exu8cmt
  4          WHERE   userid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8cmtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM analyze statistics for columns (except for samples)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8asc (
  2                  tobjid, pobjid, townerid, colname, intcol, distcount, lowval,
  3                  hival, density, nullcount, avgcln, cflags) AS
  4          SELECT  c$.obj#, hh$.obj#, o$.owner#, c$.name, hh$.intcol#,
  5                  hh$.distcnt, hh$.lowval, hh$.hival, hh$.density, hh$.null_cnt,
  6                  hh$.avgcln, hh$.spare2
  7          FROM    sys.hist_head$ hh$, sys.obj$ o$, sys.obj$ ot$, sys.col$ c$
  8          WHERE   hh$.obj# = o$.obj# AND
  9                  c$.obj# = ot$.obj# AND
 10                  o$.owner# = ot$.owner# AND
 11                  hh$.intcol# = c$.intcol#
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8asc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8ascu AS
  2          SELECT  *
  3          FROM    sys.exu8asc
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ascu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM analyze statistics for columns (except for samples) v10
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10asc (
  2                  tobjid, pobjid, townerid, colname, intcol, distcount, lowval,
  3                  hival, density, nullcount, avgcln, cflags, property) AS
  4          SELECT  c$.obj#, hh$.obj#, o$.owner#, REPLACE(c$.name, '''', ''''''),
  5                  hh$.intcol#,
  6                  hh$.distcnt, hh$.lowval, hh$.hival, hh$.density, hh$.null_cnt,
  7                  hh$.avgcln, hh$.spare2, c$.property
  8          FROM    sys.hist_head$ hh$, sys.obj$ o$, sys.obj$ ot$, sys.col$ c$
  9          WHERE   hh$.obj# = o$.obj# AND
 10                  c$.obj# = ot$.obj# AND
 11                  o$.owner# = ot$.owner# AND
 12                  hh$.intcol# = c$.intcol#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu10asc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10ascu AS
  2          SELECT  *
  3          FROM    sys.exu10asc
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10ascu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM histogram samples for analyze statistics
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8hst (
  2                  pobjid, townerid, intcol, bucket, endpthash, endptval) AS
  3          SELECT  h$.obj#, o$.owner#, h$.intcol#, h$.bucket, h$.endpoint,
  4                  h$.epvalue
  5          FROM    sys.histgrm$ h$, sys.obj$ o$
  6          WHERE   h$.obj# = o$.obj#
  7        UNION ALL
  8          SELECT  h$.obj#, o$.owner#, h$.intcol#, 0, h$.minimum, NULL
  9          FROM    sys.hist_head$ h$, sys.obj$ o$
 10          WHERE   h$.obj# = o$.obj# AND
 11                  h$.bucket_cnt = 1
 12        UNION ALL
 13          SELECT  h$.obj#, o$.owner#, h$.intcol#, 1, h$.maximum, NULL
 14          FROM    sys.hist_head$ h$, sys.obj$ o$
 15          WHERE   h$.obj# = o$.obj# AND
 16                  h$.bucket_cnt = 1
 17  /

View created.

SQL> GRANT SELECT ON sys.exu8hst TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8hstu AS
  2          SELECT  *
  3          FROM    sys.exu8hst
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8hstu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all columns for index
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ico (
  2                  tobjid, towner, townerid, tname, name, btname, colid, colnum,
  3                  property, bobjid, function, funclen) AS
  4          SELECT  io$.obj#, u$.name, io$.owner#, io$.name,
  5                  DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name), to$.name,
  6                  ic$.pos#,
  7                  DECODE(BITAND(i$.property, 1024), 0, i$.cols, i$.intcols),
  8                  c$.property, ic$.bo#, c$.default$, c$.deflength
  9          FROM    sys.col$ c$, sys.icol$ ic$, sys.obj$ io$, sys.user$ u$,
 10                  sys.attrcol$ a$, sys.obj$ to$, sys.ind$ i$
 11          WHERE   c$.obj# = ic$.bo# AND
 12                  ((BITAND(i$.property, 1024) = 1024 AND
 13                    c$.intcol# = ic$.spare2) OR
 14                   ((NOT (BITAND(i$.property, 1024) = 1024)) AND
 15                   c$.intcol# = ic$.intcol#)) AND
 16                  ic$.obj# = io$.obj# AND
 17                  io$.owner# = u$.user# AND
 18                  i$.bo# = to$.obj# AND
 19                  i$.obj# = io$.obj# AND
 20                  c$.obj# = a$.obj# (+) AND
 21                  c$.intcol# = a$.intcol# (+) AND
 22                  (UID = 0 OR (UID = io$.owner# AND UID = to$.owner#) OR
 23                   EXISTS (
 24                      SELECT  role
 25                      FROM    sys.session_roles
 26                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 27  /

View created.

SQL> GRANT SELECT ON sys.exu8ico TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's index columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8icou AS
  2          SELECT  *
  3          FROM    sys.exu8ico
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8icou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM FROM tables for bitmap join index
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9bjf (
  2                  iobjid, tabname, towner, tobjid) AS
  3          SELECT  io$.obj#, to$.name, u$.name, to$.obj#
  4          FROM    sys.jijoin$ ji$, sys.obj$ to$, sys.user$ u$, sys.obj$ io$
  5          WHERE   to$.obj# IN (ji$.tab1obj#, ji$.tab2obj#) AND
  6                  to$.owner# = u$.user# AND
  7                  ji$.obj# = io$.obj# AND
  8                  (UID IN (0, io$.owner#) OR
  9                   EXISTS (
 10                      SELECT  role
 11                      FROM    sys.session_roles
 12                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 13          GROUP BY io$.obj#, to$.name, u$.name, to$.obj#
 14  /

View created.

SQL> GRANT SELECT ON sys.exu9bjf TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Equijoin list for bitmap join index
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9bjw (
  2                  iobjid, col1name, t1objid, col2name, t2objid) AS
  3          SELECT  ji$.obj#, c1$.name, ji$.tab1obj#, c2$.name, ji$.tab2obj#
  4          FROM    sys.jijoin$ ji$, sys.col$ c1$, sys.col$ c2$, sys.obj$ io$
  5          WHERE   ji$.tab1col# = c1$.intcol# AND
  6                  ji$.tab1obj# = c1$.obj# AND
  7                  ji$.tab2col# = c2$.intcol# AND
  8                  ji$.tab2obj# = c2$.obj# AND
  9                  ji$.obj# = io$.obj# AND
 10                  (UID IN (0, io$.owner#) OR
 11                   EXISTS (
 12                      SELECT  role
 13                      FROM    sys.session_roles
 14                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9bjw TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all users' default roles
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dfr (
  2                  name, userid, role, roleid) AS
  3          SELECT  u$.name, u$.user#, u1$.name, u1$.user#
  4          FROM    sys.user$ u$, sys.user$ u1$, sys.defrole$ d$
  5          WHERE   u$.user# = d$.user# AND
  6                  u1$.user# = d$.role#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8dfr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all roles - enumerate all roles
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rol (
  2                  role, password) AS
  3          SELECT  name, password
  4          FROM    sys.user$
  5          WHERE   type# = 0 AND
  6                  name NOT IN ('CONNECT', 'RESOURCE', 'DBA', 'PUBLIC',
  7                               '_NEXT_USER', 'EXP_FULL_DATABASE',
  8                               'IMP_FULL_DATABASE')
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8rol TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all role grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rlg (
  2                  grantee, granteeid, role, roleid, admin, sequence) AS
  3          SELECT  u1$.name, u1$.user#, u2$.name, u2$.user#, NVL(g$.option$, 0),
  4                  g$.sequence#
  5          FROM    sys.user$ u1$, sys.user$ u2$, sys.sysauth$ g$
  6          WHERE   u1$.user# = g$.grantee# AND
  7                  u2$.user# = g$.privilege# AND
  8                  g$.privilege# > 0 AND
  9                  u1$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 10                                  'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
 11                                  'DIP',     'DMSYS', 'DBSNMP', 'EXFSYS',
 12                                  'WMSYS','ORACLE_OCM')
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8rlg TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all system privs, type is 1 for user, 0 for role
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8spv (
  2                  grantee, granteeid, priv, wgo, sequence) AS
  3          SELECT  u1$.name, u1$.user#, m$.name, NVL(a$.option$, 0), a$.sequence#
  4          FROM    sys.sysauth$ a$, sys.system_privilege_map m$, sys.user$ u1$
  5          WHERE   a$.grantee# = u1$.user# AND
  6                  a$.privilege# = m$.privilege AND
  7                  BITAND(m$.property, 1) != 1 AND
  8                  u1$.name NOT IN ('CONNECT', 'RESOURCE', 'DBA', '_NEXT_USER',
  9                                   'EXP_FULL_DATABASE', 'IMP_FULL_DATABASE',
 10                                   'ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 11                                   'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA',
 12                                   'DIP', 'DMSYS', 'DBSNMP', 'EXFSYS',
 13                                   'WMSYS','ORACLE_OCM')
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8spv TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8grn (
  2                  objid, grantor, grantorid, grantee, priv, who, wgo, creatorid,
  3                  sequence, isdir, type) AS
  4          SELECT  t$.obj#, ur$.name, t$.grantor#, ue$.name, m$.name,
  5                  MOD(NVL(t$.option$/2, 0), 2), MOD(NVL(t$.option$, 0), 2),
  6                  o$.owner#, t$.sequence#,
  7                  DECODE ((o$.type#), 23, 1, 0), o$.type#
  8          FROM    sys.objauth$ t$, sys.obj$ o$, sys.user$ ur$,
  9                  sys.table_privilege_map m$, sys.user$ ue$
 10          WHERE   o$.obj# = t$.obj# AND
 11                  t$.privilege# = m$.privilege AND
 12                  t$.col# IS NULL AND
 13                  t$.grantor# = ur$.user# AND
 14                  t$.grantee# = ue$.user# AND
 15                  ue$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 16                                   'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
 17                                   'DIP',     'DMSYS', 'DBSNMP', 'EXFSYS',
 18                                   'WMSYS','ORACLE_OCM')
 19  /

View created.

SQL> GRANT SELECT ON sys.exu8grn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM just SYS's grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8grs (
  2                  objid, name) AS
  3          SELECT  t$.obj#, o$.name
  4          FROM    sys.objauth$ t$, sys.obj$ o$
  5          WHERE   o$.obj# = t$.obj# AND
  6                  t$.col# IS NULL AND
  7                  t$.grantor# = 0 AND
  8                  o$.type# NOT IN (
  9                      SELECT  type#
 10                      FROM    sys.exppkgobj$)
 11  /

View created.

SQL> GRANT SELECT ON sys.exu8grs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM first level grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8grnu AS
  2          SELECT  *
  3          FROM    sys.exu8grn
  4          WHERE   grantorid = UID AND
  5                  creatorid = UID
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8grnu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all column grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cgr (
  2                  objid, grantor, grantorid, grantee, creatorid, cname, priv,
  3                  sequence, wgo) AS
  4          SELECT  c$.obj#, ur$.name, c$.grantor#, ue$.name, o$.owner#, cl$.name,
  5                  m$.name, c$.sequence#, MOD(NVL(c$.option$, 0), 2)
  6          FROM    sys.objauth$ c$, sys.obj$ o$, sys.user$ ur$, sys.user$ ue$,
  7                  sys.table_privilege_map m$, sys.col$ cl$
  8          WHERE   c$.grantor# = ur$.user# AND
  9                  c$.grantee# = ue$.user# AND
 10                  c$.obj# = o$.obj# AND
 11                  c$.privilege# = m$.privilege AND
 12                  c$.obj# = cl$.obj# AND
 13                  c$.col# = cl$.col#
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8cgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM first level grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cgru AS
  2          SELECT  *
  3          FROM    sys.exu8cgr
  4          WHERE   grantorid = UID AND
  5                  creatorid = UID
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8cgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all indexes. This view is used for TRANSPORTABLE TABLESPACEs,
SQL> REM V10.0 and higher
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10ind_base (
  2                  iobjid, idobjid, iname, iowner, iownerid, ispace, itsno,
  3                  ifileno, iblockno, btname, btobjid, btowner, btownerid,
  4                  btproperty, btclusterflag, property, cluster$, pctfree$,
  5                  initrans, maxtrans, blevel, bitmap, deflog, tsdeflog, degree,
  6                  instances, type, rowcnt, leafcnt, distkey, lblkkey, dblkkey,
  7                  clufac, preccnt, iflags, sysgenconst) AS
  8          SELECT  i$.obj#, i$.dataobj#, i$.name, ui$.name, i$.owner#, ts$.name,
  9                  ind$.ts#, ind$.file#, ind$.block#, t$.name, t$.obj#, ut$.name,
 10                  t$.owner#, NVL(tb$.property, 0), NVL(tb$.bobj#, 0),
 11                  ind$.property, DECODE(t$.type#, 3, 1, 0), ind$.pctfree$,
 12                  ind$.initrans, ind$.maxtrans, NVL(ind$.blevel, -1),
 13                  DECODE(ind$.type#, 2, 1, 0),
 14                  DECODE(BITAND(ind$.flags, 4), 4, 1, 0), ts$.dflogging,
 15                  NVL(ind$.degree, 1), NVL(ind$.instances, 1), ind$.type#,
 16                  NVL(ind$.rowcnt, -1), NVL(ind$.leafcnt, -1),
 17                  NVL(ind$.distkey, -1), NVL(ind$.lblkkey, -1),
 18                  NVL(ind$.dblkkey, -1), NVL(ind$.clufac, -1),
 19                  NVL(ind$.spare2, 0), ind$.flags,
 20                  DECODE(BITAND(i$.flags, 4), 4, 1, 0)
 21          FROM    sys.obj$ t$, sys.obj$ i$, sys.ind$ ind$, sys.user$ ui$,
 22                  sys.user$ ut$, sys.ts$ ts$, sys.tab$ tb$
 23          WHERE   ind$.bo# = t$.obj# AND
 24                  ind$.obj# = i$.obj# AND
 25                  ind$.bo# = tb$.obj# (+) AND
 26                  ts$.ts# = ind$.ts# AND
 27                  i$.owner# = ui$.user# AND
 28                  t$.owner# = ut$.user# AND
 29                  BITAND(ind$.flags, 4096) = 0 AND          /* skip fake index */
 30                  BITAND(ind$.property, 8208) != 8208 AND /* skip Fn Ind on MV */
 31                  (UID = 0 OR (UID = i$.owner# AND UID = t$.owner#) OR
 32                   EXISTS (
 33                      SELECT  role
 34                      FROM    sys.session_roles
 35                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 36  /

View created.

SQL> GRANT SELECT ON sys.exu10ind_base TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all indexes. This view is the base view used by V9.0 and higher
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ind_base AS
  2          SELECT  *
  3          FROM    sys.exu10ind_base
  4          WHERE   type != 8 AND                        /* skip LOB index */
  5                  type != 4                            /* skip IOT top */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9ind_base TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ind_base AS
  2          SELECT  *
  3          FROM    sys.exu9ind_base
  4          WHERE   sysgenconst = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81ind_base TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu9ind is derived from base view to eliminate indexes completely
SQL> REM defined by constraint or OIDINDEX declarations.
SQL> REM Selects any indices which do NOT correspond to constraints (same name)
SQL> REM which are enabled -and- represent an OID INDEX constraint
SQL> REM                               (single constr. col is OID).
SQL> REM  (allows non-system-defined indices due to constraints,
SQL> REM   except when the base table is IOT??).
SQL> REM Reference bugs: 686272, 735699
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ind AS
  2          SELECT  *
  3          FROM    sys.exu9ind_base
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.con$ c$, sys.cdef$ cd$
  7                      WHERE   c$.name = iname AND   /* same name as constraint */
  8                              c$.owner# = iownerid AND
  9                              c$.con# = cd$.con# AND
 10                              NVL(cd$.enabled, 0) = iobjid AND  /* cons enable */
 11                              (cd$.intcols = 1 AND           /* single column */
 12                               EXISTS (
 13                                  SELECT  *
 14                                  FROM    sys.ccol$ cc$, sys.col$ co$
 15                                  WHERE   cc$.con# = c$.con# AND
 16                                          co$.obj# = cc$.obj# AND
 17                                          co$.intcol# = cc$.intcol# AND
 18                                          BITAND(co$.property, 2) = 2)))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9ind TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all indexes. This view is used by V8.1 and higher since it retrieves
SQL> REM functional and domain indexes which are unknown in V8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ind AS
  2          SELECT  *
  3          FROM    sys.exu9ind
  4          WHERE   sysgenconst = 0 AND
  5                  BITAND(property, 1) = 0 OR                     /* not unique */
  6                  NOT EXISTS (
  7                      SELECT  *
  8                      FROM    sys.con$ c$, sys.cdef$ cd$
  9                      WHERE   c$.name = iname AND   /* same name as constraint */
 10                              c$.owner# = iownerid AND
 11                              c$.con# = cd$.con# AND
 12                              NVL(cd$.enabled, 0) = iobjid AND  /* cons enable */
 13                              ((BITAND(cd$.defer, 8) = 8)))       /* sys gen'd */
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81ind TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all indexes for V8.0. This view filters out V8.1 and later index types not
SQL> REM supported in V8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ind AS
  2          SELECT  *
  3          FROM    sys.exu81ind
  4          WHERE   BITAND(property, 16) != 16 AND      /* skip functional index */
  5                  type != 9                               /* skip domain index */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8ind TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user indexes for V8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8indu AS
  2          SELECT  *
  3          FROM    sys.exu8ind
  4  /

View created.

SQL> GRANT SELECT ON sys.exu8indu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Additional information required for domain indexes:
SQL> REM indextype name & owner, implementation type name & owner, and params
SQL> REM (params are spare4 in idx$)
SQL> REM "1" connections are for the index itself, "2" connections are for the
SQL> REM assoc. indextype, and  "3" for the assoc. implementation type.
SQL> REM iversion = domain index version (added in 9.0)
SQL> REM iproperty = the properties of domain index
SQL> REM gmflags = number (flags) passed to getindexmetadata, setup based on def.
SQL> REM           of flags argument in catodci.sql.
SQL> REM           Export may set transportable bit but otherwise does not
SQL> REM           view the composed value.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9doi (
  2                  iobjid, iownerid, iparams, itname, itowner, implname,
  3                  implowner, diversion, iproperty, gmflags)
  4        AS
  5          SELECT  ind$.obj#, indo$.owner#, ind$.spare4, o2$.name, u2$.name,
  6                  o3$.name, u3$.name, it$.interface_version#, it$.property, 0
  7          FROM    sys.ind$ ind$, sys.obj$ indo$, sys.obj$ o2$, sys.obj$ o3$,
  8                  sys.user$ u2$, sys.user$ u3$, sys.indtypes$ it$
  9          WHERE   ind$.type# = 9 AND                           /* Domain Index */
 10                  ind$.indmethod# = it$.obj#  AND
 11                  ind$.obj# = indo$.obj# AND
 12                  it$.obj# = o2$.obj# AND
 13                  it$.implobj# = o3$.obj# AND
 14                  o2$.owner# = u2$.user# AND
 15                  o3$.owner# = u3$.user# AND
 16                  BITAND(ind$.property, 2) != 2                 /* partitioned */
 17        UNION ALL         /* Grab domain indexes that have partition info also */
 18          SELECT  ind$.obj#, indo$.owner#, ind$.spare4, o2$.name, u2$.name,
 19                  o3$.name, u3$.name, it$.interface_version#, it$.property,
 20                  DECODE(BITAND (ind$.property, 512), 512, 64,0)+/*0x200=iot di*/
 21                  DECODE(BITAND(po$.flags, 1), 1, 1, 0) +         /* 1 = local */
 22                  DECODE(po$.parttype, 1, 2, 2, 4, 0)   /* 1 = range, 2 = hash */
 23          FROM    sys.ind$ ind$, sys.obj$ indo$, sys.obj$ o2$, sys.obj$ o3$,
 24                  sys.user$ u2$, sys.user$ u3$, sys.indtypes$ it$,
 25                  sys.partobj$ po$
 26          WHERE   ind$.type# = 9 AND
 27                  ind$.indmethod# = it$.obj# AND
 28                  ind$.obj# = indo$.obj# AND
 29                  it$.obj# = o2$.obj# AND
 30                  it$.implobj# = o3$.obj# AND
 31                  o2$.owner# = u2$.user# AND
 32                  o3$.owner# = u3$.user# AND
 33                  BITAND(po$.flags, 8) = 8 AND
 34                  po$.obj# = ind$.obj# AND
 35                  BITAND(ind$.property, 2) = 2                  /* partitioned */
 36  /

View created.

SQL> GRANT SELECT ON sys.exu9doi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Domain index info for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9doiu AS
  2          SELECT  *
  3          FROM    sys.exu9doi
  4          WHERE   iownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9doiu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM The 81 view uses the 9.0 view and returns everything but the new
SQL> REM interface version
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81doi AS
  2          SELECT  *
  3          FROM    sys.exu9doi
  4          WHERE   diversion = 1
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81doi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Domain index info for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81doiu AS
  2          SELECT  *
  3          FROM    sys.exu81doi
  4          WHERE   iownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81doiu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V9.0 Get Domain Index secondary objects
SQL> REM
SQL> REM pi_obj = parent index object
SQL> REM c_obj = child secondary object
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9doso (
  2                  obj#, tablename, ownerid) AS
  3          SELECT  pi_obj.obj#, c_obj.name, c_obj.owner#
  4          FROM    sys.obj$ pi_obj, sys.obj$ c_obj, sys.user$ us2,
  5                  sys.secobj$ secobj
  6          WHERE   pi_obj.obj# = secobj.obj# AND       /* has secondary objects */
  7                  c_obj.obj# = secobj.secobj# AND /*object is secondary object */
  8                  c_obj.owner# = us2.user#  AND /* secondary obj is same owner */
  9                  c_obj.type# = 2 AND             /* Secondary Object is TABLE */
 10                  BITAND(c_obj.flags, 128) != 128 AND
 11                  (UID = 0 OR (UID = pi_obj.owner# AND UID = us2.user#) OR
 12                   EXISTS (
 13                      SELECT  role
 14                      FROM    sys.session_roles
 15                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 16  /

View created.

SQL> GRANT SELECT ON sys.exu9doso TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V10.0 Get Domain Index secondary objects (including tablespace)
SQL> REM
SQL> REM pi_obj = parent index object
SQL> REM c_obj = child secondary object
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10doso (
  2                  obj#, tablename, ownerid, tablespace) AS
  3          SELECT  pi_obj.obj#, c_obj.name, c_obj.owner#,
  4                  /* decode below needed for ConText IOTs - copied from */
  5                  /* USER_TABLES in catalog.sql */
  6                  decode(bitand(tab.property, 2151678048), 0, ts.name, null)
  7          FROM    sys.obj$ pi_obj, sys.obj$ c_obj, sys.user$ us2,
  8                  sys.secobj$ secobj, sys.tab$ tab, sys.ts$ ts
  9          WHERE   pi_obj.obj# = secobj.obj# AND       /* has secondary objects */
 10                  c_obj.obj# = secobj.secobj# AND /*object is secondary object */
 11                  c_obj.owner# = us2.user#  AND /* secondary obj is same owner */
 12                  c_obj.type# = 2 AND             /* Secondary Object is TABLE */
 13                  BITAND(c_obj.flags, 128) != 128 AND
 14                  secobj.secobj# = tab.obj# AND
 15                  tab.ts# = ts.ts# AND
 16                  (UID = 0 OR (UID = pi_obj.owner# AND UID = us2.user#) OR
 17                   EXISTS (
 18                      SELECT  role
 19                      FROM    sys.session_roles
 20                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 21  /

View created.

SQL> GRANT SELECT ON sys.exu10doso TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Domain index Partition Info
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9eip (
  2                  objid, bobjid, ownerid, pname, partno, parameters) AS
  3          SELECT  o$.obj#, ip$.bo#, o$.owner#, o$.subname, ip$.part#,
  4                  idpp$.parameters
  5          FROM    sys.obj$ o$, sys.indpart$ ip$, sys.indpart_param$ idpp$
  6          WHERE   o$.type# = 20 AND                       /* Partitioned Index */
  7                  ip$.obj# = o$.obj# AND
  8                  idpp$.obj# = o$.obj# AND
  9                  (UID IN (0, o$.owner#) OR
 10                   EXISTS (
 11                      SELECT  role
 12                      FROM    sys.session_roles
 13                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 14  /

View created.

SQL> GRANT SELECT ON sys.exu9eip TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Obtain all context binding info
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ctx (
  2                  ctxname, shmname, pkgname, objno) AS
  3          SELECT  o$.name, c$.schema, c$.package, o$.obj#
  4          FROM    sys.exu81obj o$, sys.context$ c$
  5          WHERE   o$.type# = 44 AND                                 /* context */
  6                  o$.obj# = c$.obj#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81ctx TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Obtain all application role binding info
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81approle (
  2                  role, schema, package) AS
  3          SELECT  u$.name, r$.schema, r$.package
  4          FROM    sys.user$ u$, sys.approle$ r$
  5          WHERE   u$.user# = r$.role#
  6  /

View created.

SQL> GRANT SELECT ON sys.exu81approle TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM TEST FOR TRUSTED ORACLE
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816tctx (
  2                  cols) AS
  3          SELECT  cols
  4          FROM    sys.tab$ t, sys.obj$ o
  5          WHERE   t.obj# = o.obj# AND
  6                  o.name = 'CONTEXT$' AND
  7                  o.type# = 2 AND
  8                  o.owner# = 0
  9  /

View created.

SQL> GRANT SELECT ON sys.exu816tctx TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM CREATE EXPORT VIEW
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816ctx (
  2                  ctxname, shmname, pkgname, flags) AS
  3          SELECT  o$.name, c$.schema, c$.package, c$.flags
  4          FROM    sys.exu81obj o$, sys.context$ c$
  5          WHERE   o$.type# = 44 AND
  6                  o$.obj# = c$.obj#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu816ctx TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM dependency order -- only used for ordering operators
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ordop (
  2                  dlevel, obj#, d_owner#) AS
  3          SELECT                                              /*+ no_filtering */
  4                  MAX(level), d1.d_obj#, d1.owner#
  5          FROM    (
  6                      SELECT                                      /*+ no_merge */
  7                              d.d_obj#, d.p_obj#, v.owner#
  8                      FROM    sys.dependency$ d,
  9                      (select obj#, owner# from sys.obj$ where type#=33) v
 10                      WHERE   v.obj# = d.d_obj#) d1
 11          CONNECT BY PRIOR d1.d_obj# = d1.p_obj#
 12          GROUP BY d1.d_obj#, d1.owner#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8ordop TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM dependency order -- only used for ordering views
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ord (
  2                  dlevel, obj#, d_owner#) AS
  3          SELECT                                              /*+ no_filtering */
  4                  MAX(level), d1.d_obj#, d1.owner#
  5          FROM    (
  6                      SELECT                                      /*+ no_merge */
  7                              d.d_obj#, d.p_obj#, v.owner#
  8                      FROM    sys.dependency$ d,
  9                      (select obj#, owner# from sys.obj$ where type#=4) v
 10                      WHERE   v.obj# = d.d_obj#) d1
 11          CONNECT BY PRIOR d1.d_obj# = d1.p_obj#
 12          GROUP BY d1.d_obj#, d1.owner#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8ord TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's dependency order of views
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ordu AS
  2          SELECT  *
  3          FROM    sys.exu8ord
  4          WHERE   d_owner# = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ordu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all views
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vew (
  2                  vobjid, vname, vtext, vowner, vownerid, vaudit, vcomment,
  3                  vcname, vlevel, property, defer, flags, oidlen, oidclause,
  4                  typeowner, typename, vlen, sqlver, underlen, underclause) AS
  5          SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
  6                  com$.comment$, c$.name, d$.dlevel, v$.property,
  7                  NVL(cd$.defer, 0), NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0),
  8                  vt$.oidtext, vt$.typeowner, vt$.typename, v$.textlength,
  9                  sv$.sql_version, NVL(vt$.undertextlength, 0), vt$.undertext
 10          FROM    sys.exu81obj o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
 11                  sys.con$ c$, sys.com$ com$, sys.exu8ord d$,
 12                  sys.typed_view$ vt$, sys.exu816sqv sv$
 13          WHERE   v$.obj# = o$.obj# AND
 14                  o$.owner# = u$.user# AND
 15                  o$.obj# = cd$.obj#(+) AND
 16                  cd$.con# = c$.con#(+) AND
 17                  o$.obj# = com$.obj#(+) AND
 18                  com$.col#(+) IS NULL AND
 19                  o$.obj# = d$.obj#(+) AND
 20                  v$.obj# = vt$.obj# (+) AND
 21                  o$.spare1 = sv$.version# (+)
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8vew TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views for incremental export: new or last export not valid
SQL> REM cannot use union as in exutabi because of long field
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vewi AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vew vw, sys.incexp i, sys.incvid v
  4          WHERE   i.name(+) = vw.vname AND
  5                  i.owner#(+) = vw.vownerid AND
  6                  v.expid < NVL(i.expid, 9999) AND
  7                  NVL(i.type#, 4) = 4
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vewi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vewc AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vew vw, sys.incexp i, sys.incvid v
  4          WHERE   vw.vname = i.name(+) AND
  5                  vw.vownerid = i.owner#(+) AND
  6                  NVL(i.type#, 4) = 4 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8vewc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vewu (
  2                  vobjid, vname, vtext, vowner, vownerid, vaudit, vcomment,
  3                  vcname, vlevel, property, defer, flags, oidlen, oidclause,
  4                  typeowner, typename, vlen, sqlver, underlen, underclause) AS
  5          SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
  6                  com$.comment$, c$.name, d$.dlevel, v$.property,
  7                  NVL(cd$.defer, 0), NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0),
  8                  vt$.oidtext, vt$.typeowner, vt$.typename, v$.textlength,
  9                  sv$.sql_version, NVL(vt$.undertextlength, 0), vt$.undertext
 10          FROM    sys.exu81obj o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
 11                  sys.con$ c$, sys.com$ com$, sys.exu8ordu d$,
 12                  sys.typed_view$ vt$, sys.exu816sqv sv$
 13          WHERE   v$.obj# = o$.obj# AND
 14                  o$.owner# = u$.user# AND
 15                  o$.obj# = cd$.obj#(+) AND
 16                  cd$.con# = c$.con#(+) AND
 17                  o$.obj# = com$.obj#(+) AND
 18                  com$.col#(+) IS NULL AND
 19                  o$.obj# = d$.obj#(+) AND
 20                  v$.obj# = vt$.obj#(+) AND
 21                  u$.user# = UID AND
 22                  o$.spare1 = sv$.version# (+)
 23  /

View created.

SQL> GRANT SELECT ON sys.exu8vewu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get dependency info for views that depend on other views
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vdpt (
  2                  parent, child, powner, cowner) AS
  3          SELECT  d$.p_obj#, d$.d_obj#, o1$.owner#, o2$.owner#
  4          FROM    sys.dependency$ d$, sys.obj$ o1$, sys.obj$ o2$, sys.view$ v1$,
  5                  sys.view$ v2$
  6          WHERE   d$.p_obj# = v1$.obj# AND
  7                  v1$.obj# = o1$.obj# AND
  8                  d$.d_obj# = v2$.obj# AND
  9                  v2$.obj# = o2$.obj#
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8vdpt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get dependency info for views that depend on other views
SQL> REM for current user
SQL> REM note, that even if user does not have privs, we need to
SQL> REM include views of other other users, to get the proper ordering.
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vdptu AS
  2          SELECT  *
  3          FROM    sys.exu8vdpt
  4  /

View created.

SQL> GRANT SELECT ON sys.exu8vdptu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get all information about a given view
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vinf (
  2                  vobjid, vname, vtext, vowner, vownerid, vaudit, vcomment,
  3                  vcname, property, defer, flags, oidlen, oidclause, typeowner,
  4                  typename, vlen) AS
  5          SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
  6                  com$.comment$, c$.name, v$.property, NVL(cd$.defer, 0),
  7                  NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0), vt$.oidtext,
  8                  vt$.typeowner, vt$.typename, v$.textlength
  9          FROM    sys.obj$ o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
 10                  sys.con$ c$, sys.com$ com$, sys.typed_view$ vt$
 11          WHERE   v$.obj# = o$.obj# AND
 12                  o$.owner# = u$.user# AND
 13                  o$.obj# = cd$.obj#(+) AND
 14                  cd$.con# = c$.con#(+) AND
 15                  o$.obj# = com$.obj#(+) AND
 16                  com$.col#(+) IS NULL AND
 17                  v$.obj# = vt$.obj# (+)
 18  /

View created.

SQL> GRANT SELECT ON sys.exu8vinf TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views for incremental export: new or last export not valid
SQL> REM cannot use union as in exutabi because of long field
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vinfi AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vinf vw, sys.incexp i, sys.incvid v
  4          WHERE   i.name(+) = vw.vname AND
  5                  i.owner#(+) = vw.vownerid AND
  6                  v.expid < NVL(i.expid, 9999) AND
  7                  NVL(i.type#, 4) = 4
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vinfi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views for cumulative export: new, last export was inc or not valid
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vinfc AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vinf vw, sys.incexp i, sys.incvid v
  4          WHERE   vw.vname = i.name(+) AND
  5                  vw.vownerid = i.owner#(+) AND
  6                  NVL(i.type#, 4) = 4 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                  v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8vinfc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's view
SQL> REM
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vinfu AS
  2          SELECT  *
  3          FROM    sys.exu8vinf
  4          WHERE   vownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8vinfu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get all information about views with no dependent views
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vnc AS
  2          SELECT  *
  3          FROM    sys.exu8vinf vf$
  4          WHERE   NOT EXISTS (
  5                      SELECT  0
  6                      FROM    sys.exu8vdpt vd$
  7                      WHERE   vd$.parent = vf$.vobjid)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vnc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views without dependent views for incremental export:
SQL> REM new or last export not valid
SQL> REM cannot use union as in exutabi because of long field
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vnci AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vnc vw, sys.incexp i, sys.incvid v
  4          WHERE   i.name(+) = vw.vname AND
  5                  i.owner#(+) = vw.vownerid AND
  6                  v.expid < NVL(i.expid, 9999) AND
  7                  NVL(i.type#, 4) = 4
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vnci TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views without dependent views for cumulative export:
SQL> REM new, last export was inc or not valid
SQL> REM
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vncc AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vnc vw, sys.incexp i, sys.incvid v
  4          WHERE   vw.vname = i.name(+) AND
  5                  vw.vownerid = i.owner#(+) AND
  6                  NVL(i.type#, 4) = 4 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                  v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8vncc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's views without dependent views
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vncu AS
  2          SELECT  *
  3          FROM    sys.exu8vinfu vf$
  4          WHERE   NOT EXISTS (
  5                      SELECT  0
  6                      FROM    sys.exu8vdptu vd$
  7                      WHERE   vd$.parent = vf$.vobjid)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vncu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all synonyms (except those for TYPEs)
SQL> REM
SQL> REM Note: there can be synonyms for non existant objects
SQL> 
SQL> CREATE OR REPLACE VIEW exu9syn (
  2                  synnam, synnam2, syntab, tabown, tabnode, public$, synown,
  3                  synownid, tabownid, synobjno, syntime) AS
  4          SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
  5                  DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
  6                  s$.obj#, o$.ctime
  7          FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
  8          WHERE   s$.obj# = o$.obj# AND
  9                  o$.owner# = uo$.user# AND
 10                  s$.owner = us$.name(+) AND
 11                  NVL(s$.owner, 'SYS') NOT IN
 12                     ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
 13                      'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DMSYS',
 14                      'DBSNMP', 'EXFSYS','WMSYS','ORACLE_OCM') AND
 15                  NOT EXISTS (
 16                      SELECT obj#
 17                      FROM sys.obj$ ne
 18                      WHERE ne.name = s$.name AND
 19                            ne.owner# = us$.user# AND
 20                            ne.type# = 13 )
 21  /

View created.

SQL> GRANT SELECT ON sys.exu9syn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all PUBLIC TYPE Synonyms
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pts (
  2                  synnam, synnam2, syntab, tabown, tabnode, public$, synown,
  3                  synownid, tabownid, synobjno, syntime) AS
  4          SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
  5                  DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
  6                  s$.obj#, o$.ctime
  7          FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
  8          WHERE   s$.obj# = o$.obj# AND
  9                  o$.owner# = uo$.user# AND
 10                  s$.owner = us$.name(+) AND
 11                  NVL(s$.owner, 'SYS') NOT IN
 12                     ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
 13                      'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DMSYS',
 14                      'DBSNMP', 'EXFSYS', 'WMSYS','ORACLE_OCM') AND
 15                  o$.owner# = 1 AND
 16                  EXISTS (
 17                      SELECT obj#
 18                      FROM sys.obj$ e
 19                      WHERE e.name = s$.name AND
 20                            e.owner# = us$.user# AND
 21                            e.type# = 13 )
 22  /

View created.

SQL> GRANT SELECT ON sys.exu9pts TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's TYPE Synonyms (non PUBLIC)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9uts (
  2                  synnam, synnam2, syntab, tabown, tabnode, public$, synown,
  3                  synownid, tabownid, synobjno, syntime) AS
  4          SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
  5                  DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
  6                  s$.obj#, o$.ctime
  7          FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
  8          WHERE   s$.obj# = o$.obj# AND
  9                  o$.owner# = uo$.user# AND
 10                  s$.owner = us$.name(+) AND
 11                  NVL(s$.owner, 'SYS') NOT IN
 12                     ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
 13                      'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DMSYS',
 14                      'DBSNMP', 'EXFSYS', 'WMSYS','ORACLE_OCM') AND
 15                  o$.owner# <> 1 AND
 16                  EXISTS (
 17                      SELECT obj#
 18                      FROM sys.obj$ e
 19                      WHERE e.name = s$.name AND
 20                            e.owner# = us$.user# AND
 21                            e.type# = 13 )
 22  /

View created.

SQL> GRANT SELECT ON sys.exu9uts TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all synonyms (pre 9.2 only)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8syn (
  2                  synnam, synnam2, syntab, tabown, tabnode, public$, synown,
  3                  synownid, syntime) AS
  4          SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
  5                  DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, o$.ctime
  6          FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
  7          WHERE   s$.obj# = o$.obj# AND
  8                  o$.owner# = uo$.user# AND
  9                  s$.owner = us$.name(+) AND
 10                  NVL(s$.owner, 'SYS') NOT IN
 11                     ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
 12                      'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DMSYS',
 13                      'DBSNMP', 'EXFSYS', 'WMSYS','ORACLE_OCM')
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8syn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM synonyms for incremental export: new or last export not valid
SQL> REM
SQL> REM obsolete in 9.2
SQL> CREATE OR REPLACE VIEW exu8syni AS
  2          SELECT  s.*
  3          FROM    sys.exu8syn s, sys.incexp i, sys.incvid v
  4          WHERE   s.synnam = i.name(+) AND
  5                  s.synownid = i.owner#(+) AND
  6                  NVL(i.type#, 5) = 5 AND
  7                  NVL(i.expid, 9999) > v.expid
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8syni TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM synonyms for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> REM obsolete in 9.2
SQL> CREATE OR REPLACE VIEW exu8sync AS
  2          SELECT  s.*
  3          FROM    sys.exu8syn s, sys.incexp i, sys.incvid v
  4          WHERE   s.synnam = i.name(+) AND
  5                  s.synownid = i.owner#(+) AND
  6                  NVL(i.type#, 5) = 5 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8sync TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM user's synnonyms (pre 9.2 only)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8synu AS
  2          SELECT  *
  3          FROM    sys.exu8syn
  4          WHERE   synownid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8synu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM user's synonyms (except those for TYPEs)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9synu AS
  2          SELECT  *
  3          FROM    sys.exu9syn
  4          WHERE   synownid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9synu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM user's synonyms (for TYPEs)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9utsu AS
  2          SELECT  *
  3          FROM    sys.exu9uts
  4          WHERE   synownid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9utsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM clustered tables' columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cco (
  2                  tname, towner, townerid, cluster$, tcolnam, seq, property) AS
  3          SELECT  t$.name, u$.name, t$.owner#, c$.name,
  4                  DECODE(BITAND(tc$.property, 1), 1, a$.name, tc$.name),
  5                  cc$.col#, tc$.property
  6          FROM    sys.obj$ t$, sys.tab$ tab$, sys.obj$ c$, sys.col$ tc$,
  7                  sys.col$ cc$, sys.user$ u$, sys.attrcol$ a$
  8          WHERE   t$.type# = 2 AND
  9                  t$.obj# = tab$.obj# AND
 10                  tab$.bobj# = cc$.obj# AND
 11                  tab$.obj# = tc$.obj# AND
 12                  tab$.bobj# = c$.obj# AND
 13                  cc$.segcol# = tc$.segcol# AND
 14                  t$.owner# = u$.user# AND
 15                  tc$.obj# = a$.obj# (+) AND
 16                  tc$.intcol# = a$.intcol# (+)
 17  /

View created.

SQL> GRANT SELECT ON sys.exu8cco TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's clustered tables' columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ccou AS
  2          SELECT  *
  3          FROM    sys.exu8cco
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ccou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all clusters
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8clu (
  2                  objid, dobjid, owner, ownerid, name, tblspace, size$, tsno,
  3                  fileno, blockno, mtime, pctfree$, pctused$, initrans, maxtrans,
  4                  hashkeys, function, avgchn, degree, instances, cache, functxt,
  5                  funclen, single_table, sqlver, tflags) AS
  6          SELECT  o$.obj#, o$.dataobj#, u$.name, o$.owner#, o$.name, ts$.name,
  7                  NVL(c$.size$, -1), ts$.ts#, c$.file#, c$.block#, o$.mtime,
  8                  MOD(c$.pctfree$, 100), c$.pctused$, c$.initrans, c$.maxtrans,
  9                  NVL(c$.hashkeys, 0), NVL(c$.func, 1), NVL(c$.avgchn, -1),
 10                  NVL(c$.degree, 1), NVL(c$.instances, 1),
 11                  DECODE(BITAND(c$.flags, 8), 8, 1, 0), cd$.condition,
 12                  cd$.condlength, DECODE(BITAND(c$.flags, 65536), 65536, 1, 0),
 13                  sv$.sql_version, c$.flags
 14          FROM    sys.obj$ o$, sys.clu$ c$, sys.ts$ ts$, sys.user$ u$,
 15                  sys.cdef$ cd$, sys.exu816sqv sv$
 16          WHERE   o$.obj# = c$.obj# AND
 17                  c$.ts# = ts$.ts# AND
 18                  o$.owner# = u$.user# AND
 19                  cd$.obj#(+) = c$.obj# AND
 20                  o$.spare1 = sv$.version# (+)
 21  /

View created.

SQL> GRANT SELECT ON sys.exu8clu TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM clusters for incremental export: new or last export invalid
SQL> REM altered cluster is now exported because its tables are also exported
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8clui AS
  2          SELECT  c.*
  3          FROM    sys.exu8clu c, sys.incexp i, sys.incvid v
  4          WHERE   c.name = i.name(+) AND
  5                  c.ownerid = i.owner#(+) AND
  6                  (c.mtime > i.itime OR
  7                   NVL(i.expid, 9999) > v.expid)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8clui TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM clusters for cumulative export: last export was inc or new
SQL> REM altered cluster is now exported because its tables are also exported
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cluc AS
  2          SELECT  c.*
  3          FROM    sys.exu8clu c, sys.incexp i, sys.incvid v
  4          WHERE   c.name = i.name(+) AND
  5                  c.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 3) = 3 AND
  7                  (i.itime > NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) OR
  8                   c.mtime > i.itime OR
  9                   NVL(i.expid, 9999) > v.expid)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8cluc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's clusters
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cluu AS
  2          SELECT  *
  3          FROM    sys.exu8clu
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8cluu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all storage parameters
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9sto (
  2                  ownerid, tsno, fileno, blockno, iniext, sext, minext, maxext,
  3                  pctinc, blocks, lists, groups, extents, pcache, ts_type,
  4                  tsname, isonline, blocksize, hscompress) AS
  5          SELECT  s$.user#, s$.ts#, s$.file#, s$.block#, s$.iniexts, s$.extsize,
  6                  s$.minexts, s$.maxexts, s$.extpct, s$.blocks,
  7                  DECODE(s$.lists, NULL, 1, 65535, 1, lists),
  8                  DECODE(s$.groups, NULL, 1, 65535, 1, groups), extents,
  9                  DECODE(s$.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE'),
 10                  DECODE(BITAND(s$.spare1, 1), 1,
 11                         DECODE(BITAND(ts$.flags, 3), 0, 0, 1, 1, 2, 2, -1),
 12                         0, -1, -1),
 13                  ts$.name, DECODE(ts$.online$, 1, 1, 4, 1, 0),
 14                  NVL(ts$.blocksize, 2048), s$.spare1
 15          FROM    sys.seg$ s$, sys.ts$ ts$
 16          WHERE   s$.ts# = ts$.ts#(+)
 17  /

View created.

SQL> GRANT SELECT ON sys.exu9sto TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM storage parameters for current user's segments
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9stou AS
  2          SELECT  *
  3          FROM    sys.exu9sto
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9stou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 storage parameter info adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8sto (
  2                  ownerid, tsno, fileno, blockno, iniext, sext, minext, maxext,
  3                  pctinc, blocks, lists, groups, extents, pcache, ts_type,
  4                  tsname, isonline) AS
  5          SELECT  s.ownerid, s.tsno, s.fileno, s.blockno,
  6                  CEIL(s.iniext * (s.blocksize / (
  7                      SELECT  t$.blocksize
  8                      FROM    sys.ts$ t$
  9                      WHERE   t$.ts# = 0))),
 10                  CEIL(s.sext * (s.blocksize / (
 11                      SELECT  t$.blocksize
 12                      FROM    sys.ts$ t$
 13                      WHERE   t$.ts# = 0))),
 14                  s.minext, s.maxext, s.pctinc,
 15                  CEIL(s.blocks * (s.blocksize / (
 16                      SELECT  t$.blocksize
 17                      FROM    sys.ts$ t$
 18                      WHERE   t$.ts# = 0))),
 19                  s.lists, s.groups, s.extents, s.pcache, s.ts_type, s.tsname,
 20                  s.isonline
 21          FROM    sys.exu9sto s
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8sto TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 curr user's storage param info adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8stou AS
  2          SELECT  *
  3          FROM    sys.exu8sto
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8stou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM find out correct size of second extent using uet$
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tne (
  2                  tsno, fileno, blockno, length) AS
  3          SELECT  ts#, segfile#, segblock#, length
  4          FROM    sys.uet$
  5          WHERE   ext# = 1
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9tne TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 2nd extent info adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tne (
  2                  tsno, fileno, blockno, length) AS
  3          SELECT  e.tsno, e.fileno, e.blockno,
  4                  CEIL(e.length * ((
  5                      SELECT  t1$.blocksize
  6                      FROM    sys.ts$ t1$
  7                      WHERE   t1$.ts# = e.tsno) / (
  8                      SELECT  t0$.blocksize
  9                      FROM    sys.ts$ t0$
 10                      WHERE   t0$.ts# = 0)))
 11          FROM    sys.exu9tne e
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8tne TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM find out correct size of second extent using x$ktfbue (for bitmapped TS)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tneb (
  2                  tsno, fileno, blockno, length) AS
  3          SELECT  ktfbuesegtsn, ktfbuesegfno, ktfbuesegbno, ktfbueblks
  4          FROM    sys.x$ktfbue
  5          WHERE   ktfbueextno = 1
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9tneb TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 2nd extent info adjusted for bitmapped TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tneb (
  2                  tsno, fileno, blockno, length) AS
  3          SELECT  e.tsno, e.fileno, e.blockno,
  4                  CEIL(e.length * ((
  5                      SELECT  t1$.blocksize
  6                      FROM    sys.ts$ t1$
  7                      WHERE   t1$.ts# = e.tsno) / (
  8                      SELECT  t0$.blocksize
  9                      FROM    sys.ts$ t0$
 10                      WHERE   t0$.ts# = 0)))
 11          FROM    sys.exu9tneb e
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8tneb TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all tablespaces
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tbs (
  2                  id, owner, name, isonline, content, iniext, sext, pctinc,
  3                  minext, maxext, minlen, deflog, ext_mgt, alloc_type, blocksize)
  4        AS
  5          SELECT  ts$.ts#, 'SYSTEM', ts$.name,
  6                  DECODE(ts$.online$, 1, 'ONLINE', 4, 'ONLINE', 'OFFLINE'),
  7                  DECODE(ts$.contents$, 0, 'PERMANENT', 1, 'TEMPORARY'),
  8                  ts$.dflinit, ts$.dflincr, ts$.dflextpct, ts$.dflminext,
  9                  ts$.dflmaxext, NVL(ts$.dflminlen, 0), ts$.dflogging,
 10                  ts$.bitmapped, ts$.flags, ts$.blocksize
 11          FROM    sys.ts$ ts$
 12          WHERE   ts$.online$ IN (1, 2, 4) AND
 13                  ts$.ts# != 0 AND
 14                  bitand(ts$.flags,2048) !=2048
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9tbs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 tablespaces adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbs (
  2                  id, owner, name, isonline, content, iniext, sext, pctinc,
  3                  minext, maxext, minlen, deflog, ext_mgt, alloc_type) AS
  4          SELECT  t.id, t.owner, t.name, t.isonline, t.content,
  5                  CEIL(t.iniext * (t.blocksize / (
  6                      SELECT  t$.blocksize
  7                      FROM    sys.ts$ t$
  8                      WHERE   t$.ts# = 0))),
  9                  CEIL(t.sext * (t.blocksize / (
 10                      SELECT  t$.blocksize
 11                      FROM    sys.ts$ t$
 12                      WHERE   t$.ts# = 0))),
 13                  t.pctinc, t.minext, t.maxext,
 14                  CEIL(t.minlen * (t.blocksize / (
 15                      SELECT  t$.blocksize
 16                      FROM    sys.ts$ t$
 17                      WHERE   t$.ts# = 0))),
 18                  t.deflog,
 19                  CEIL(t.ext_mgt * (t.blocksize / (
 20                      SELECT  t$.blocksize
 21                      FROM    sys.ts$ t$
 22                      WHERE   t$.ts# = 0))),
 23                  t.alloc_type
 24          FROM    sys.exu9tbs t
 25  /

View created.

SQL> GRANT SELECT ON sys.exu81tbs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all tablespaces for 8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tbs (
  2                  id, owner, name, isonline, content, iniext, sext, pctinc,
  3                  minext, maxext, deflog) AS
  4          SELECT  tbs$.id, tbs$.owner, tbs$.name, tbs$.isonline, tbs$.content,
  5                  tbs$.iniext, tbs$.sext, tbs$.pctinc, tbs$.minext, tbs$.maxext,
  6                  tbs$.deflog
  7          FROM    sys.exu81tbs tbs$
  8          WHERE   tbs$.ext_mgt = 0
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tbs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM tablespace quotas
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tsq(
  2                  tsname, tsid, uname, userid, maxblocks, blocksize) AS
  3          SELECT  t$.name, q$.ts#, u$.name, u$.user#, q$.maxblocks, t$.blocksize
  4          FROM    sys.ts$ t$, sys.tsq$ q$, sys.user$ u$
  5          WHERE   q$.user# = u$.user# AND
  6                  q$.ts# = t$.ts# AND
  7                  q$.maxblocks != 0 AND
  8                  t$.online$ IN (1, 2, 4)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu9tsq TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 tablespace quotas adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tsq(
  2                  tsname, tsid, uname, userid, maxblocks) AS
  3          SELECT  q.tsname, q.tsid, q.uname, q.userid,
  4                  CEIL(q.maxblocks * (q.blocksize / (
  5                      SELECT  t$.blocksize
  6                      FROM    sys.ts$ t$
  7                      WHERE   t$.ts# = 0)))
  8          FROM    sys.exu9tsq q
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tsq TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM tablespace names
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tsn (
  2                  tsname, tsid) AS
  3          SELECT  t$.name, t$.ts#
  4          FROM    sys.ts$ t$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8tsn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 1. files from user mapped tablespaces
SQL> REM 2. bitmapped tablespaces (derived from dba_data_files)
SQL> REM 3. bitmapped temporary tablespaces (derived from dba_temp_files)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9fil(
  2                  fname, fsize, maxextend, inc, tsid, bitmap) AS
  3          SELECT  v$.name, f$.blocks, f$.maxextend, f$.inc, f$.ts#, 0
  4          FROM    sys.file$ f$, sys.v$dbfile v$
  5          WHERE   f$.file# = v$.file# AND
  6                  f$.spare1 IS NULL
  7        UNION ALL
  8          SELECT  /* ignore hint, perf problem - ordered use_nl(f$) use_nl(hc) */
  9                  v$.name, DECODE(hc.ktfbhccval, 0, hc.ktfbhcsz, -1),
 10                  DECODE(hc.ktfbhccval, 0, hc.ktfbhcmaxsz, NULL),
 11                  DECODE(hc.ktfbhccval, 0, hc.ktfbhcinc, NULL), f$.ts#,
 12                  ts$.bitmapped
 13          FROM    sys.v$dbfile v$, sys.file$ f$, sys.x$ktfbhc hc, sys.ts$ ts$
 14          WHERE   v$.file# = f$.file# AND
 15                  f$.spare1 IS NOT NULL AND
 16                  f$.file# = hc.ktfbhcafno AND
 17                  hc.ktfbhctsn(+) = ts$.ts#
 18        UNION ALL
 19          SELECT                                       /*+ ordered use_nl(hc) +*/
 20                  v$.fnnam, DECODE(hc.ktfthccval, 0, hc.ktfthcsz, -1),
 21                  DECODE(hc.ktfthccval, 0, hc.ktfthcmaxsz, NULL),
 22                  DECODE(hc.ktfthccval, 0, hc.ktfthcinc, NULL), ts$.ts#,
 23                  ts$.bitmapped
 24          FROM    sys.x$kccfn v$, sys.x$ktfthc hc, sys.ts$ ts$
 25          WHERE   v$.fntyp = 7 AND
 26                  v$.fnnam IS NOT NULL AND
 27                  v$.fnfno = hc.ktfthctfno AND
 28                  hc.ktfthctsn(+) = ts$.ts#
 29  /

View created.

SQL> GRANT SELECT ON sys.exu9fil TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 file info adjusted for tablespace specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81fil(
  2                  fname, fsize, maxextend, inc, tsid, bitmap) AS
  3          SELECT  f.fname,
  4                  NVL2(f.fsize, DECODE(f.fsize, -1, -1,
  5                      CEIL(f.fsize * ((
  6                      SELECT  t1$.blocksize
  7                      FROM    sys.ts$ t1$
  8                      WHERE   t1$.ts# = f.tsid) / (
  9                      SELECT  t0$.blocksize
 10                      FROM    sys.ts$ t0$
 11                      WHERE   t0$.ts# = 0)))), NULL),
 12                  NVL2(f.maxextend, CEIL(f.maxextend * ((
 13                      SELECT  t1$.blocksize
 14                      FROM    sys.ts$ t1$
 15                      WHERE   t1$.ts# = f.tsid) / (
 16                      SELECT  t0$.blocksize
 17                      FROM    sys.ts$ t0$
 18                      WHERE   t0$.ts# = 0))), NULL),
 19                  NVL2(f.inc, CEIL(f.inc * ((
 20                      SELECT  t1$.blocksize
 21                      FROM    sys.ts$ t1$
 22                      WHERE   t1$.ts# = f.tsid) / (
 23                      SELECT  t0$.blocksize
 24                      FROM    sys.ts$ t0$
 25                      WHERE t0$.ts# = 0))), NULL),
 26                  f.tsid, f.bitmap
 27          FROM    sys.exu9fil f
 28  /

View created.

SQL> GRANT SELECT ON sys.exu81fil TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all files for 8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8fil (
  2                  fname, fsize, maxextend, inc, tsid) AS
  3          SELECT  fname, fsize, maxextend, inc, tsid
  4          FROM    sys.exu81fil
  5          WHERE   bitmap = 0
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8fil TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all 10.* database links (new columns passwordx and authpwdx in link$)
SQL> REM
SQL> 
SQL> -- If a user
SQL> --   (a) owns the object or
SQL> --   (b) is SYS or
SQL> --   (c) has EXP_FULL_DATABASE role
SQL> -- the user can see all metadata for the object including passwords.
SQL> CREATE OR REPLACE VIEW exu10lnk (
  2                  owner, ownerid, name, user$, passwd, host, public$,
  3                  auth_user, auth_passwd, flag, passwdx, auth_passwdx) AS
  4          SELECT  DECODE(l$.owner#, 1, 'SYSTEM', u$.name), l$.owner#, l$.name,
  5                  l$.userid, l$.password, l$.host, DECODE(l$.owner#, 1, 1, 0),
  6                  l$.authusr, l$.authpwd, l$.flag, l$.passwordx, l$.authpwdx
  7          FROM    sys.user$ u$, sys.link$ l$
  8          WHERE   u$.user# = l$.owner# AND
  9                  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u$.user#, 0) OR
 10                   EXISTS ( SELECT *
 11                            FROM   session_roles
 12                            WHERE  role='EXP_FULL_DATABASE' ))
 13  /

View created.

SQL> GRANT SELECT ON sys.exu10lnk TO EXP_FULL_DATABASE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 10.* current user's database links'
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10lnku AS
  2          SELECT  *
  3          FROM    sys.exu10lnk
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10lnku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For 9.* the database links dont retrieve anything (1=2)
SQL> REM
SQL> REM  When they do 10.*(Exp) to 9.*(Imp), dblinks are created on 9.*
SQL> REM  They need to recreate them on the 9.* database after import
SQL> Rem
SQL> 
SQL> CREATE OR REPLACE VIEW exu9lnk (
  2                  owner, ownerid, name, user$, passwd, host, public$,
  3                  auth_user, auth_passwd, flag) AS
  4          SELECT  owner, ownerid, name, user$, passwd, host, public$,
  5                  auth_user, auth_passwd, flag
  6          FROM    sys.exu10lnk
  7          WHERE 1 = 2;

View created.

SQL> /

View created.

SQL> GRANT SELECT ON sys.exu9lnk TO EXP_FULL_DATABASE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's database links'
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lnku AS
  2          SELECT  *
  3          FROM    sys.exu9lnk
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9lnku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all database links
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lnk (
  2                  owner, ownerid, name, user$, passwd, host, public$) AS
  3          SELECT  owner, ownerid, name, user$, passwd, host, public$
  4          FROM    sys.exu9lnk;

View created.

SQL> /

View created.

SQL> GRANT SELECT ON sys.exu8lnk TO EXP_FULL_DATABASE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.* version
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lnku AS
  2          SELECT  *
  3          FROM    sys.exu8lnk
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8lnku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM all rollback segments
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rsg (
  2                  owner, name, space$, tsno, fileno , blockno, minext, public$)
  3        AS
  4          SELECT  'SYSTEM', r$.name, ts$.name, r$.ts#, r$.file#, r$.block#,
  5                  s$.minexts, DECODE(r$.user#, 1, 1, 0)
  6          FROM    sys.ts$ ts$, sys.undo$ r$, sys.seg$ s$
  7          WHERE   r$.status$ != 1 AND
  8                  r$.file# = s$.file# AND
  9                  r$.block# = s$.block# AND
 10                  s$.ts# = ts$.ts# AND
 11                  r$.ts# = s$.ts# AND
 12                  r$.us# != 0 AND
 13                  BITAND(ts$.flags, 16) = 0                 /* undo tablespace */
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8rsg TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on deleted objects EXCEPT snapshots, snapshot logs
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8del (
  2                  owner, name, type, type#) AS
  3          SELECT  u$.name, i$.name,
  4                  DECODE(i$.type#, 2, 'TABLE', 3, 'CLUSTER', 4, 'VIEW',
  5                         5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE', 8,
  6                         'FUNCTION', 9, 'PACKAGE', 12, 'TRIGGER', 11,
  7                         'PACKAGE BODY', 28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30,
  8                         'JAVA RESOURCE', 32, 'INDEXTYPE', 33, 'OPERATOR', 43,
  9                         'DIMENSION', 56, 'JAVA DATA'), i$.type#
 10          FROM    sys.incexp i$, sys.user$ u$, sys.obj$ o$
 11          WHERE   i$.owner# = u$.user# AND
 12                  i$.type# NOT IN (99, 98) AND
 13                  i$.owner# = o$.owner# (+) AND /*"+ 0" for sort-merge outer jn*/
 14                  i$.name = o$.name (+) AND
 15                  i$.type# = o$.type# (+) AND
 16                  o$.owner# IS NULL AND
 17                  o$.linkname IS NULL
 18  /

View created.

SQL> GRANT SELECT ON sys.exu8del TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on sequence number
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8seq (
  2                  owner, ownerid, name, objid, curval, minval, maxval, incr,
  3                  cache, cycle, order$, audt) AS
  4          SELECT  u.name, u.user#, o.name, o.obj#, s.highwater, s.minvalue,
  5                  s.maxvalue, s.increment$, s.cache, s.cycle#, s.order$, s.audit$
  6          FROM    sys.exu81obj o, sys.user$ u, sys.seq$ s
  7          WHERE   o.obj# = s.obj# AND
  8                  o.owner# = u.user#
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8seq TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8sequ AS
  2          SELECT  *
  3          FROM    sys.exu8seq
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8sequ TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM contraints on table
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8con (
  2                  objid, owner, ownerid, tname, type, cname, cno, condition,
  3                  condlength, enabled, defer, sqlver, iname, idxsysgend) AS
  4          SELECT  o.obj#, u.name, c.owner#, o.name, cd.type#, c.name, c.con#,
  5                  cd.condition, cd.condlength, NVL(cd.enabled, 0),
  6                  NVL(cd.defer, 0), sv.sql_version, NVL(oi.name, ''),
  7                  DECODE(BITAND(NVL(oi.flags, 0), 4), 4, 1, 0)
  8          FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.cdef$ cd,
  9                  sys.exu816sqv sv, sys.obj$ oi
 10          WHERE   u.user# = c.owner# AND
 11                  o.obj# = cd.obj# AND
 12                  cd.con# = c.con# AND
 13                  cd.spare1 = sv.version# (+) AND
 14                  cd.enabled = oi.obj# (+) AND
 15                  NOT EXISTS (
 16                      SELECT  owner, name
 17                      FROM    sys.noexp$ ne
 18                      WHERE   ne.owner = u.name AND
 19                              ne.name = o.name AND
 20                              ne.obj_type = 2)
 21  /

View created.

SQL> GRANT SELECT ON sys.exu8con TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8conu AS
  2          SELECT  *
  3          FROM    sys.exu8con
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8conu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints
SQL> REM *** The reftyp field is trouble - meant to return any REF type associated
SQL> REM *** with the constraint, previously it would allow returning multiple rows
SQL> REM *** per constraint if there were multiple REFs in the target object (and
SQL> REM *** cannot be fixed since there is no correlation between the cdef$/ccol$
SQL> REM *** and refcon$ col/intcol numbers).
SQL> REM *** For 9.0.2, the reftyp value has been altered to only return the needed
SQL> REM *** pkREF type (4) if the target has a sole pkREF (supports older Exports)
SQL> REM *** and the new refconstr boolean has been added to support the 9.0.2 code
SQL> REM *** indicating a REF constraint (references a sOID or pkOID).
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ref (
  2                  objid, owner, ownerid, tname, rowner, rtname, cname, cno, rcno,
  3                  action, enabled, defer, property, robjid, rownerid, reftype,
  4                  refconstr, type) AS
  5          SELECT  o.obj#, u.name, c.owner#, o.name, ru.name, ro.name, c.name,
  6                  c.con#, cd.rcon#, NVL(cd.refact, 0), NVL(cd.enabled, 0),
  7                  NVL(cd.defer, 0), NVL(t.property, 0), cd.robj#, ro.owner#,
  8                  DECODE((SELECT COUNT (*)
  9                          FROM   sys.refcon$ rf
 10                          WHERE  rf.obj# = o.obj# AND
 11                                 BITAND(rf.reftyp, 4) = 4),
 12                         1, 4, 0),            /* if 1, EXURUID, else not a REF */
 13                  DECODE((SELECT COUNT (*)
 14                          FROM   sys.ccol$ cc, sys.col$ c
 15                          WHERE  cc.con# = cd.con# AND
 16                                 c.obj# = cc.obj# AND
 17                                 c.intcol# = cc.intcol# AND
 18                                 BITAND(c.property, 2097152)= 2097152), /* REA */
 19                         0, 0, 1),                /* if none, FALSE, else TRUE */
 20                  o.type#
 21          FROM    sys.user$ u, sys.user$ ru, sys.exu81obj o, sys.obj$ ro,
 22                  sys.con$ c, sys.cdef$ cd, sys.tab$ t
 23          WHERE   u.user# = c.owner# AND
 24                  o.obj# = cd.obj# AND
 25                  ro.obj# = cd.robj# AND
 26                  cd.con# = c.con# AND
 27                  cd.type# = 4 AND
 28                  ru.user# = ro.owner# AND
 29                  o.obj# = t.obj# (+) AND
 30                  u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 31                                 'LBACSYS', 'XDB',  'SI_INFORMTN_SCHEMA',
 32                                 'DIP',     'DMSYS','DBSNMP', 'EXFSYS',
 33                                 'WMSYS','ORACLE_OCM') AND
 34                  NOT EXISTS (
 35                      SELECT  name, owner, obj_type
 36                      FROM    sys.noexp$ ne
 37                      WHERE   ne.owner = u.name AND
 38                              ne.name = o.name  AND
 39                              ne.obj_type = 2)
 40  /

View created.

SQL> GRANT SELECT ON sys.exu8ref TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8refu AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8refu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for incremental and cumulative export
SQL> REM for tables just exported, i.expid will be greater than v.expid
SQL> REM as v.expid is incremented only at the end of the incremental export
SQL> REM but i.expid is incremented when the table is exported.
SQL> REM USED ONLY WHEN RECORD = YES
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8refic AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# = 2)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8refic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for incremental export
SQL> REM exutabi will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9refi AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9refi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for cumulative export, assuming
SQL> REM exutabc will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9refc AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9refc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for incremental export
SQL> REM exutabi will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81refi AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81refi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for cumulative export, assuming
SQL> REM exutabc will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81refc AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81refc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 referential constraints for incremental export
SQL> REM exutabi will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8refi AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8refi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 referential constraints for cumulative export, assuming
SQL> REM exutabc will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8refc AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8refc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM contraint column list
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ccl (
  2                  ownerid, ownername, cno, colname, colno, intcol, property) AS
  3          SELECT  o.owner#, u.name, cc.con#,
  4                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
  5                  cc.pos#, cc.intcol#, c.property
  6          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
  7                  sys.user$ u
  8          WHERE   o.obj# = cc.obj# AND
  9                  c.obj# = cc.obj# AND
 10                  cc.intcol# = c.intcol# AND
 11                  o.owner# = u.user# AND
 12                  c.obj# = at.obj# (+) AND
 13                  c.intcol# = at.intcol# (+) AND
 14                  NOT EXISTS (
 15                      SELECT  owner, name
 16                      FROM    sys.noexp$ ne
 17                      WHERE   ne.owner = u.name AND
 18                              ne.name = o.name AND
 19                              ne.obj_type = 2)
 20  /

View created.

SQL> GRANT SELECT ON sys.exu8ccl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8cclu AS
  2          SELECT  *
  3          FROM    sys.exu8ccl
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8cclu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8cclo (
  2                  ownerid, cno, colname, colno, property) AS
  3          SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property
  4          FROM    sys.exu8ccl a, sys.con$ b , sys.cdef$ c
  5          WHERE   b.owner# = UID AND
  6                  b.con# = c.con# AND
  7                  c.rcon# = a.cno
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8cclo TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.0.2 regular, nested table setid, and REF constraint columns/attributes.
SQL> REM
SQL> REM The only known way to get the col/attr name for the SETID column
SQL> REM of a nested table is to locate the column with the same col#, intcol# -1,
SQL> REM and segcol# = 0.
SQL> REM
SQL> REM Inclusion of the exploded PRIMARY KEY col/attr names in the constraint
SQL> REM column attribute names for pkREFs requires deriving the actual REF column/
SQL> REM attribute name via the comparison of the constraint column intcol(s) with
SQL> REM the intcol number(s) list data in coltype$.
SQL> REM Comparing against only the first intcol number(s) list datum assures that
SQL> REM only 1 row will be retrieved when referencing a compound PRIMARY KEY (which
SQL> REM will have multiple constraint columns).
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ccl (
  2                  ownerid, ownername, cno, colname, colno, intcol, property) AS
  3          SELECT  o.owner#, u.name, cc.con#,
  4                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
  5                  cc.pos#, c.intcol#, c.property
  6          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
  7                  sys.user$ u
  8          WHERE   o.obj# = cc.obj# AND
  9                  o.owner# = u.user# AND
 10                  c.obj# = cc.obj# AND
 11                  c.intcol# = cc.intcol# AND
 12                  BITAND(c.property, 2097152) = 0 AND               /* Not REA */
 13                  BITAND(c.property, 1024) = 0 AND                /* Not SETID */
 14                  c.obj# = at.obj# (+) AND
 15                  c.intcol# = at.intcol# (+) AND
 16                  NOT EXISTS (
 17                      SELECT  owner, name
 18                      FROM    sys.noexp$ ne
 19                      WHERE   ne.owner = u.name AND
 20                              ne.name = o.name AND
 21                              ne.obj_type = 2)
 22   UNION /* Nested Tables - SETID column */
 23          SELECT  o.owner#, u.name, cc.con#,
 24                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
 25                  cc.pos#, c.intcol#, c.property
 26          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
 27                  sys.user$ u, sys.col$ cn
 28          WHERE   o.obj# = cc.obj# AND
 29                  o.owner# = u.user# AND
 30                  cn.obj# = cc.obj# AND
 31                  cn.intcol# = cc.intcol# AND
 32                  BITAND(cn.property, 1024) = 1024 AND                /* SETID */
 33                  c.obj# = cc.obj# AND
 34                  c.col# = cn.col# AND
 35                  c.intcol# = (cn.intcol# - 1) AND
 36                  c.segcol# = 0 AND
 37                  c.obj# = at.obj# (+) AND
 38                  c.intcol# = at.intcol# (+) AND
 39                  NOT EXISTS (
 40                      SELECT  owner, name
 41                      FROM    sys.noexp$ ne
 42                      WHERE   ne.owner = u.name AND
 43                              ne.name = o.name AND
 44                              ne.obj_type = 2)
 45   UNION /* REFs - REF attribute columns */
 46          SELECT  o.owner#, u.name, cc.con#,
 47                  DECODE(BITAND(rc.property, 1), 1, at.name, rc.name),
 48                  cc.pos#, rc.intcol#, rc.property
 49          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
 50                  sys.user$ u, sys.coltype$ ct, sys.col$ rc
 51          WHERE   o.obj# = cc.obj# AND
 52                  o.owner# = u.user# AND
 53                  c.obj# = cc.obj# AND
 54                  c.intcol# = cc.intcol# AND
 55                  BITAND(c.property, 2097152) = 2097152 AND             /* REA */
 56                  ct.obj# = cc.obj# AND
 57                  ct.col# = cc.col# AND
 58                  UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTRB(ct.intcol#s, 1,2), 3) =
 59                    cc.intcol# AND            /* first list col# = constr col# */
 60                  rc.obj# = cc.obj# AND
 61                  rc.intcol# = ct.intcol# AND
 62                  rc.obj# = at.obj# (+) AND
 63                  rc.intcol# = at.intcol# (+) AND
 64                  NOT EXISTS (
 65                      SELECT  owner, name
 66                      FROM    sys.noexp$ ne
 67                      WHERE   ne.owner = u.name AND
 68                              ne.name = o.name AND
 69                              ne.obj_type = 2)
 70  /

View created.

SQL> GRANT SELECT ON sys.exu9ccl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9cclu AS
  2          SELECT  *
  3          FROM    sys.exu9ccl
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9cclu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9cclo (
  2                  ownerid, cno, colname, colno, property) AS
  3          SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property
  4          FROM    sys.exu9ccl a, sys.con$ b , sys.cdef$ c
  5          WHERE   b.owner# = UID AND
  6                  b.con# = c.con# AND
  7                  c.rcon# = a.cno
  8  /

View created.

SQL> GRANT SELECT ON sys.exu9cclo TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 10i version of ccl* views
SQL> REM
SQL> REM 9.0.2 regular, nested table setid, and REF constraint columns/attributes.
SQL> REM
SQL> REM The only known way to get the col/attr name for the SETID column
SQL> REM of a nested table is to locate the column with the same col#, intcol# -1,
SQL> REM and segcol# = 0.
SQL> REM
SQL> REM Inclusion of the exploded PRIMARY KEY col/attr names in the constraint
SQL> REM column attribute names for pkREFs requires deriving the actual REF column/
SQL> REM attribute name via the comparison of the constraint column intcol(s) with
SQL> REM the intcol number(s) list data in coltype$.
SQL> REM Comparing against only the first intcol number(s) list datum assures that
SQL> REM only 1 row will be retrieved when referencing a compound PRIMARY KEY (which
SQL> REM will have multiple constraint columns).
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10ccl (
  2                  ownerid, ownername, cno, colname, colno, intcol, property,
  3                  nolog) AS
  4          SELECT  o.owner#, u.name, cc.con#,
  5                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
  6                  cc.pos#, c.intcol#, c.property,
  7                  DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
  8          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
  9                  sys.user$ u
 10          WHERE   o.obj# = cc.obj# AND
 11                  o.owner# = u.user# AND
 12                  c.obj# = cc.obj# AND
 13                  c.intcol# = cc.intcol# AND
 14                  BITAND(c.property, 2097152) = 0 AND               /* Not REA */
 15                  BITAND(c.property, 1024) = 0 AND                /* Not SETID */
 16                  c.obj# = at.obj# (+) AND
 17                  c.intcol# = at.intcol# (+) AND
 18                  NOT EXISTS (
 19                      SELECT  owner, name
 20                      FROM    sys.noexp$ ne
 21                      WHERE   ne.owner = u.name AND
 22                              ne.name = o.name AND
 23                              ne.obj_type = 2)
 24   UNION /* Nested Tables - SETID column */
 25          SELECT  o.owner#, u.name, cc.con#,
 26                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
 27                  cc.pos#, c.intcol#, c.property,
 28                  DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
 29          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
 30                  sys.user$ u, sys.col$ cn
 31          WHERE   o.obj# = cc.obj# AND
 32                  o.owner# = u.user# AND
 33                  cn.obj# = cc.obj# AND
 34                  cn.intcol# = cc.intcol# AND
 35                  BITAND(cn.property, 1024) = 1024 AND                /* SETID */
 36                  c.obj# = cc.obj# AND
 37                  c.col# = cn.col# AND
 38                  c.intcol# = (cn.intcol# - 1) AND
 39                  c.segcol# = 0 AND
 40                  c.obj# = at.obj# (+) AND
 41                  c.intcol# = at.intcol# (+) AND
 42                  NOT EXISTS (
 43                      SELECT  owner, name
 44                      FROM    sys.noexp$ ne
 45                      WHERE   ne.owner = u.name AND
 46                              ne.name = o.name AND
 47                              ne.obj_type = 2)
 48   UNION /* REFs - REF attribute columns */
 49          SELECT  o.owner#, u.name, cc.con#,
 50                  DECODE(BITAND(rc.property, 1), 1, at.name, rc.name),
 51                  cc.pos#, rc.intcol#, rc.property,
 52                  DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
 53          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
 54                  sys.user$ u, sys.coltype$ ct, sys.col$ rc
 55          WHERE   o.obj# = cc.obj# AND
 56                  o.owner# = u.user# AND
 57                  c.obj# = cc.obj# AND
 58                  c.intcol# = cc.intcol# AND
 59                  BITAND(c.property, 2097152) = 2097152 AND             /* REA */
 60                  ct.obj# = cc.obj# AND
 61                  ct.col# = cc.col# AND
 62                  UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTRB(ct.intcol#s, 1,2), 3) =
 63                    cc.intcol# AND            /* first list col# = constr col# */
 64                  rc.obj# = cc.obj# AND
 65                  rc.intcol# = ct.intcol# AND
 66                  rc.obj# = at.obj# (+) AND
 67                  rc.intcol# = at.intcol# (+) AND
 68                  NOT EXISTS (
 69                      SELECT  owner, name
 70                      FROM    sys.noexp$ ne
 71                      WHERE   ne.owner = u.name AND
 72                              ne.name = o.name AND
 73                              ne.obj_type = 2)
 74  /

View created.

SQL> GRANT SELECT ON sys.exu10ccl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10cclu AS
  2          SELECT  *
  3          FROM    sys.exu10ccl
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10cclu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10cclo (
  2                  ownerid, cno, colname, colno, property, nolog) AS
  3          SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property, a.nolog
  4          FROM    sys.exu10ccl a, sys.con$ b , sys.cdef$ c
  5          WHERE   b.owner# = UID AND
  6                  b.con# = c.con# AND
  7                  c.rcon# = a.cno
  8  /

View created.

SQL> GRANT SELECT ON sys.exu10cclo TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers on tables and views
SQL> REM
SQL> REM Notes: Fetch trigger OBJ# for 9.2
SQL> REM        actionsize obsolete as of 8.0.4
SQL> REM        sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92tgr (
  2                  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, tproperty, name, basename, basetype, property,
  4                  btowner, btownerid, sys_evts, sqlver, actionsize,
  5                  trig_objno) AS
  6          SELECT  o.owner#, u.name, t.baseobject, t.definition, t.whenclause,
  7                  t.action#, t.enabled, t.property, o.name,
  8                  DECODE(BITAND(t.property, 24), 0, (
  9                      SELECT  o2.name
 10                      FROM    sys.exu81obj o2
 11                      WHERE   t.baseobject = o2.obj#), ''),
 12                  DECODE(BITAND(t.property, 24), 0, (
 13                      SELECT  o2.type#
 14                      FROM    sys.exu81obj o2
 15                      WHERE   t.baseobject = o2.obj#), 0),
 16                  NVL((
 17                      SELECT  tb.property
 18                      FROM    sys.tab$ tb
 19                      WHERE   t.baseobject = tb.obj#), 0),
 20                  NVL((
 21                      SELECT  ut.name
 22                      FROM    sys.user$ ut, sys.exu81obj o2
 23                      WHERE   t.baseobject = o2.obj# AND
 24                              o2.owner# = ut.user#), ''),
 25                  NVL((
 26                      SELECT  ut.user#
 27                      FROM    sys.user$ ut, sys.exu81obj o2
 28                      WHERE   t.baseobject = o2.obj# AND
 29                              o2.owner# = ut.user#), 0),
 30                  t.sys_evts,
 31                  (   SELECT  sv.sql_version
 32                      FROM    sys.exu816sqv sv
 33                      WHERE   o.spare1 = sv.version#),
 34                  t.actionsize, t.obj#
 35          FROM    sys.exu81obj o, sys.trigger$ t, sys.user$ u
 36          WHERE   o.obj# = t.obj# AND
 37                  u.user# = o.owner#
 38  /

View created.

SQL> GRANT SELECT ON sys.exu92tgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu92tgru AS
  2          SELECT  *
  3          FROM    sys.exu92tgr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu92tgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM (for 9.2 so lrgs don't get diffs - obsolete)
SQL> REM triggers for incremental and cumulative export for table just
SQL> REM exported.  See comment on exu8refic.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92tgric AS
  2          SELECT  *
  3          FROM    sys.exu92tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# IN (2, 4))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu92tgric TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre-8.1.6 - filter out enhanced system events
SQL> REM actionsize obsolete in 8.0.4
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92itgr AS
  2          SELECT  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, tproperty, name, basename, basetype, property,
  4                  btowner, btownerid, actionsize, trig_objno
  5          FROM    sys.exu92tgr
  6          WHERE   BITAND(sys_evts, 255) = sys_evts
  7  /

View created.

SQL> GRANT SELECT ON sys.exu92itgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for incremental export: record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92tgri AS
  2          SELECT  *
  3          FROM    sys.exu92itgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu92itgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu92tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for cumulative export: record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92tgrc AS
  2          SELECT  *
  3          FROM    sys.exu92itgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu92itgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu92tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> REM end of 9.2 incremental/cum views
SQL> 
SQL> 
SQL> REM
SQL> REM triggers on tables and views
SQL> REM
SQL> REM Notes: Replace previous outer joins with subqueries
SQL> REM        actionsize obsolete as of 8.0.4
SQL> REM        sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816tgr (
  2                  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, tproperty, name, basename, basetype, property,
  4                  btowner, btownerid, sys_evts, sqlver, actionsize) AS
  5          SELECT  o.owner#, u.name, t.baseobject, t.definition, t.whenclause,
  6                  t.action#, t.enabled, t.property, o.name,
  7                  DECODE(BITAND(t.property, 24), 0, (
  8                      SELECT  o2.name
  9                      FROM    sys.exu81obj o2
 10                      WHERE   t.baseobject = o2.obj#), ''),
 11                  DECODE(BITAND(t.property, 24), 0, (
 12                      SELECT  o2.type#
 13                      FROM    sys.exu81obj o2
 14                      WHERE   t.baseobject = o2.obj#), 0),
 15                  NVL((
 16                      SELECT  tb.property
 17                      FROM    sys.tab$ tb
 18                      WHERE   t.baseobject = tb.obj#), 0),
 19                  NVL((
 20                      SELECT  ut.name
 21                      FROM    sys.user$ ut, sys.exu81obj o2
 22                      WHERE   t.baseobject = o2.obj# AND
 23                              o2.owner# = ut.user#), ''),
 24                  NVL((
 25                      SELECT  ut.user#
 26                      FROM    sys.user$ ut, sys.exu81obj o2
 27                      WHERE   t.baseobject = o2.obj# AND
 28                              o2.owner# = ut.user#), 0),
 29                  t.sys_evts,
 30                  (   SELECT  sv.sql_version
 31                      FROM    sys.exu816sqv sv
 32                      WHERE   o.spare1 = sv.version#),
 33                  t.actionsize
 34          FROM    sys.exu81obj o, sys.trigger$ t, sys.user$ u
 35          WHERE   o.obj# = t.obj# AND
 36                  u.user# = o.owner#
 37  /

View created.

SQL> GRANT SELECT ON sys.exu816tgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre-8.1.6 - filter out enhanced system events
SQL> REM actionsize obsolete in 8.0.4
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tgr AS
  2          SELECT  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, tproperty, name, basename, basetype, property,
  4                  btowner, btownerid, actionsize
  5          FROM    sys.exu816tgr
  6          WHERE   BITAND(sys_evts, 255) = sys_evts
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81tgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre-8.1 filter out system events, call triggers, Java triggers, etc...
SQL> REM         (all but simple table and view triggers)
SQL> REM actionsize obsolete in 8.0.4
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tgr AS
  2          SELECT  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, name, basename, basetype, property, btowner,
  4                  btownerid, actionsize
  5          FROM    sys.exu816tgr
  6          WHERE   BITAND(tproperty, 127) in (0, 1)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8tgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu816tgru AS
  2          SELECT  *
  3          FROM    sys.exu816tgr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu816tgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81tgru AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8tgru AS
  2          SELECT  *
  3          FROM    sys.exu8tgr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8tgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for incremental and cumulative export for table just
SQL> REM exported.  See comment on exu8refic.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816tgric AS
  2          SELECT  *
  3          FROM    sys.exu816tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# IN (2, 4))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu816tgric TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81tgric AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# IN (2, 4))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81tgric TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8tgric AS
  2          SELECT  *
  3          FROM    sys.exu8tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# IN (2, 4))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tgric TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for incremental export: record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tgri AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu81tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu9tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu816tgri AS
  2          SELECT  *
  3          FROM    sys.exu816tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu816tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu816tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81tgri AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu81tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8tgri AS
  2          SELECT  *
  3          FROM    sys.exu8tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu8tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for cumulative export: record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tgrc AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu81tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu9tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu816tgrc AS
  2          SELECT *
  3          FROM    sys.exu816tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu816tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu816tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81tgrc AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu81tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8tgrc AS
  2          SELECT  *
  3          FROM    sys.exu8tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu8tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> REM 2734632 - use o.stime vs. o.mtime
SQL> CREATE OR REPLACE VIEW exu8spr(
  2                  ownerid, uname, id, name, time, typeid, type, audt, sqlver) AS
  3          SELECT  o.owner#, u.name, o.obj#, o.name,
  4                  TO_CHAR(o.stime, 'YYYY-MM-DD:HH24:MI:SS'), o.type#,
  5                  DECODE(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
  6                         11, 'PACKAGE BODY'),
  7                  p.audit$, sv.sql_version
  8          FROM    sys.exu81obj o, sys.user$ u, sys.procedure$ p, sys.exu816sqv sv
  9          WHERE   o.owner# = u.user# AND
 10                  o.type# IN (7, 8, 9, 11) AND
 11                  o.obj# = p.obj# AND
 12                  o.spare1 = sv.version# (+)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8spr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8spu AS
  2          SELECT  *
  3          FROM    sys.exu8spr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8spu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM stored procedures for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8spri AS
  2          SELECT  s.*
  3          FROM    sys.exu8spr s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 7) IN (7, 8, 9, 11) AND
  7                  NVL(i.expid, 9999) > v.expid
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8spri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM stored procedures for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8sprc AS
  2          SELECT  s.*
  3          FROM    sys.exu8spr s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 7) IN (7, 8, 9, 11) AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8sprc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8sps(
  2                  obj#, line, source) AS
  3          SELECT  obj#, line, source
  4          FROM    sys.source$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8sps TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8spsu(
  2                  obj#, line, source) AS
  3          SELECT  o.obj#, s.line, s.source
  4          FROM    sys.source$ s, sys.obj$ o
  5          WHERE   s.obj# = o.obj# AND
  6                  o.owner# = UID
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8spsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM stored java entities
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81jav(
  2                  ownerid, uname, id, shortname, typeid, type) AS
  3          SELECT  o.owner#, u.name, o.obj#, o.name, o.type#,
  4                  DECODE(o.type#, 28, 'JAVA SOURCE', 29, 'JAVA CLASS',
  5                         30, 'JAVA RESOURCE')
  6          FROM    sys.exu81obj o, sys.user$ u
  7          WHERE   o.owner# = u.user# AND
  8                  o.type# IN (28, 29, 30) AND
  9                  (UID IN (0, o.owner#) OR
 10                   EXISTS (
 11                      SELECT  role
 12                      FROM    sys.session_roles
 13                      WHERE   role = 'SELECT_CATALOG_ROLE')) AND
 14                  u.name != 'SYS'
 15  /

View created.

SQL> GRANT SELECT ON sys.exu81jav TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Java entities for incremental export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81javi AS
  2          SELECT  j.*
  3          FROM    sys.exu81jav j, sys.incexp i, sys.incvid v
  4          WHERE   j.shortname = i.name(+) AND
  5                  j.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 28) IN (28, 29, 30, 31) AND
  7                  v.expid < NVL(i.expid, 9999)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81javi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Java entities for cumulative export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81javc AS
  2          SELECT  j.*
  3          FROM    sys.exu81jav j, sys.incexp i, sys.incvid v
  4          WHERE   j.shortname = i.name(+) AND
  5                  j.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 28) IN (28, 29, 30, 31) AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81javc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM check whether java class DbmsJava is installed
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81javt (objid) AS
  2          SELECT  obj#
  3          FROM    sys.obj$
  4          WHERE   name LIKE '%DbmsJava' AND
  5                  type# = 29 AND
  6                  owner# = 0 AND
  7                  status = 1
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81javt TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM system auditting options
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8aud (
  2                  userid, name, action, success, failure) AS
  3          SELECT  a.user#, u.name, m.name, NVL(a.success, 0), NVL(a.failure, 0)
  4          FROM    sys.audit$ a, sys.user$ u, sys.stmt_audit_option_map m
  5          WHERE   a.user# = u.user# AND
  6                  a.option# = m.option# AND
  7                  BITAND(m.property, 1) != 1
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8aud TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM profiles
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8prf(
  2                  profile#, name) AS
  3          SELECT  profile#, name
  4          FROM    sys.profname$
  5          WHERE   profile# != 0
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8prf TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8prr(
  2                  profile#, resource#, resname, type, limit) AS
  3          SELECT  p.profile#, p.resource#, r.name, p.type#, p.limit#
  4          FROM    sys.profile$ p, sys.resource_map r
  5          WHERE   p.resource# != 9 AND
  6                  p.resource# = r.resource# AND
  7                  p.type# = r.type#
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8prr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM password verification function
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pvf (
  2                  funcid, funcname, line, source) AS
  3          SELECT  o.obj#, o.name, s.line, s.source
  4          FROM    sys.obj$ o, sys.source$ s
  5          WHERE   o.type# = 8 AND
  6                  o.owner# = 0 AND
  7                  o.obj# = s.obj#
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8pvf TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM password history
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8phs (
  2                  userid, uname, password, password_date) AS
  3          SELECT  h.user#, u.name, h.password, h.password_date
  4          FROM    sys.user_history$ h, sys.user$ u
  5          WHERE   h.user# = u.user#
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8phs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM trusted server links
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tsl (
  2                  function, dbname, type) AS
  3          SELECT  DECODE(tl.dbname, '+*', 'allow_all', '-*', 'deny_all',
  4                         fdef.function),
  5                  DECODE(tl.dbname, '+*', '', '-*', '', '('''||tl.dbname||''')'),
  6                  DECODE(tl.dbname, '+*', 0, '-*', 0, 1)
  7          FROM    sys.trusted_list$ tl, (
  8                      SELECT  DECODE (dbname, '+*', 'deny_server ', '-*',
  9                                      'allow_server ') function
 10                      FROM    sys.trusted_list$
 11                      WHERE   dbname like '%*') fdef
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8tsl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM New snapshot views for v10
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
  6                  rscn, objflag, flag2, status, sna_type_owner, sna_type_name,
  7                  parent_sowner, parent_vname,
  8                  file_ver, sql_ver, alias_txt, mview_comment, syn_count) AS
  9          SELECT  s.sowner, u.user#, s.vname, s.tname, s.mview, s.mlink, s.mtime,
 10                  DECODE(s.can_use_log, NULL, 'NO', 'YES'), NVL(s.error#, 0),
 11                  DECODE(s.auto_fast, 'C', 'COMPLETE', 'F', 'FAST', '?', 'FORCE',
 12                         NULL, 'FORCE', 'N', 'NEVER', 'ERROR'),
 13                  s.query_txt, NVL(s.flag, 0),
 14                  /*
 15                  ** have a flag for each snapshot types: rowid, primary key and
 16                  ** updatable for compatibility purpose
 17                  */
 18                  DECODE(BITAND(NVL(s.flag, 0), 16), 16, 1, 0),
 19                  DECODE(BITAND(NVL(s.flag, 0), 32), 32, 1, 0),
 20                  DECODE(BITAND(NVL(s.flag, 0), 2), 2, 1, 0),
 21                  s.ustrg, s.uslog, s.tables, NVL(s.master_version, 0),
 22                  RAWTOHEX(s.lobmaskvec), s.snapshot, NVL(s.snapid, 0),
 23                  s.instsite, NVL(s.flavor_id, 0),
 24                  s.rscn, s.objflag, s.flag2, s.status, s.sna_type_owner,
 25                  s.sna_type_name, s.parent_sowner, s.parent_vname,
 26                  8, 0, s.alias_txt, c.comment$, s.syn_count
 27          FROM    sys.snap$ s, sys.user$ u, sys.com$ c, sys.obj$ o, sys.tab$ t
 28          WHERE   u.name = s.sowner AND
 29                  o.owner# = u.user# AND
 30                  o.name = s.vname AND
 31                  o.type# = 2 AND
 32                  o.obj# = t.obj# AND
 33                  (bitand(t.property, 67108864) = 67108864) AND
 34                  o.obj# = c.obj#(+) AND c.col#(+) IS NULL
 35  /

View created.

SQL> GRANT SELECT ON exu10snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10snapu AS
  2          SELECT  *
  3          FROM    exu10snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT on sys.exu10snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM snapshots for incremental export: modified, altered or new
SQL> CREATE OR REPLACE VIEW exu10snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu10snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7   *                 ** Since snapshot also creates a view with the same name,
  8   *                                 ** we need to check for both type view(4) and snapshot(99).
  9   *                                                 ** Note: there will be duplicate entry in sys.incexp for this
 10   *                                                                 */
 11                  NVL(i.type#, 99) in (4, 99) AND
 12                  (s.mtime > i.itime OR
 13                   NVL(i.expid, 9999) > v.expid)
 14  /

View created.

SQL> GRANT SELECT ON exu10snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM The cumulative mode is not supported in 10g. So we do not have an exu10snapc
SQL> REM view, even though we have the exu9snapc for 9i.
SQL> 
SQL> REM
SQL> REM New snapshot views for v9
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
  6                  rscn, objflag, flag2, status, sna_type_owner, sna_type_name,
  7                  parent_sowner, parent_vname,
  8                  file_ver, sql_ver, alias_txt, mview_comment) AS
  9          SELECT  s.sowner, u.user#, s.vname, s.tname, s.mview, s.mlink, s.mtime,
 10                  DECODE(s.can_use_log, NULL, 'NO', 'YES'), NVL(s.error#, 0),
 11                  DECODE(s.auto_fast, 'C', 'COMPLETE', 'F', 'FAST', '?', 'FORCE',
 12                         NULL, 'FORCE', 'N', 'NEVER', 'ERROR'),
 13                  s.query_txt, NVL(s.flag, 0),
 14                  /*
 15                  ** have a flag for each snapshot types: rowid, primary key and
 16                  ** updatable for compatibility purpose
 17                  */
 18                  DECODE(BITAND(NVL(s.flag, 0), 16), 16, 1, 0),
 19                  DECODE(BITAND(NVL(s.flag, 0), 32), 32, 1, 0),
 20                  DECODE(BITAND(NVL(s.flag, 0), 2), 2, 1, 0),
 21                  s.ustrg, s.uslog, s.tables, NVL(s.master_version, 0),
 22                  RAWTOHEX(s.lobmaskvec), s.snapshot, NVL(s.snapid, 0),
 23                  s.instsite, NVL(s.flavor_id, 0),
 24                  s.rscn, s.objflag, s.flag2, s.status, s.sna_type_owner,
 25                  s.sna_type_name, s.parent_sowner, s.parent_vname,
 26                  5, 0, s.alias_txt, c.comment$
 27          FROM    sys.snap$ s, sys.user$ u, sys.com$ c, sys.obj$ o, sys.tab$ t
 28          WHERE   u.name = s.sowner AND
 29                  o.owner# = u.user# AND
 30                  o.name = s.vname AND
 31                  o.type# = 2 AND
 32                  o.obj# = t.obj# AND
 33                  (bitand(t.property, 67108864) = 67108864) AND
 34                  o.obj# = c.obj#(+) AND c.col#(+) IS NULL
 35  /

View created.

SQL> GRANT SELECT ON exu9snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9snapu AS
  2          SELECT  *
  3          FROM    exu9snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT on sys.exu9snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM snapshots for incremental export: modified, altered or new
SQL> CREATE OR REPLACE VIEW exu9snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu9snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7                  ** Since snapshot also creates a view with the same name,
  8                  ** we need to check for both type view(4) and snapshot(99).
  9                  ** Note: there will be duplicate entry in sys.incexp for this
 10                  */
 11                  NVL(i.type#, 99) in (4, 99) AND
 12                  (s.mtime > i.itime OR
 13                   NVL(i.expid, 9999) > v.expid)
 14  /

View created.

SQL> GRANT SELECT ON exu9snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM snapshots for cumulative export: new, last export was inc or not valid
SQL> CREATE OR REPLACE VIEW exu9snapc AS
  2          SELECT  s.*
  3          FROM    sys.exu9snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 99) = 99 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON exu9snapc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM new snapshot views for v81
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
  6                  file_ver, sql_ver) AS
  7          SELECT  owner, ownerid, name, table_name, master_view, master_link,
  8                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  9                  primkey_snap, update_snap, update_trig, update_log, mastabs,
 10                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
 11                  3, sql_ver
 12          FROM    exu9snap
 13          WHERE   BITAND(NVL(flag, 0), 16) +     /* supported snapshots: rowid */
 14                  BITAND(NVL(flag, 0), 32) +                    /* primary key */
 15                  BITAND(NVL(flag, 0), 256) +                       /* complex */
 16                  BITAND(NVL(flag, 0), 4096) > 0                  /* aggregate */
 17  
SQL> /

View created.

SQL> GRANT SELECT ON sys.exu81snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81snapu AS
  2          SELECT  *
  3          FROM    sys.exu81snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshots for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu81snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7                  ** Since snapshot also creates a view with the same name,
  8                  ** we need to check for both type view(4) and snapshot(99).
  9                  ** Note: there will be duplicate entry in sys.incexp for this
 10                  */
 11                  NVL(i.type#, 99) in (4, 99) AND
 12                  (s.mtime > i.itime OR
 13                   NVL(i.expid, 9999) > v.expid)
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshots for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snapc AS
  2          SELECT  s.*
  3          FROM    sys.exu81snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 99) = 99 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81snapc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81srt (
  2                  sowner, sownerid, vname, master_owner, master, tabnum,
  3                  refresh_time, master_flag, master_objnum, loadertime, instsite,
  4                  lastsuccess, fcmaskvec, ejmaskvec,
  5                  refscn, sub_handle, change_view) AS
  6          SELECT  srt.sowner, u.user#, srt.vname, srt.mowner, srt.master,
  7                  srt.tablenum, srt.snaptime, srt.masflag, srt.masobj#,
  8                  srt.loadertime, srt.instsite, srt.lastsuccess,
  9                  RAWTOHEX(srt.fcmaskvec), RAWTOHEX(srt.ejmaskvec),
 10                  srt.refscn, srt.sub_handle, srt.change_view
 11          FROM    sys.snap_reftime$ srt, sys.user$ u
 12          WHERE   u.name = srt.sowner
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81srt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81srtu AS
  2          SELECT  *
  3          FROM    sys.exu81srt
  4          WHERE   sownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81srtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81scm (
  2                  sowner, sownerid, vname, tabnum, snacol, mascol, maspos, role,
  3                  instsite, snapos) AS
  4          SELECT  sc.sowner, u.user#, sc.vname, sc.tabnum, sc.snacol, sc.mascol,
  5                  NVL(sc.maspos, 0), NVL(sc.colrole, 0), instsite, sc.snapos
  6          FROM    sys.snap_colmap$ sc, sys.user$ u
  7          WHERE   u.name = sc.sowner
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81scm TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81scmu AS
  2          SELECT  *
  3          FROM    sys.exu81scm
  4          WHERE   sownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81scmu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM snapshots
SQL> REM
SQL> REM NOTE:
SQL> REM * In V8.1, flag was changed from UB2 to UB4. Thus when exporting
SQL> REM   to V8.0.X, the value of flag must be forced into a UB2
SQL> REM * Do not include MAVs or MJVs (KKZFJVS|KKZFAV1|KKZFAGG)
SQL> REM * Do not export to V8.0.X if the base table name is not SNAP$_*
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, file_ver) AS
  6          SELECT  owner, ownerid, name, table_name, master_view, master_link,
  7                  mtime, can_use_log, error, type, query, MOD(flag, 65536),
  8                  rowid_snap, primkey_snap, update_snap, update_trig, update_log,
  9                  mastabs, masver, lob_vector, snapshot, snapid, 2
 10          FROM    sys.exu81snap
 11          WHERE   BITAND(flag, 28672) = 0 AND   /* Do not include MAVs or MJVs */
 12                  instsite = 0 AND          /* Do not include RepAPI snapshots */
 13                  table_name LIKE 'SNAP$_%'
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8snapu AS
  2          SELECT  *
  3          FROM    sys.exu8snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshots for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu8snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7                  ** Since snapshot also creates a view with the same name,
  8                  ** we need to check for both type view(4) and snapshot(99).
  9                  ** Note: there will be duplicate entry in sys.incexp for this
 10                  */
 11                  NVL(i.type#, 99) IN (4, 99) AND
 12                  (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshots for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snapc AS
  2          SELECT  s.*
  3          FROM    sys.exu8snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 99) = 99 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8snapc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot column mapping for each master table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8scm AS
  2          SELECT  sowner, sownerid, vname, tabnum, snacol, mascol, maspos, role
  3          FROM    sys.exu81scm
  4          WHERE   instsite = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8scm TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8scmu AS
  2          SELECT  *
  3          FROM    sys.exu8scm
  4          WHERE   sownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8scmu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot refresh time for each master table used by snapshot
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8srt AS
  2          SELECT  sowner, sownerid, vname, master_owner, master, tabnum,
  3                  refresh_time
  4          FROM    sys.exu81srt
  5          WHERE   instsite = 0              /* Do not include RepAPI snapshots */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8srt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8srtu AS
  2          SELECT  *
  3          FROM    sys.exu8srt
  4          WHERE   sownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8srtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM new snapshot log views for 10iR1
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10snapl(
  2                  log_owner, log_ownerid, master, log_table, log_trigger, flag,
  3                  youngest, oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl,
  4                  oid_snapl, seq_snapl, inv_snapl, file_ver, temp_log,
  5                  oldest_oid, oldest_new, oldest_seq) AS
  6          SELECT  m.mowner, u.user#, m.master, m.log, m.trig, NVL(m.flag, 0),
  7                  m.youngest, m.oldest, m.oldest_pk, m.mtime,
  8                  /* have a flag for each snapshot log types: rowid, primary key
  9                  ** for compatibility purpose */
 10                  DECODE(BITAND(NVL(m.flag, 0), 1), 1, 1, 0),
 11                  DECODE(BITAND(NVL(m.flag, 0), 2), 2, 1, 0),
 12                  DECODE(BITAND(NVL(m.flag, 0), 512), 512, 1, 0),
 13                  DECODE(BITAND(NVL(m.flag, 0), 1024), 1024, 1, 0),
 14                  DECODE(BITAND(NVL(m.flag, 0), 16), 16, 1, 0),
 15                  7, m.temp_log, m.oldest_oid, m.oldest_new, m.oldest_seq
 16          FROM    sys.mlog$ m, sys.user$ u
 17          WHERE   m.mowner = u.name
 18  /

View created.

SQL> GRANT SELECT ON sys.exu10snapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10snaplu AS
  2          SELECT  *
  3          FROM    sys.exu10snapl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10snaplu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10snapli AS
  2          SELECT  s.*
  3          FROM    sys.exu10snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  /* snapshot log also creates a table with the same name */
  7                  NVL(i.type#, 98) IN (2, 98) AND
  8                  (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu10snapli TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10snaplc AS
  2          SELECT  s.*
  3          FROM    sys.exu10snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 98) = 98 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu10snaplc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM new snapshot log views for v9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9snapl(
  2                  log_owner, log_ownerid, master, log_table, log_trigger, flag,
  3                  youngest, oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl,
  4                  oid_snapl, seq_snapl, inv_snapl, file_ver, temp_log,
  5                  oldest_oid, oldest_new) AS
  6          SELECT  m.mowner, u.user#, m.master, m.log, m.trig, NVL(m.flag, 0),
  7                  m.youngest, m.oldest, m.oldest_pk, m.mtime,
  8                  /* have a flag for each snapshot log types: rowid, primary key
  9                  ** for compatibility purpose */
 10                  DECODE(BITAND(NVL(m.flag, 0), 1), 1, 1, 0),
 11                  DECODE(BITAND(NVL(m.flag, 0), 2), 2, 1, 0),
 12                  DECODE(BITAND(NVL(m.flag, 0), 512), 512, 1, 0),
 13                  DECODE(BITAND(NVL(m.flag, 0), 1024), 1024, 1, 0),
 14                  DECODE(BITAND(NVL(m.flag, 0), 16), 16, 1, 0),
 15                  5, m.temp_log, m.oldest_oid, m.oldest_new
 16          FROM    sys.mlog$ m, sys.user$ u
 17          WHERE   m.mowner = u.name
 18  /

View created.

SQL> GRANT SELECT ON sys.exu9snapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9snaplu AS
  2          SELECT  *
  3          FROM    sys.exu9snapl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9snaplu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9snapli AS
  2          SELECT  s.*
  3          FROM    sys.exu9snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  /* snapshot log also creates a table with the same name */
  7                  NVL(i.type#, 98) IN (2, 98) AND
  8                  (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu9snapli TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9snaplc AS
  2          SELECT  s.*
  3          FROM    sys.exu9snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 98) = 98 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu9snaplc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM new snapshot log views for v8.1
SQL> REM select only v8.1 specific bits from mlog$.flag
SQL> REM do not export snapshot logs that are only OBJECT ID based.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snapl(
  2                  log_owner, log_ownerid, master, log_table, log_trigger, flag,
  3                  youngest, oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl,
  4                  file_ver, temp_log) AS
  5          SELECT  log_owner, log_ownerid, master, log_table, log_trigger,
  6                  /* Clear the bits (0x0080) and higher */
  7                  BITAND(flag, 127), youngest, oldest, oldest_pk, mtime,
  8                  rowid_snapl, primkey_snapl, 3, temp_log
  9          FROM    sys.exu9snapl
 10          WHERE   rowid_snapl = 1 OR
 11                  primkey_snapl = 1
 12  /

View created.

SQL> GRANT SELECT ON sys.exu81snapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81snaplu AS
  2          SELECT  *
  3          FROM    sys.exu81snapl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81snaplu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snapli AS
  2          SELECT  s.*
  3          FROM    sys.exu81snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  /* snapshot log also creates a table with the same name */
  7                  NVL(i.type#, 98) IN (2, 98) AND
  8                  (s.mtime > i.itime OR
  9                   NVL(i.expid, 9999) > v.expid)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu81snapli TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snaplc AS
  2          SELECT  s.*
  3          FROM    sys.exu81snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 98) = 98 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81snaplc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81slfc (
  2                  mowner, mownerid, master, colname, oldest, flag) AS
  3          SELECT  mr.mowner, u.user#, mr.master, mr.colname, mr.oldest,
  4                  NVL(mr.flag, 0)
  5          FROM    sys.mlog_refcol$ mr, sys.user$ u
  6          WHERE   u.name = mr.mowner
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81slfc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81slfcu AS
  2          SELECT  *
  3          FROM    sys.exu81slfc
  4          WHERE   mownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81slfcu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot log views for v8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snapl (
  2                  log_owner, log_ownerid, master, log_table, log_trigger, flag,
  3                  youngest, oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl,
  4                  file_ver) AS
  5          SELECT  log_owner, log_ownerid, master, log_table, log_trigger,
  6                  /* Clear bit (0x0040) indicating a temporary log was created */
  7                  DECODE(BITAND(flag, 64), 64, flag - 64, flag), youngest,
  8                  oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl, 2
  9          FROM    sys.exu81snapl
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8snapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8snaplu AS
  2          SELECT  *
  3          FROM    sys.exu8snapl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8snaplu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snapli AS
  2          SELECT  s.*
  3          FROM    sys.exu8snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  /* snapshot log also creates a table with the same name */
  7                  NVL(i.type#, 98) IN (2, 98) AND
  8                  (s.mtime > i.itime OR
  9                   NVL(i.expid, 9999) > v.expid)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8snapli TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snaplc AS
  2          SELECT  s.*
  3          FROM    sys.exu8snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 98) = 98 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8snaplc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on deleted snapshots -- they aren't in obj$
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8delsnap (
  2                  owner, name, type) AS
  3          SELECT  u$.name, i$.name, 'SNAPSHOT'
  4          FROM    sys.incexp i$, sys.user$ u$
  5          WHERE   i$.owner# = u$.user# AND
  6                  i$.type# = 99 AND
  7                  (u$.name, i$.name) NOT IN (
  8                      SELECT  s$.sowner, s$.vname
  9                      FROM    sys.snap$ s$
 10                      WHERE   s$.instsite = 0)
 11  /

View created.

SQL> GRANT SELECT ON sys.exu8delsnap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on deleted snapshot logs -- they aren't in obj$
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8delsnapl (
  2                  owner, name, type) AS
  3          SELECT  u$.name, i$.name, 'SNAPSHOT LOG'
  4          FROM    sys.incexp i$, sys.user$ u$
  5          WHERE   i$.owner# = u$.user# AND
  6                  i$.type# = 98 AND
  7                  (u$.name, i$.name) NOT IN (
  8                      SELECT  m$.mowner, m$.master
  9                      FROM    sys.mlog$ m$)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8delsnapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8slog (
  2                  mowner, mownerid, master, snapid, snaptime) AS
  3          SELECT  sl.mowner, u.user#, sl.master, NVL(sl.snapid, 0), sl.snaptime
  4          FROM    sys.slog$ sl, sys.user$ u
  5          WHERE   u.name = sl.mowner
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8slog TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8slogu AS
  2          SELECT  *
  3          FROM    sys.exu8slog
  4          WHERE   mownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8slogu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM in v8.0 primary keys are not logged as filter columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8slfc (
  2                  mowner, mownerid, master, colname, oldest, flag) AS
  3          SELECT  mowner, mownerid, master, colname, oldest, 0
  4          FROM    sys.exu81slfc
  5          WHERE   BITAND(flag, 2) != 2
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8slfc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8slfcu AS
  2          SELECT  *
  3          FROM    sys.exu8slfc
  4          WHERE   mownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8slfcu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8glob (
  2                  global_name) AS
  3          SELECT  value$
  4          FROM    sys.props$
  5          WHERE   name = 'GLOBAL_DB_NAME'
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8glob TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on analyzed objects (obsolete in 8.1)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8anal(
  2                  id, rowcnt) AS
  3          SELECT  obj#, SIGN(NVL(rowcnt, -1))
  4          FROM    sys.tab$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8anal TO PUBLIC;

Grant succeeded.

SQL> GRANT SELECT ON sys.exu8anal TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Indexes for which optimizer statistics cannot be easily imported
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9nos (
  2                  tobjid, towner)
  3        AS                             /* Indexes for table must be exportable */
  4          SELECT  to$.obj#, to$.owner#
  5          FROM    sys.obj$ to$, sys.obj$ io$, sys.ind$ ind$
  6          WHERE   ind$.bo# = to$.obj# AND
  7                  ind$.obj# = io$.obj# AND
  8                  ind$.blevel != -1 AND
  9                  ind$.type# = 8 AND                              /* LOB index */
 10                  (UID IN (to$.owner#, 0) OR
 11                   EXISTS (
 12                      SELECT  role
 13                      FROM    sys.session_roles
 14                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 15        UNION ALL                            /* Table cannot have associations */
 16          SELECT  to$.obj#, to$.owner#
 17          FROM    sys.obj$ to$, sys.association$ a$
 18          WHERE   to$.obj# = a$.obj# AND
 19                  to$.type# = 2 AND                                   /* Table */
 20                  (UID IN (to$.owner#, 0) OR
 21                   EXISTS (
 22                      SELECT  role
 23                      FROM    sys.session_roles
 24                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 25        UNION ALL               /* Type used in table cannot have associations */
 26          SELECT  to$.obj#, to$.owner#
 27          FROM    sys.obj$ to$, sys.obj$ tt$, sys.coltype$ ct$,
 28                  sys.association$ a$
 29          WHERE   to$.obj# = ct$.obj# AND
 30                  ct$.toid = tt$.oid$ AND
 31                  tt$.obj# = a$.obj# AND
 32                  (UID IN (to$.owner#, 0) OR
 33                   EXISTS (
 34                      SELECT  role
 35                      FROM    sys.session_roles
 36                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 37  /

View created.

SQL> GRANT SELECT ON sys.exu9nos TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Indexes for which optimizer statistics cannot be easily imported
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81nos (
  2                  tobjid, towner)
  3        AS                             /* Indexes for table must be exportable */
  4          SELECT  to$.obj#, to$.owner#
  5          FROM    sys.obj$ to$, sys.obj$ io$, sys.ind$ ind$
  6          WHERE   ind$.bo# = to$.obj# AND
  7                  ind$.obj# = io$.obj# AND
  8                  ind$.blevel != -1 AND
  9                  (BITAND(io$.flags, 4) = 4 OR             /* system generated */
 10                   ind$.type# = 8) AND                            /* LOB index */
 11                  (UID IN (to$.owner#, 0) OR
 12                   EXISTS (
 13                      SELECT  role
 14                      FROM    sys.session_roles
 15                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 16        UNION ALL                            /* Table cannot have associations */
 17          SELECT  to$.obj#, to$.owner#
 18          FROM    sys.obj$ to$, sys.association$ a$
 19          WHERE   to$.obj# = a$.obj# AND
 20                  to$.type# = 2 AND                                   /* Table */
 21                  (UID IN (to$.owner#, 0) OR
 22                   EXISTS (
 23                      SELECT  role
 24                      FROM    sys.session_roles
 25                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 26        UNION ALL               /* Type used in table cannot have associations */
 27          SELECT  to$.obj#, to$.owner#
 28          FROM    sys.obj$ to$, sys.obj$ tt$, sys.coltype$ ct$,
 29                  sys.association$ a$
 30          WHERE   to$.obj# = ct$.obj# AND
 31                  ct$.toid = tt$.oid$ AND
 32                  tt$.obj# = a$.obj# AND
 33                  (UID IN (to$.owner#, 0) OR
 34                   EXISTS (
 35                      SELECT  role
 36                      FROM    sys.session_roles
 37                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 38  /

View created.

SQL> GRANT SELECT ON sys.exu81nos TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Associations
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81assoc (
  2                  objowner, objowner#, objtype, objname, objcol, statsschema,
  3                  statsname, selectivity, cpu_cost, io_cost, net_cost) AS
  4          SELECT  ou$.name, oo$.owner#, a$.property, oo$.name, NVL(c$.name, ''),
  5                  NVL(su$.name, ''), NVL(so$.name, ''),
  6                  NVL(a$.default_selectivity, 0), NVL(a$.default_cpu_cost, 0),
  7                  NVL(a$.default_io_cost, 0), NVL(a$.default_net_cost, 0)
  8          FROM    sys.association$ a$, sys.exu81obj oo$, sys.user$ ou$,
  9                  sys.col$ c$, sys.obj$ so$, sys.user$ su$
 10          WHERE   a$.obj# = oo$.obj# AND
 11                  oo$.owner# = ou$.user# AND
 12                  a$.intcol# = c$.intcol# (+) AND
 13                  a$.obj# = c$.obj# (+) AND
 14                  a$.statstype# = so$.obj# (+) AND
 15                  so$.owner# = su$.user# (+) AND
 16                  (UID IN (0, oo$.owner#) OR
 17                   EXISTS (
 18                      SELECT  role
 19                      FROM    sys.session_roles
 20                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 21  /

View created.

SQL> GRANT SELECT ON sys.exu81assoc TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM add a view to determine storage clause for unique constraint
SQL> REM need for it to be user level because two different users can have the
SQL> REM same index name
SQL> REM Fields ipctfree, initr, imaxtr, and ipctthres are only used
SQL> REM for iots, not for regular tables.
SQL> REM
SQL> REM Obsolete with 9.0.2
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8uscu (
  2                  iobjid, idobjid, iname, itsno, ifileno, iblockno, ibobjid,
  3                  ipctfree, iinitr, imaxtr, ipctthres, tspname, property,
  4                  preccnt, deflog, ipbobjid) AS
  5          SELECT  o$.obj#, o$.dataobj#, o$.name, i$.ts#, i$.file#, i$.block#,
  6                  i$.bo#, i$.pctfree$, i$.initrans, i$.maxtrans,
  7                  MOD(i$.pctthres$, 256), t$.name, i$.property, i$.spare2,
  8                  DECODE(BITAND(i$.flags, 4), 4, 1, 0), 0
  9          FROM    sys.obj$ o$, sys.ind$ i$, sys.file$ f$, sys.ts$ t$
 10          WHERE   o$.obj# = i$.obj# AND
 11                  f$.relfile# = i$.file# AND
 12                  f$.ts# = i$.ts# AND
 13                  f$.ts# = t$.ts#
 14        UNION ALL
 15          SELECT  o$.obj#, o$.dataobj#, o$.name, ip$.ts#, ip$.file#, ip$.block#,
 16                  ind$.bo#, ip$.pctfree$, ip$.initrans, ip$.maxtrans,
 17                  MOD(ip$.pctthres$, 256), ts$.name, ind$.property, ip$.spare2,
 18                  DECODE(BITAND(ind$.flags, 4), 4, 1, 0), ip$.bo#
 19          FROM    sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$, sys.ind$ ind$,
 20                  sys.tab$ t$
 21          WHERE   ip$.obj# = o$.obj# AND
 22                  ts$.ts# = ip$.ts# AND
 23                  ip$.bo# = ind$.obj# AND
 24                  o$.type# = 20 AND                        /* Index partitions */
 25                  ind$.bo# = t$.obj#
 26                  AND BITAND(t$.property, 64) = 0                  /* Non-IOTs */
 27  /

View created.

SQL> GRANT SELECT ON sys.exu8uscu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For iots only: Get top level index's characteristics
SQL> REM Expanded in 9.0.2 for use with IOTs in addition to PIOTs
SQL> REM  (dataobj only non null for IOTs)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81usci (
  2                  ipctthres, ipreccnt, iobjid, tobjid, ovfobjid, ownerid,
  3                  itsno, ifileno, iblockno, ipctfree, iinitr, imaxtr, deflog,
  4                  idobjid) AS
  5          SELECT  MOD(i$.pctthres$, 256), NVL(i$.spare2, 0), i$.obj#, i$.bo#,
  6                  NVL(t$.bobj#, 0), o$.owner#, i$.ts#, i$.file#, i$.block#,
  7                  i$.pctfree$, i$.initrans, i$.maxtrans,
  8                  DECODE(BITAND(i$.flags, 4), 4, 1, 0), NVL(i$.dataobj#, 0)
  9          FROM    sys.ind$ i$, sys.obj$ o$, sys.tab$ t$
 10          WHERE   i$.bo# = t$.obj# AND
 11                  t$.obj# = o$.obj# AND
 12                  i$.type# = 4
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81usci TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81usciu AS
  2          SELECT  *
  3          FROM    sys.exu81usci
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81usciu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For iots only: Get top level index's characteristics
SQL> REM Expanded in 9.0.2 for use with IOTs in addition to PIOTs
SQL> REM Expanded in 10.2.1 for mapping table.
SQL> REM  (dataobj only non null for IOTs)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10usci (
  2                  ipctthres, ipreccnt, iobjid, tobjid, ovfobjid, ownerid,
  3                  itsno, ifileno, iblockno, ipctfree, iinitr, imaxtr, deflog,
  4                  idobjid, mapobj) AS
  5          SELECT  MOD(i$.pctthres$, 256), NVL(i$.spare2, 0), i$.obj#, i$.bo#,
  6                  NVL(t$.bobj#, 0), o$.owner#, i$.ts#, i$.file#, i$.block#,
  7                  i$.pctfree$, i$.initrans, i$.maxtrans,
  8                  DECODE(BITAND(i$.flags, 4), 4, 1, 0), NVL(i$.dataobj#, 0),
  9                  t$.pctfree$  /* mapping table obj# for IOTs */
 10          FROM    sys.ind$ i$, sys.obj$ o$, sys.tab$ t$
 11          WHERE   i$.bo# = t$.obj# AND
 12                  t$.obj# = o$.obj# AND
 13                  i$.type# = 4
 14  /

View created.

SQL> GRANT SELECT ON sys.exu10usci TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10usciu AS
  2          SELECT  *
  3          FROM    sys.exu10usci
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10usciu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rif (
  2                  objid, owner, ownerid, tname, rowner, rtname, cname, cno, rcno,
  3                  action, enabled, robjid, defer, property) AS
  4          SELECT  o.obj#, u.name, c.owner#, o.name, ru.name, ro.name, c.name,
  5                  c.con#, cd.rcon#, NVL(cd.refact, 0), NVL(cd.enabled, 0),
  6                  cd.robj#, NVL(cd.defer, 0), t.property
  7          FROM    sys.user$ u, sys.user$ ru, sys.obj$ o, sys.obj$ ro, sys.con$ c,
  8                  sys.cdef$ cd, sys.tab$ t
  9          WHERE   u.user# = c.owner# AND
 10                  o.obj# = cd.obj# AND
 11                  ro.obj# = cd.robj# AND
 12                  cd.con# = c.con# AND
 13                  cd.type# = 4 AND
 14                  ru.user# = ro.owner# AND
 15                  t.obj# = o.obj#
 16  /

View created.

SQL> GRANT SELECT ON sys.exu8rif TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8erc (
  2                  resource_name, unit_cost) AS
  3          SELECT  m.name, c.cost
  4          FROM    sys.resource_cost$ c, sys.resource_map m
  5          WHERE   c.resource# = m.resource# AND
  6                  m.type# = 0 AND
  7                  c.resource# IN (2, 4, 7, 8)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8erc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM determine OID index for a table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8oid (
  2                  tobjid, intcol, iname, idefer, ownerid, pctfree$, initrans,
  3                  maxtrans, itsno, ifile, iblock, itsname, idobjid) AS
  4          SELECT  cc$.obj#, cc$.intcol#, co$.name, cd$.defer, co$.owner#,
  5                  i$.pctfree$, i$.initrans, i$.maxtrans, i$.ts#, i$.file#,
  6                  i$.block#, ts$.name, i$.dataobj#
  7          FROM    sys.ccol$ cc$, sys.con$ co$, sys.cdef$ cd$, sys.obj$ o$,
  8                  sys.ind$ i$, sys.ts$ ts$
  9          WHERE   cc$.con# = co$.con# AND
 10                  cc$.con# = cd$.con# AND
 11                  cd$.type# = 3 AND
 12                  co$.owner# = o$.owner# AND
 13                  co$.name = o$.name AND
 14                  o$.obj# = i$.obj# AND
 15                  i$.ts# = ts$.ts#
 16  /

View created.

SQL> GRANT SELECT ON sys.exu8oid TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8oidu AS
  2          SELECT  *
  3          FROM    sys.exu8oid
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8oidu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM determine LOB index and LOB storage for a table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lob (
  2                  tobjid, ownerid, cname, sname, ssgflag, stsname, stsno, sfile,
  3                  sblock, sdobjid, schunking, svpool, sflags, iname, isgflag,
  4                  itsname, itsno, ifile, iblock, idobjid, iinitrans, imaxtrans,
  5                  sproperty, coltype, coltypflg, blocksize, intcolid, opaquetype,
  6                  ifreepool)
  7        AS
  8          SELECT  l$.obj#, so$.owner#,
  9                  DECODE(BITAND(c$.property, 1), 0, '"'||c$.name||'"', 1,
 10                         ac$.name),
 11                  so$.name, so$.flags, sts$.name, sts$.ts#, l$.file#, l$.block#,
 12                  so$.dataobj#, l$.chunk, l$.pctversion$, l$.flags, io$.name,
 13                  io$.flags, its$.name, its$.ts#, i$.file#, i$.block#,
 14                  io$.dataobj#, i$.initrans, i$.maxtrans, l$.property,
 15                  NVL(c$.type#, 0), NVL(ct$.flags, 0), sts$.blocksize,
 16                  c$.intcol#,
 17                  NVL((SELECT opq.type
 18                       FROM   sys.opqtype$ opq
 19                       WHERE  c$.type# = 58 AND
 20                              c$.obj# = opq.obj# AND
 21                              c$.intcol# = opq.intcol#), -1),
 22                  l$.freepools
 23          FROM    sys.lob$ l$, sys.obj$ so$, sys.col$ c$, sys.attrcol$ ac$,
 24                  sys.seg$ ss$, sys.ts$ sts$, sys.ind$ i$, sys.obj$ io$,
 25                  sys.ts$ its$, sys.coltype$ ct$
 26          WHERE   l$.lobj# = so$.obj# AND
 27                  l$.obj# = c$.obj# AND
 28                  l$.intcol# =
 29                       NVL((SELECT opq.lobcol
 30                            FROM   sys.opqtype$ opq
 31                            WHERE  c$.type# = 58 AND                 /* opaque */
 32                                   c$.obj# = opq.obj# AND
 33                                   c$.intcol# = opq.intcol# AND
 34                                   opq.type = 1 AND                /* XMLType */
 35                                   BITAND(opq.flags, 4) = 4  /* stored as lob */
 36                           ), c$.intcol#) AND
 37                  c$.obj# = ac$.obj#(+) AND
 38                  c$.intcol# = ac$.intcol#(+) AND
 39                  l$.file# = ss$.file# AND
 40                  l$.block# = ss$.block# AND
 41                  ss$.ts# = sts$.ts# AND
 42                  l$.ind# = i$.obj# AND
 43                  l$.ind# = io$.obj# AND
 44                  i$.ts# = its$.ts# AND
 45                  sts$.ts# = its$.ts# AND
 46                  c$.obj# = ct$.obj# (+) AND
 47                  c$.intcol# = ct$.intcol# (+) AND
 48                  BITAND(c$.property, 32768) != 32768 AND /* not unused column */
 49                  BITAND(c$.property, 256) != 256         /* not sys generated */
 50  /

View created.

SQL> GRANT SELECT ON sys.exu9lob TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM lob indexes for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lobu AS
  2          SELECT  *
  3          FROM    sys.exu9lob
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9lobu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 table LOB index/storage adjusted for TS specific blocksizes
SQL> REM determine LOB index and LOB storage for a table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lob (
  2                  tobjid, ownerid, cname, sname, ssgflag, stsname, stsno, sfile,
  3                  sblock, sdobjid, schunking, svpool, sflags, iname, isgflag,
  4                  itsname, itsno, ifile, iblock, idobjid, iinitrans, imaxtrans,
  5                  sproperty, coltype, coltypflg) AS
  6          SELECT  l.tobjid, l.ownerid, l.cname, l.sname, l.ssgflag, l.stsname,
  7                  l.stsno, l.sfile, l.sblock, l.sdobjid,
  8                  CEIL(l.schunking * (l.blocksize / (
  9                      SELECT  t$.blocksize
 10                      FROM    sys.ts$ t$
 11                      WHERE   t$.ts# = 0))),
 12                  l.svpool, l.sflags, l.iname, l.isgflag, l.itsname, l.itsno,
 13                  l.ifile, l.iblock, l.idobjid, l.iinitrans, l.imaxtrans,
 14                  l.sproperty, l.coltype, l.coltypflg
 15          FROM    sys.exu9lob l
 16  /

View created.

SQL> GRANT SELECT ON sys.exu8lob TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's table LOB index/storage adjusted for TS specific
SQL> REM blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lobu AS
  2          SELECT  *
  3          FROM    sys.exu8lob
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8lobu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM table level attributes definition for LOB columns
SQL> REM in partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9plb (
  2                  tobjid, ownerid, cname, lobname, tsname, sgflags, property,
  3                  chunk, versionp, flags, iniexts, extsize, minexts, maxexts,
  4                  extpct, flists, freegrp, pcache, coltype, coltypflg,
  5                  blocksize, intcolid, opaquetype) AS
  6          SELECT  o.obj#, o.owner#,
  7                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
  8                  lo.name, ts.name, lo.flags,
  9                  plob.defpro, plob.defchunk, plob.defpctver$, plob.defflags,
 10                  NVL(plob.definiexts, 0), NVL(plob.defextsize, 0),
 11                  NVL(plob.defminexts, 0), NVL(plob.defmaxexts, 0),
 12                  NVL(plob.defextpct, -1), NVL(plob.deflists, 0),
 13                  NVL(plob.defgroups, 0),
 14                  DECODE(plob.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE',
 15                         NULL),
 16                  NVL(c.type#, 0), NVL(ct.flags, 0),
 17                  NVL(ts.blocksize, NVL(
 18                          /* should be avail. thru lobcompart, lobfrag if null */
 19                  (SELECT ts2.blocksize
 20                  FROM    sys.ts$ ts2, sys.lobfrag$ lf
 21                  WHERE   l.lobj# = lf.parentobj# AND
 22                          lf.ts# = ts2.ts# AND rownum < 2),
 23                  (SELECT ts2.blocksize
 24                  FROM    sys.ts$ ts2, sys.lobcomppart$ lcp, sys.lobfrag$ lf
 25                  WHERE   l.lobj# = lcp.lobj# AND
 26                          lcp.partobj# = lf.parentobj# AND
 27                          lf.ts# = ts2.ts# AND rownum < 2))),
 28                  c.intcol#,
 29                  NVL((SELECT opq.type
 30                       FROM   sys.opqtype$ opq
 31                       WHERE  c.type# = 58 AND
 32                              c.obj# = opq.obj# AND
 33                              c.intcol# = opq.intcol#), -1)
 34          FROM    sys.partlob$ plob, sys.obj$ o, sys.lob$ l, sys.col$ c,
 35                  sys.attrcol$ ac, sys.coltype$ ct, sys.obj$ lo, sys.ts$ ts
 36          WHERE   o.obj# = c.obj# AND
 37                  l.obj# = c.obj# AND
 38                  l.intcol# =
 39                       NVL((SELECT opq.lobcol
 40                            FROM   sys.opqtype$ opq
 41                            WHERE  c.type# = 58 AND                  /* opaque */
 42                                   c.obj# = opq.obj# AND
 43                                   c.intcol# = opq.intcol# AND
 44                                   opq.type = 1 AND                 /* XMLType */
 45                                   BITAND(opq.flags, 4) = 4   /* stored as lob */
 46                           ), c.intcol#) AND
 47                  l.obj# = ac.obj#(+) and
 48                  l.intcol# = ac.intcol#(+) and
 49                  l.lobj# = lo.obj# AND
 50                  l.lobj# = plob.lobj#  AND
 51                  plob.defts# = ts.ts# (+) AND
 52                  c.obj# = ct.obj# (+) AND
 53                  c.intcol# = ct.intcol# (+) AND
 54                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 55                  BITAND(c.property, 256) != 256          /* not sys generated */
 56  /

View created.

SQL> GRANT SELECT ON sys.exu9plb TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM table level default attributes for current
SQL> REM user's LOB columns in partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9plbu AS
  2          SELECT  *
  3          FROM    sys.exu9plb
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9plbu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 partitioned tables table level attributes definition for LOB
SQL> REM columns adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81plb (
  2                  tobjid, ownerid, cname, lobname, tsname, sgflags, property,
  3                  chunk, versionp, flags, iniexts, extsize, minexts, maxexts,
  4                  extpct, flists, freegrp, pcache, coltype, coltypflg) AS
  5          SELECT  l.tobjid, l.ownerid, l.cname, l.lobname, l.tsname, l.sgflags,
  6                  l.property,
  7                  CEIL(l.chunk * (l.blocksize / (
  8                      SELECT  t$.blocksize
  9                      FROM    sys.ts$ t$
 10                      WHERE   t$.ts# = 0))),
 11                  l.versionp, l.flags,
 12                  CEIL(l.iniexts * (l.blocksize / (
 13                      SELECT  t$.blocksize
 14                      FROM    sys.ts$ t$
 15                      WHERE   t$.ts# = 0))),
 16                  CEIL(l.extsize * (l.blocksize / (
 17                      SELECT  t$.blocksize
 18                      FROM    sys.ts$ t$
 19                      WHERE   t$.ts# = 0))),
 20                  l.minexts, l.maxexts, l.extpct, l.flists, l.freegrp, l.pcache,
 21                  l.coltype, l.coltypflg
 22          FROM    sys.exu9plb l
 23  /

View created.

SQL> GRANT SELECT ON sys.exu81plb TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's partitioned tables table level attributes definition
SQL> REM for LOB columns adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81plbu AS
  2          SELECT  *
  3          FROM    sys.exu81plb
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81plbu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM determine attributes of noncomposite partitions of LOB columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lbp (
  2                  pobjid, tobjid, ownerid, cname, lobpname, tsname, sgflags,
  3                  chunk, versionp, flags, property, tsno, fileno, blockno,
  4                  dobjid, iname, isgflag, itsname, itsno, ifile, iblock,
  5                  idobjid, iinitrans, imaxtrans, coltype, coltypflg, blocksize)
  6        AS
  7          SELECT  /*+ NO_INDEX(i_obj1) +*/
  8                  po.obj#, o.obj#, o.owner#,
  9                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
 10                  lpo.subname,
 11                  ts.name, lpo.flags, lf.chunk, lf.pctversion$, lf.fragflags,
 12                  lf.fragpro, lf.ts#, lf.file#, lf.block#, lpo.dataobj#,
 13                  lipo.name, lipo.flags, its.name, its.ts#, ip.file#, ip.block#,
 14                  lipo.dataobj#, ip.initrans , ip.maxtrans, NVL(c.type#, 0),
 15                  (select NVL(ct.flags, 0) from sys.coltype$ ct
 16                          where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
 17                  ts.blocksize
 18          FROM    sys.indpart$ ip, sys.obj$ o, sys.col$ c,
 19                  sys.attrcol$ ac, sys.obj$ lpo,
 20                  sys.lob$ l, sys.partobj$ pobj, sys.ts$ ts, sys.obj$ lipo,
 21                  sys.lobfrag$ lf, sys.obj$ po, sys.ts$ its
 22          WHERE   pobj.obj# = o.obj# AND
 23                  MOD(pobj.spare2, 256) = 0 AND
 24                  o.obj# = c.obj# AND
 25                  c.obj# = l.obj# AND
 26                  l.obj# = ac.obj#(+) AND
 27                  l.intcol# = ac.intcol#(+) AND
 28                  c.intcol# = l.intcol# AND
 29                  l.lobj# = lf.parentobj# AND
 30                  lf.fragobj# = lpo.obj# AND
 31                  lf.tabfragobj# = po.obj# AND
 32                  lf.indfragobj# = lipo.obj# AND
 33                  lf.indfragobj# = ip.obj# AND
 34                  ip.ts# = its.ts# AND
 35                  lf.ts# = ts.ts# AND
 36                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 37                  BITAND(c.property, 256) != 256          /* not sys generated */
 38        UNION ALL                                                      /* PIOT */
 39          SELECT  /*+ NO_INDEX(i_obj1) +*/
 40                  ipt.obj#, o.obj#, o.owner#,
 41                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
 42                  lpo.subname,
 43                  ts.name, lpo.flags, lf.chunk, lf.pctversion$, lf.fragflags,
 44                  lf.fragpro, lf.ts#, lf.file#, lf.block#, lpo.dataobj#,
 45                  lipo.name, lipo.flags, its.name, its.ts#, ip.file#, ip.block#,
 46                  lipo.dataobj#, ip.initrans , ip.maxtrans, NVL(c.type#, 0),
 47                  (select NVL(ct.flags, 0) from sys.coltype$ ct
 48                          where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
 49                  ts.blocksize
 50          FROM    sys.indpart$ ipt, sys.indpart$ ip, sys.ind$ i, sys.tabpart$ tp,
 51                  sys.obj$ o, sys.col$ c, sys.attrcol$ ac,
 52                  sys.obj$ lpo, sys.lob$ l,
 53                  sys.partobj$ pobj, sys.ts$ ts, sys.obj$ lipo, sys.lobfrag$ lf,
 54                  sys.ts$ its
 55          WHERE   i.obj# = ipt.bo# AND
 56                  tp.bo# = i.bo# AND
 57                  tp.part# = ipt.part# AND
 58                  pobj.obj# = o.obj# AND
 59                  MOD(pobj.spare2, 256) = 0 AND
 60                  o.obj# = c.obj# AND
 61                  c.obj# = l.obj# AND
 62                  l.obj# = ac.obj#(+) AND
 63                  l.intcol# = ac.intcol#(+) AND
 64                  c.intcol# = l.intcol# AND
 65                  l.lobj# = lf.parentobj# AND
 66                  lf.fragobj# = lpo.obj# AND
 67                  lf.tabfragobj# = tp.obj#  AND
 68                  lf.indfragobj# = lipo.obj# AND
 69                  lf.indfragobj# = ip.obj# AND
 70                  ip.ts# = its.ts# AND
 71                  lf.ts# = ts.ts# AND
 72                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 73                  BITAND(c.property, 256) != 256          /* not sys generated */
 74  /

View created.

SQL> GRANT SELECT ON sys.exu9lbp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9lbpu AS
  2          SELECT  *
  3          FROM    sys.exu9lbp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9lbpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 attributes of noncomposite partitions of LOB columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbp (
  2                  pobjid, ownerid, cname, lobpname, tsname, sgflags, chunk,
  3                  versionp, flags, property, tsno, fileno, blockno, dobjid,
  4                  iname, isgflag, itsname, itsno, ifile, iblock, idobjid,
  5                  iinitrans, imaxtrans, coltype, coltypflg) AS
  6          SELECT  l.pobjid, l.ownerid, l.cname, l.lobpname, l.tsname, l.sgflags,
  7                  CEIL(l.chunk * (l.blocksize / (
  8                      SELECT  t$.blocksize
  9                      FROM    sys.ts$ t$
 10                      WHERE   t$.ts# = 0))),
 11                  l.versionp, l.flags, l.property, l.tsno, l.fileno, l.blockno,
 12                  l.dobjid, l.iname, l.isgflag, l.itsname, l.itsno, l.ifile,
 13                  l.iblock, l.idobjid, l.iinitrans, l.imaxtrans, l.coltype,
 14                  l.coltypflg
 15          FROM    sys.exu9lbp l
 16  /

View created.

SQL> GRANT SELECT ON sys.exu81lbp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's attributes of noncomposite partitions of LOB columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbpu AS
  2          SELECT  *
  3          FROM    sys.exu81lbp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81lbpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM determine LOB attributes for a composite partition
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lbcp (
  2                  pobjid, ownerid, cname, lobcpname, tsname, sgflags, chunk,
  3                  versionp, flags, property, iniexts, extsize, minexts, maxexts,
  4                  extpct, flists, fgroups, pcache, coltype, coltypflg, blocksize)
  5        AS
  6          SELECT  po.obj#, o.owner#,
  7                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
  8                  lpo.subname, ts.name,
  9                  lpo.flags, lcp.defchunk, lcp.defpctver$, lcp.defflags,
 10                  lcp.defpro, NVL(lcp.definiexts, 0), NVL(lcp.defextsize, 0),
 11                  NVL(lcp.defminexts, 0), NVL(lcp.defmaxexts, 0),
 12                  NVL(lcp.defextpct, -1), NVL(lcp.deflists, 0),
 13                  NVL(lcp.defgroups, 0),
 14                  DECODE(lcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE',
 15                         NULL),
 16                  NVL(c.type#, 0), NVL(ct.flags, 0),
 17                  NVL(ts.blocksize, (/*should be avail. thru tabcompart if null*/
 18                      SELECT  t$.blocksize
 19                      FROM    sys.ts$ t$
 20                      WHERE   t$.ts# = (NVL((
 21                                  SELECT  tcp$.defts#
 22                                  FROM    sys.tabcompart$ tcp$
 23                                  WHERE   tcp$.obj# = lcp.tabpartobj#),
 24                                             0))))
 25          FROM    sys.obj$ o, sys.lob$ l, sys.col$ c, sys.attrcol$ ac,
 26                  sys.obj$ lo, sys.obj$ lpo,
 27                  sys.lobcomppart$ lcp, sys.obj$ po, sys.ts$ ts,
 28                  sys.partobj$ pobj, sys.coltype$ ct
 29          WHERE   pobj.obj# = o.obj# AND
 30                  MOD(pobj.spare2, 256) != 0 AND
 31                  o.obj# = c.obj# AND
 32                  c.obj# = l.obj# AND
 33                  l.obj# = ac.obj#(+) AND
 34                  l.intcol# = ac.intcol#(+) AND
 35                  l.intcol# = c.intcol# AND
 36                  l.lobj# = lo.obj# AND
 37                  l.lobj# = lcp.lobj# AND
 38                  lcp.tabpartobj# = po.obj# AND
 39                  lcp.partobj# = lpo.obj# AND
 40                  lcp.defts# = ts.ts# (+) AND
 41                  c.obj# = ct.obj# (+) AND
 42                  c.intcol# = ct.intcol# (+) AND
 43                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 44                  BITAND(c.property, 256) != 256          /* not sys generated */
 45  /

View created.

SQL> GRANT SELECT ON sys.exu9lbcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9lbcpu AS
  2          SELECT  *
  3          FROM    sys.exu9lbcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9lbcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 LOB attributes for a composite partition adjusted for TS specific
SQL> REM blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbcp (
  2                  pobjid, ownerid, cname, lobcpname, tsname, sgflags, chunk,
  3                  versionp, flags, property, iniexts, extsize, minexts, maxexts,
  4                  extpct, flists, fgroups, pcache, coltype, coltypflg) AS
  5          SELECT  l.pobjid, l.ownerid, l.cname, l.lobcpname, l.tsname, l.sgflags,
  6                  CEIL(l.chunk * (l.blocksize / (
  7                      SELECT  t$.blocksize
  8                      FROM    sys.ts$ t$
  9                      WHERE   t$.ts# = 0))),
 10                  l.versionp, l.flags, l.property,
 11                  CEIL(l.iniexts * (l.blocksize / (
 12                      SELECT  t$.blocksize
 13                      FROM    sys.ts$ t$
 14                      WHERE t$.ts# = 0))),
 15                  CEIL(l.extsize * (l.blocksize / (
 16                      SELECT  t$.blocksize
 17                      FROM    sys.ts$ t$
 18                      WHERE   t$.ts# = 0))),
 19                  l.minexts, l.maxexts, l.extpct, l.flists, l.fgroups, l.pcache,
 20                  l.coltype, l.coltypflg
 21          FROM    sys.exu9lbcp l
 22  /

View created.

SQL> GRANT SELECT ON sys.exu81lbcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's LOB attributes for a composite partition adjusted for
SQL> REM TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbcpu AS
  2          SELECT  *
  3          FROM    sys.exu81lbcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81lbcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Determine LOB storage for subpartition of LOB columns
SQL> REM for 8.1 and later
SQL> REM for 9.0 no columns needing pre 9.0 blocksize adjustment
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbsp (
  2                  pobjid, tobjid, ownerid, cname, lobspname, tsname, sgflags,
  3                  tsno, fileno, blockno, dobjid, iname, isgflag, itsname, itsno,
  4                  ifile, iblock, idobjid, iinitrans, imaxtrans, coltype,
  5                  coltypflg, blocksize) AS
  6          SELECT  /*+ NO_INDEX(i_obj1) +*/
  7                  spo.obj#, o.obj#, o.owner#,
  8                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
  9                  lspo.subname,
 10                  ts.name, lspo.flags, ts.ts#, lf.file#, lf.block#,
 11                  lspo.dataobj#, lispo.name, lispo.flags, its.name, its.ts#,
 12                  isp.file#, isp.block#, lispo.dataobj#, isp.initrans,
 13                  isp.maxtrans, NVL(c.type#, 0),
 14                  (select NVL(ct.flags, 0) from sys.coltype$ ct
 15                          where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
 16                  ts.blocksize
 17          FROM    sys.lobfrag$ lf, sys.indsubpart$ isp, sys.lobcomppart$ lcp,
 18                  sys.partobj$ pobj, sys.obj$ o, sys.col$ c,
 19                  sys.attrcol$ ac, sys.lob$ l,
 20                  sys.obj$ spo, sys.obj$ lspo, sys.obj$ lispo, sys.ts$ its,
 21                  sys.ts$ ts
 22          WHERE   pobj.obj# = o.obj# AND
 23                  MOD(pobj.spare2, 256) != 0 AND
 24                  o.obj# = c.obj# AND
 25                  c.obj# = l.obj# AND
 26                  c.intcol# = l.intcol# AND
 27                  l.obj# = ac.obj#(+) AND
 28                  l.intcol# = ac.intcol#(+) AND
 29                  l.lobj# = lcp.lobj# AND
 30                  lf.parentobj# = lcp.partobj# AND
 31                  lf.fragobj# = lspo.obj# AND
 32                  lf.tabfragobj# = spo.obj# AND
 33                  lf.indfragobj# = lispo.obj# AND
 34                  lf.indfragobj# = isp.obj# AND
 35                  isp.ts# = its.ts# AND
 36                  lf.ts# = ts.ts# AND
 37                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 38                  BITAND(c.property, 256) != 256          /* not sys generated */
 39  /

View created.

SQL> GRANT SELECT ON sys.exu81lbsp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81lbspu AS
  2          SELECT  /*+ NO_INDEX(xx1.o i_obj2) +*/ *
  3          FROM    sys.exu81lbsp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81lbspu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Job Queues
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8jbq (
  2                  job, ownerid, owner, lowner, cowner, next_date, flag,
  3                  interval#, what, nlsenv, env, instance) AS
  4          SELECT  j$.job, u$.user#, j$.powner, j$.lowner, j$.cowner,
  5                  TO_CHAR(j$.next_date, 'YYYY-MM-DD:HH24:MI:SS'),
  6                  DECODE(j$.flag, 1, 'TRUE', 0, 'FALSE'),
  7                  REPLACE(j$.interval#, '''', ''''''),
  8                  REPLACE(j$.what, '''', ''''''),
  9                  REPLACE(j$.nlsenv, '''', ''''''), j$.env, j$.field1
 10          FROM    sys.job$ j$, sys.user$ u$
 11          WHERE   j$.powner = u$.name AND
 12                  upper(what) <> 'SYS.DBMS_AQADM_SYS.REGISTER_DRIVER();'
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8jbq TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8jbqu AS
  2          SELECT  *
  3          FROM    sys.exu8jbq
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8jbqu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Refresh Groups
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81rgs (
  2                  refgroup, ownerid, owner, instsite) AS
  3          SELECT  NVL(r$.refgroup, 0), u$.user#, r$.owner, r$.instsite
  4          FROM    sys.rgroup$ r$, sys.user$ u$
  5          WHERE   r$.owner = u$.name
  6  /

View created.

SQL> GRANT SELECT ON sys.exu81rgs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81rgsu AS
  2          SELECT  *
  3          FROM    sys.exu81rgs
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81rgsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rgs AS
  2          SELECT  refgroup, ownerid, owner
  3          FROM    sys.exu81rgs
  4          WHERE   instsite = 0              /* Do not include RepAPI refgroups */
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rgs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rgsu AS
  2          SELECT  *
  3          FROM    sys.exu8rgs
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rgsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Refresh Group Children
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81rgc (
  2                  owner, ownerid, child, type, refgroup, instsite) AS
  3          SELECT  rc$.owner, u$.user#, rc$.name, rc$.type#, NVL(rc$.refgroup, 0),
  4                  rc$.instsite
  5          FROM    sys.rgchild$ rc$, sys.user$ u$
  6          WHERE   rc$.owner = u$.name
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81rgc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81rgcu AS
  2          SELECT  *
  3          FROM    sys.exu81rgc
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81rgcu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rgc AS
  2          SELECT  owner, ownerid, child, type, refgroup
  3          FROM    sys.exu81rgc
  4          WHERE   instsite = 0              /* Do not include RepAPI snapshots */
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rgc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rgcu AS
  2          SELECT  *
  3          FROM    sys.exu8rgc
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rgcu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pst (
  2                  owner, ownerid, tname, tobjid, callorder, callarg, objtype,
  3                  usrarg, property) AS
  4          SELECT  a$.owner, u$.user#, a$.name, o$.obj#, a$.callorder, a$.callarg,
  5                  a$.obj_type, a$.user_arg, t$.property
  6          FROM    sys.expact$ a$, sys.user$ u$, sys.obj$ o$, sys.tab$ t$
  7          WHERE   u$.name = a$.owner AND
  8                  o$.owner# = u$.user# AND
  9                  o$.name = a$.name AND
 10                  t$.obj# = o$.obj#
 11  /

View created.

SQL> GRANT SELECT ON sys.exu8pst TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8pstu AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8pstu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions incremental/cumulative with record = Y
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pstic AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# = 2)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8pstic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions for incremental export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9psti AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9psti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions for cumulative  export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pstc AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9pstc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.1 PoSTtables actions for incremental export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81psti AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81psti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions for cumulative  export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81pstc AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81pstc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 PoSTtables actions for incremental export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8psti AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8psti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 PoSTtables actions for cumulative  export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pstc AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8pstc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Version Control
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ver (
  2                  version) AS
  3          SELECT  TO_NUMBER(value$)
  4          FROM    sys.props$
  5          WHERE   name = 'EXPORT_VIEWS_VERSION'
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8ver TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Check for Procedural and Replication Options (obsolete in 8.0.4)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cpo (
  2                  parameter, value) AS
  3          SELECT  parameter, DECODE(value, 'TRUE', 1, 'FALSE', 0, 2)
  4          FROM    sys.v$option
  5          WHERE   parameter IN ('procedural', 'replication')
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8cpo TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Check for non-exportable objects for all users
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8nxp (
  2                  ownerid, owner, name, type) AS
  3          SELECT  u$.user#, n$.owner, n$.name, n$.obj_type
  4          FROM    sys.noexp$ n$, sys.user$ u$
  5          WHERE   n$.owner = u$.name
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8nxp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Check for non-exportable objects for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8nxpu AS
  2          SELECT  owner, name, type
  3          FROM    sys.exu8nxp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8nxpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain types of top level columns of a table
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typt (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, deporder, typeid,
  5                  roottoid) AS
  6          SELECT  o.name, u.name, o.owner#, t.toid,
  7                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  8                  tm.audit$, sv.sql_version, t.properties,
  9                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 10                  NVL(t.roottoid,HEXTORAW('00'))
 11          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 12                  sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d
 13          WHERE   t.toid = c.toid AND
 14                  o.oid$ = c.toid AND
 15                  u.user# = o.owner# AND
 16                  o.obj# = tm.obj# AND
 17                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 18                  NVL(o.type#, -1) != 10 AND
 19                  t.toid  = t.tvoid AND                    /* Latest type only */
 20                  o.spare1 = sv.version# (+) AND
 21                  c.obj# = d.d_obj# AND
 22                  d.p_obj# = o.obj#
 23  /

View created.

SQL> GRANT SELECT ON sys.exu8typt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain types of top level columns of a table (9.2+)
SQL> REM  possibly having PUBLIC type synonyms
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typt (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, synobjno, colsynobjno ) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, sy.obj#, c.synobj#
  9          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 10                  sys.type_misc$ tm, sys.exu816sqv sv, sys.obj$ ne, sys.obj$ sy
 11          WHERE   t.toid = c.toid AND
 12                  o.oid$ = c.toid AND
 13                  u.user# = o.owner# AND
 14                  o.obj# = tm.obj# AND
 15                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 16                  NVL(o.type#, -1) != 10 AND
 17                  t.toid  = t.tvoid AND                    /* Latest type only */
 18                  o.spare1 = sv.version# (+) AND
 19                  ne.obj# = c.synobj#  AND /* non_exist (neg depend) */
 20                  sy.name = ne.name AND
 21                  sy.owner# = 1 AND  /* PUBLIC */
 22                  sy.type# = 5 /* SYNONYM */
 23  /

View created.

SQL> GRANT SELECT ON sys.exu9typt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain types of top level columns of a table (9.2+)
SQL> REM  possibly having PRIVATE type synonyms
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typt2 (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, synobjno, colsynobjno ) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, c.synobj#, c.synobj#
  9          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 10                  sys.type_misc$ tm, sys.exu816sqv sv
 11          WHERE   t.toid = c.toid AND
 12                  o.oid$ = c.toid AND
 13                  u.user# = o.owner# AND
 14                  o.obj# = tm.obj# AND
 15                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 16                  NVL(o.type#, -1) != 10 AND
 17                  t.toid  = t.tvoid AND                    /* Latest type only */
 18                  o.spare1 = sv.version# (+)
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9typt2 TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typtu (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, deporder, typeid,
  5                  roottoid) AS
  6          SELECT  o.name, u.name, o.owner#, t.toid,
  7                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  8                  tm.audit$, sv.sql_version, t.properties,
  9                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 10                  NVL(t.roottoid,HEXTORAW('00'))
 11          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 12                  sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d
 13          WHERE   t.toid = c.toid AND
 14                  o.oid$ = c.toid AND
 15                  u.user# = o.owner# AND
 16                  o.obj# = tm.obj# AND
 17                  BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
 18                  t.toid  = t.tvoid AND                    /* Latest type only */
 19                  NVL(o.type#, -1) != 10 AND
 20                  c.obj# = d.d_obj# AND
 21                  d.p_obj# = o.obj# AND
 22                  (o.owner# = UID OR                  /* owned by current user */
 23                  /* current user or public role have execute access to type */
 24                  o.obj# IN (
 25                      SELECT  oa.obj#
 26                      FROM    sys.objauth$ oa
 27                      WHERE   oa.obj# = o.obj# AND
 28                              oa.privilege# = 12 AND                /* execute */
 29                              oa.grantee# IN (UID, 1)) OR
 30                  EXISTS ( /* current user or public role can execute any type */
 31                      SELECT  NULL
 32                      FROM    sys.sysauth$ sa
 33                      WHERE   sa.grantee# IN (UID, 1) AND
 34                              sa.privilege# = -184)) AND
 35                  o.spare1 = sv.version# (+)
 36  /

View created.

SQL> GRANT SELECT ON sys.exu8typtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view (9.2+)
SQL> REM
SQL> REM obtain types of top level columns of a table (9.2+)
SQL> REM  possibly having PUBLIC type synonyms
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typtu (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, synobjno, colsynobjno) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, sy.obj#, c.synobj#
  9          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 10                  sys.type_misc$ tm, sys.exu816sqv sv, sys.obj$ ne, sys.obj$ sy
 11          WHERE   t.toid = c.toid AND
 12                  o.oid$ = c.toid AND
 13                  u.user# = o.owner# AND
 14                  o.obj# = tm.obj# AND
 15                  BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
 16                  t.toid  = t.tvoid AND                    /* Latest type only */
 17                  NVL(o.type#, -1) != 10 AND
 18                  (o.owner# = UID OR                  /* owned by current user */
 19                  /* current user or public role have execute access to type */
 20                  o.obj# IN (
 21                      SELECT  oa.obj#
 22                      FROM    sys.objauth$ oa
 23                      WHERE   oa.obj# = o.obj# AND
 24                              oa.privilege# = 12 AND                /* execute */
 25                              oa.grantee# IN (UID, 1)) OR
 26                  EXISTS ( /* current user or public role can execute any type */
 27                      SELECT  NULL
 28                      FROM    sys.sysauth$ sa
 29                      WHERE   sa.grantee# IN (UID, 1) AND
 30                              sa.privilege# = -184)) AND
 31                  o.spare1 = sv.version# (+) AND
 32                  ne.obj# = c.synobj#  AND /* non_exist (neg depend) */
 33                  sy.name = ne.name AND
 34                  sy.owner# = 1 AND  /* PUBLIC */
 35                  sy.type# = 5 /* SYNONYM */
 36  /

View created.

SQL> GRANT SELECT ON sys.exu9typtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view (9.2+)
SQL> REM
SQL> REM obtain types of top level columns of a table (9.2+)
SQL> REM  possibly having PRIVATE type synonyms
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typtu2 (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, synobjno, colsynobjno) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, c.synobj#, c.synobj#
  9          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 10                  sys.type_misc$ tm, sys.exu816sqv sv
 11          WHERE   t.toid = c.toid AND
 12                  o.oid$ = c.toid AND
 13                  u.user# = o.owner# AND
 14                  o.obj# = tm.obj# AND
 15                  BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
 16                  t.toid  = t.tvoid AND                    /* Latest type only */
 17                  NVL(o.type#, -1) != 10 AND
 18                  (o.owner# = UID OR                  /* owned by current user */
 19                  /* current user or public role have execute access to type */
 20                  o.obj# IN (
 21                      SELECT  oa.obj#
 22                      FROM    sys.objauth$ oa
 23                      WHERE   oa.obj# = o.obj# AND
 24                              oa.privilege# = 12 AND                /* execute */
 25                              oa.grantee# IN (UID, 1)) OR
 26                  EXISTS ( /* current user or public role can execute any type */
 27                      SELECT  NULL
 28                      FROM    sys.sysauth$ sa
 29                      WHERE   sa.grantee# IN (UID, 1) AND
 30                              sa.privilege# = -184)) AND
 31                  o.spare1 = sv.version# (+)
 32  /

View created.

SQL> GRANT SELECT ON sys.exu9typtu2 TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain parent types and subtypes, given a type
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8fpt (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, typeid,
  4                  roottoid) AS
  5                  /* Parent types */
  6          SELECT  o.name, u.name, o.owner#, t.toid,
  7                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  8                  tm.audit$, sv.sql_version, t.properties,
  9                  o.status, t.version#, t.hashcode, t.typeid,
 10                  NVL(t.roottoid,HEXTORAW('00'))
 11          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 12                  sys.type_misc$ tm, sys.exu816sqv sv
 13          WHERE   o.obj# = d.p_obj# AND
 14                  o.type# = 13 AND
 15                  o.oid$ = t.toid AND
 16                  o.owner# = u.user# AND
 17                  o.obj# = tm.obj# AND
 18                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 19                  o.spare1 = sv.version# (+) AND
 20                  t.toid = t.tvoid                     /* Only the latest type */
 21       UNION      /* Subtypes */
 22          SELECT  o.name, u.name, o.owner#, t.toid,
 23                  TO_CHAR(o.mtime,  'YYYY-MM-DD:HH24:MI:SS'), o.obj#, so.obj#,
 24                  tm.audit$, sv.sql_version, t.properties,
 25                  o.status, t.version#, t.hashcode, t.typeid,
 26                  NVL(t.roottoid,HEXTORAW('00'))
 27          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ so,
 28                  sys.type_misc$ tm, sys.exu816sqv sv
 29          WHERE   o.type# = 13 AND
 30                  o.oid$ = t.toid AND
 31                  o.owner# = u.user# AND
 32                  so.oid$ = t.roottoid AND
 33                  o.obj# = tm.obj# AND
 34                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 35                  o.spare1 = sv.version# (+) AND
 36                  t.toid = t.tvoid                     /* Only the latest type */
 37  /

View created.

SQL> GRANT SELECT ON sys.exu8fpt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8fptu (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, typeid,
  4                  roottoid) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, t.typeid,
  9                  NVL(t.roottoid,HEXTORAW('00'))
 10          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 11                  sys.type_misc$ tm, sys.exu816sqv sv
 12          WHERE   o.obj# = d.p_obj# AND
 13                  o.type# = 13 AND
 14                  o.oid$ = t.toid AND
 15                  o.owner# = u.user# AND
 16                  o.obj# = tm.obj# AND
 17                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 18                  (o.owner# = UID OR                  /* owned by current user */
 19                  /* current user or public role have execute access to type */
 20                  o.obj# IN (
 21                      SELECT  oa.obj#
 22                      FROM    sys.objauth$ oa
 23                      WHERE   oa.obj# = o.obj# AND
 24                              oa.privilege# = 12 AND                /* execute */
 25                              oa.grantee# IN (UID, 1)) OR
 26                  EXISTS ( /* current user or public role can execute any type */
 27                      SELECT  NULL
 28                      FROM    sys.sysauth$ sa
 29                      WHERE   sa.grantee# IN (UID, 1) AND
 30                              sa.privilege# = -184)) AND
 31                  o.spare1 = sv.version# (+) AND
 32                  t.toid   = t.tvoid                   /* Only the latest type */
 33       UNION
 34          SELECT  o.name, u.name, o.owner#, t.toid,
 35                  TO_CHAR(o.mtime,  'YYYY-MM-DD:HH24:MI:SS'), o.obj#, so.obj#,
 36                  tm.audit$, sv.sql_version, t.properties,
 37                  o.status, t.version#, t.hashcode, t.typeid,
 38                  NVL(t.roottoid,HEXTORAW('00'))
 39          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ so,
 40                  sys.type_misc$ tm, sys.exu816sqv sv
 41          WHERE   o.type# = 13 AND
 42                  o.oid$ = t.toid AND
 43                  o.owner# = u.user# AND
 44                  so.oid$ = t.roottoid AND
 45                  o.obj# = tm.obj# AND
 46                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 47                  (o.owner# = UID OR                  /* owned by current user */
 48                  /* current user or public role have execute access to type */
 49                  o.obj# IN (
 50                          SELECT  oa.obj#
 51                          FROM    sys.objauth$ oa
 52                          WHERE   oa.obj# = o.obj# AND
 53                                  oa.privilege# = 12 AND            /* execute */
 54                                  (oa.grantee# = UID OR
 55                                   oa.grantee# = 1)) OR
 56                  /* current user or public role can execute any type */
 57                  EXISTS (
 58                          SELECT  NULL
 59                          FROM    sys.sysauth$ sa
 60                          WHERE   (sa.grantee# = UID OR
 61                                   sa.grantee# = 1) AND
 62                                  sa.privilege# = -184 )) AND
 63                  o.spare1 = sv.version# (+)  AND
 64                  t.toid   = t.tvoid                   /* Only the latest type */
 65  /

View created.

SQL> GRANT SELECT ON sys.exu8fptu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain type body object number and audit, from type name and schema name
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typb (
  2                  tname, towner, townerid, objno, sqlver) AS
  3          SELECT  o.name, u.name, o.owner#, o.obj#, sv.sql_version
  4          FROM    sys.obj$ o, sys.user$ u, sys.exu816sqv sv
  5          WHERE   o.type# = 14 AND
  6                  u.user# = o.owner# AND
  7                  o.spare1 = sv.version# (+)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8typb TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8typbu AS
  2          SELECT  *
  3          FROM    sys.exu8typb
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8typbu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on all types
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typ (
  2                  tname, towner, ownerid, toid, mtime, objno, audit$,
  3                  secondaryobj, sqlver, typobjstatus, tversion, thashcode,
  4                  typeid, roottoid) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, tm.audit$,
  7                  DECODE(BITAND(o.flags, 16), 16, 1, 0), sv.sql_version,
  8                  o.status, t.version#, t.hashcode, t.typeid,
  9                  NVL(t.roottoid,HEXTORAW('00'))
 10          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.type_misc$ tm,
 11                  sys.exu816sqv sv
 12          WHERE   o.type# = 13 AND
 13                  o.oid$ = t.toid AND
 14                  u.user# = o.owner# AND
 15                  tm.obj# = o.obj# AND
 16                  t.toid  = t.tvoid AND                 /* Only the latest rev */
 17                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 18                  u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 19                                 'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA',
 20                                 'DIP', 'DMSYS', 'DBSNMP', 'EXFSYS', 'WMSYS','ORACLE_OCM') AND
 21                  o.spare1 = sv.version# (+)
 22  /

View created.

SQL> GRANT SELECT ON sys.exu9typ TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on types for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typu AS
  2          SELECT  *
  3          FROM    sys.exu9typ
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9typu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on all types
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81typ (
  2                  tname, towner, ownerid, toid, mtime, objno, audit$,
  3                  secondaryobj, sqlver, typobjstatus, tversion, thashcode) AS
  4          SELECT  o.name, u.name, o.owner#, t.toid,
  5                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, tm.audit$,
  6                  DECODE(BITAND(o.flags, 16), 16, 1, 0), sv.sql_version,
  7                  o.status, t.version#, t.hashcode
  8          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.type_misc$ tm,
  9                  sys.exu816sqv sv
 10          WHERE   o.type# = 13 AND
 11                  o.oid$ = t.toid AND
 12                  u.user# = o.owner# AND
 13                  tm.obj# = o.obj# AND
 14                  t.toid  = t.tvoid AND                 /* Only the latest rev */
 15                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 16                  u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 17                                 'LBACSYS', 'XDB',  'SI_INFORMTN_SCHEMA',
 18                                  'DIP',    'DMSYS','DBSNMP', 'EXFSYS',
 19                                  'WMSYS','ORACLE_OCM') AND
 20                  o.spare1 = sv.version# (+) AND
 21                  BITAND(t.properties, 8) = 0 AND           /* skip NOT FINAL */
 22                  BITAND(t.properties, 8192) = 0             /* skip subtypes */
 23  /

View created.

SQL> GRANT SELECT ON sys.exu81typ TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on types for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81typu AS
  2          SELECT  *
  3          FROM    sys.exu81typ
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81typu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V8.0 type view, exu8typ must be subseted from exu81typ in order to filter
SQL> REM out types marked 'secondary object'.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typ AS
  2          SELECT  *
  3          FROM    sys.exu81typ
  4          WHERE   secondaryobj = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8typ TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on types for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typu AS
  2          SELECT  *
  3          FROM    sys.exu8typ
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8typu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain parent types given a type
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92fptp (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, deporder,
  4                  typeid, roottoid) AS
  5                  /* Parent types */
  6          SELECT  o.name, u.name, o.owner#, t.toid,
  7                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  8                  tm.audit$, sv.sql_version, t.properties,
  9                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 10                  NVL(t.roottoid,HEXTORAW('00'))
 11          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 12                  sys.type_misc$ tm, sys.exu816sqv sv
 13          WHERE   o.obj# = d.p_obj# AND
 14                  o.type# = 13 AND
 15                  o.oid$ = t.toid AND
 16                  o.owner# = u.user# AND
 17                  o.obj# = tm.obj# AND
 18                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 19                  o.spare1 = sv.version# (+) AND
 20                  t.toid = t.tvoid                     /* Only the latest type */
 21  /

View created.

SQL> GRANT SELECT ON sys.exu92fptp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92fptpu (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, deporder,
  4                  typeid, roottoid)
  5                  AS
  6                  /* Parent types */
  7          SELECT  o.name, u.name, o.owner#, t.toid,
  8                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  9                  tm.audit$, sv.sql_version, t.properties,
 10                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 11                  NVL(t.roottoid,HEXTORAW('00'))
 12          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 13                  sys.type_misc$ tm, sys.exu816sqv sv
 14          WHERE   o.obj# = d.p_obj# AND
 15                  o.type# = 13 AND
 16                  o.oid$ = t.toid AND
 17                  o.owner# = u.user# AND
 18                  o.obj# = tm.obj# AND
 19                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 20                  (o.owner# = UID OR                  /* owned by current user */
 21                  /* current user or public role have execute access to type */
 22                  o.obj# IN (
 23                      SELECT  oa.obj#
 24                      FROM    sys.objauth$ oa
 25                      WHERE   oa.obj# = o.obj# AND
 26                              oa.privilege# = 12 AND                /* execute */
 27                              oa.grantee# IN (UID, 1)) OR
 28                  EXISTS ( /* current user or public role can execute any type */
 29                      SELECT  NULL
 30                      FROM    sys.sysauth$ sa
 31                      WHERE   sa.grantee# IN (UID, 1) AND
 32                              sa.privilege# = -184)) AND
 33                  o.spare1 = sv.version# (+) AND
 34                  t.toid   = t.tvoid                   /* Only the latest type */
 35  /

View created.

SQL> GRANT SELECT ON sys.exu92fptpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain parent types and subtypes, given a type
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92fpt (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, deporder,
  4                  typeid, roottoid, tabobjno)
  5                  AS
  6                  /* Parent types */
  7          SELECT  o.name, u.name, o.owner#, t.toid,
  8                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  9                  tm.audit$, sv.sql_version, t.properties,
 10                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 11                  NVL(t.roottoid,HEXTORAW('00')), 0
 12          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 13                  sys.type_misc$ tm, sys.exu816sqv sv
 14          WHERE   o.obj# = d.p_obj# AND
 15                  o.type# = 13 AND
 16                  o.oid$ = t.toid AND
 17                  o.owner# = u.user# AND
 18                  o.obj# = tm.obj# AND
 19                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 20                  o.spare1 = sv.version# (+) AND
 21                  t.toid = t.tvoid                     /* Only the latest type */
 22       UNION      /* Subtypes */
 23          SELECT  sto.name, u.name, sto.owner#, t.toid,
 24                  TO_CHAR(sto.mtime,  'YYYY-MM-DD:HH24:MI:SS'), sto.obj#,
 25                  d.p_obj#, tm.audit$, sv.sql_version, t.properties,
 26                  sto.status, t.version#, t.hashcode, d.order#, t.typeid,
 27                  NVL(t.roottoid,HEXTORAW('00')), tabobj.obj#
 28          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ sto,
 29                  /*   o.obj$ is for the type is question */
 30                  /* sto.obj$ is for the Sub Types of o.obj$ */
 31                  sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d,
 32                  sys.obj$ tabobj, sys.dependency$ d2, dependency$ d3
 33          WHERE   o.obj# = d.p_obj# AND
 34                  o.type# = 13 AND
 35                  sto.type# = 13 AND
 36                  sto.oid$ = t.toid AND
 37                  sto.owner# = u.user# AND
 38                  sto.obj# = tm.obj# AND
 39                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 40                  sto.spare1 = sv.version# (+) AND
 41                  t.toid = t.tvoid AND                 /* Only the latest type */
 42                  sto.obj# = d.d_obj# AND
 43                  d.p_obj#  = d2.p_obj# AND /*dependent type related to a table*/
 44                  d2.d_obj# = tabobj.obj# AND
 45                  tabobj.type# = 2 AND
 46                  sto.obj# = d3.p_obj# AND /* subtype related to same table */
 47                  d3.d_obj# = tabobj.obj#
 48  /

View created.

SQL> GRANT SELECT ON sys.exu92fpt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92fptu (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, deporder,
  4                  typeid, roottoid, tabobjno)
  5                  AS
  6                  /* Parent types */
  7          SELECT  o.name, u.name, o.owner#, t.toid,
  8                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  9                  tm.audit$, sv.sql_version, t.properties,
 10                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 11                  NVL(t.roottoid,HEXTORAW('00')), 0
 12          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 13                  sys.type_misc$ tm, sys.exu816sqv sv
 14          WHERE   o.obj# = d.p_obj# AND
 15                  o.type# = 13 AND
 16                  o.oid$ = t.toid AND
 17                  o.owner# = u.user# AND
 18                  o.obj# = tm.obj# AND
 19                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 20                  (o.owner# = UID OR                  /* owned by current user */
 21                  /* current user or public role have execute access to type */
 22                  o.obj# IN (
 23                      SELECT  oa.obj#
 24                      FROM    sys.objauth$ oa
 25                      WHERE   oa.obj# = o.obj# AND
 26                              oa.privilege# = 12 AND                /* execute */
 27                              oa.grantee# IN (UID, 1)) OR
 28                  EXISTS ( /* current user or public role can execute any type */
 29                      SELECT  NULL
 30                      FROM    sys.sysauth$ sa
 31                      WHERE   sa.grantee# IN (UID, 1) AND
 32                              sa.privilege# = -184)) AND
 33                  o.spare1 = sv.version# (+) AND
 34                  t.toid   = t.tvoid                   /* Only the latest type */
 35       UNION      /* Subtypes */
 36          SELECT  sto.name, u.name, sto.owner#, t.toid,
 37                  TO_CHAR(sto.mtime,  'YYYY-MM-DD:HH24:MI:SS'), sto.obj#,
 38                  d.p_obj#, tm.audit$, sv.sql_version, t.properties,
 39                  sto.status, t.version#, t.hashcode, d.order#, t.typeid,
 40                  NVL(t.roottoid,HEXTORAW('00')), tabobj.obj#
 41          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ sto,
 42                  /*   o.obj$ is for the type is question */
 43                  /* sto.obj$ is for the Sub Types of o.obj$ */
 44                  sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d,
 45                  sys.obj$ tabobj, sys.dependency$ d2, dependency$ d3
 46          WHERE   o.obj# = d.p_obj# AND
 47                  o.type# = 13 AND
 48                  sto.type# = 13 AND
 49                  sto.oid$ = t.toid AND
 50                  sto.owner# = u.user# AND
 51                  sto.obj# = tm.obj# AND
 52                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 53                  (sto.owner# = UID OR                /* owned by current user */
 54                  /* current user or public role have execute access to type */
 55                  sto.obj# IN (
 56                          SELECT  oa.obj#
 57                          FROM    sys.objauth$ oa
 58                          WHERE   oa.obj# = sto.obj# AND
 59                                  oa.privilege# = 12 AND            /* execute */
 60                                  (oa.grantee# = UID OR
 61                                   oa.grantee# = 1)) OR
 62                  /* current user or public role can execute any type */
 63                  EXISTS (
 64                          SELECT  NULL
 65                          FROM    sys.sysauth$ sa
 66                          WHERE   (sa.grantee# = UID OR
 67                                   sa.grantee# = 1) AND
 68                                  sa.privilege# = -184 )) AND
 69                  sto.spare1 = sv.version# (+) AND
 70                  t.toid = t.tvoid AND                 /* Only the latest type */
 71                  sto.obj# = d.d_obj# AND
 72                  d.p_obj#  = d2.p_obj# AND /*dependent type related to a table*/
 73                  d2.d_obj# = tabobj.obj# AND
 74                  tabobj.type# = 2 AND
 75                  sto.obj# = d3.p_obj# AND /* subtype related to same table */
 76                  d3.d_obj# = tabobj.obj#
 77  /

View created.

SQL> GRANT SELECT ON sys.exu92fptu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM XML/XDB schema based view of TYPEs referenced by a TABLE
SQL> REM Return the TYPE info for types that an XDB schema depends on
SQL> REM
SQL> CREATE OR REPLACE VIEW exu102xtyp (
  2          typename, typeowner, typownid, typobj#,
  3          toid, mtime, typeaudit,
  4          property, status, version, hashcode,
  5          typeid, roottoid,
  6          tabobjno )
  7          AS
  8          SELECT o.name, u.name, o.owner#, o.obj#,
  9                 t.toid, TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), tm.audit$,
 10                 t.properties, o.status, t.version#, t.hashcode,
 11                 NVL(t.typeid,HEXTORAW('00')), NVL(t.roottoid,HEXTORAW('00')),
 12                 tabo.obj#
 13          FROM sys.user$ u, sys.obj$ o, sys.type$ t,sys.type_misc$ tm,
 14               sys.dependency$ d, sys.exu816sqv sv, sys.obj$ tabo
 15          WHERE t.toid = o.oid$ AND
 16                u.user# = o.owner# AND
 17                o.obj# = tm.obj# AND
 18                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 19                NVL(o.type#, -1) != 10 AND
 20                t.toid  = t.tvoid AND                    /* Latest type only */
 21                o.spare1 = sv.version# (+) AND
 22                d.p_obj# = o.obj# AND
 23                tabo.type# = 2 AND /* table */
 24                d.d_obj# IN /* get XDB schema objs that table depends on */
 25                (SELECT d.p_obj#
 26                 FROM SYS.DEPENDENCY$ d, SYS.obj$ o
 27                 WHERE d.d_obj# = tabo.obj# AND  /* dependent object is Table */
 28                       d.p_obj# = o.obj# AND /* parent object is XDB schema */
 29                       o.type# = 55) AND
 30                o.obj# NOT IN /* ignore TYPEs that we already know about */
 31                (SELECT typobjno
 32                 FROM sys.exu8typt
 33                 WHERE tabobjno = tabo.obj#)
 34  /

View created.

SQL> GRANT SELECT ON exu102xtyp to SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on XDB types for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu102xtypu AS
  2          SELECT  *
  3          FROM    sys.exu102xtyp
  4          WHERE   typownid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu102xtypu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM XMLSchemaTable view
SQL> REM Return the schemaoids from sys.opqtype$ for the passed in object#
SQL> REM (table).  Return only the items owned by the currently connected user.
SQL> REM
SQL> REM This view looks for XML schema types both directly in the table and
SQL> REM in nested tables at any level.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9xmlst (schemaoid, tobjid ) AS
  2          SELECT RAWTOHEX(opq.schemaoid), o.obj#
  3          FROM sys.opqtype$ opq, sys.obj$ o
  4          WHERE (o.obj# = opq.obj# OR
  5                 opq.obj# IN (    SELECT  nt.ntab#
  6                                  FROM    sys.ntab$ nt
  7                                  START WITH nt.obj# = o.obj#
  8                                  CONNECT BY PRIOR nt.ntab# = nt.obj#)) AND
  9                opq.type = 1 AND                                   /* XML Type */
 10                BITAND(opq.flags, 2) = 2                          /* XMLSchema */
 11  /

View created.

SQL> GRANT SELECT ON sys.exu9xmlst TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9xdbuid (xdb_uid) AS
  2          SELECT r$.schema#
  3          FROM sys.registry$ r$
  4          WHERE r$.cid = 'XDB'
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9xdbuid TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM obtain all directory aliases
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dir (
  2                  dirname, pathname, objno, audit$) AS
  3          SELECT  o$.name, d$.os_path, o$.obj#, d$.audit$
  4          FROM    sys.exu81obj o$, sys.dir$ d$
  5          WHERE   o$.type# = 23 AND                       /* directory aliases */
  6                  o$.obj# = d$.obj#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8dir TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain all foreign function library names
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lib (
  2                  lowner, libname, ownerid, filename, audit$, mtime, objno,
  3                  isstatic, istrusted) AS
  4          SELECT  u$.name, o$.name, o$.owner#, lb$.filespec, lb$.audit$,
  5                  TO_CHAR(o$.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o$.obj#,
  6                  DECODE(BITAND(lb$.property, 1), 1, 1, 0),
  7                  DECODE(BITAND(lb$.property, 2), 2, 1, 0)
  8          FROM    sys.exu81obj o$, sys.user$ u$, sys.library$ lb$
  9          WHERE   o$.type# = 22 AND                            /* library name */
 10                  o$.owner# = u$.user# AND
 11                  o$.obj# = lb$.obj#
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8lib TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain foreign function library names for user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8libu AS
  2          SELECT  *
  3          FROM    sys.exu8lib
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8libu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM SCOPE and WITH ROWID information for REF columns/attributes
SQL> REM also returns any SCOPEd object objid and ref'd pkey cno/username if a pkREF
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rfs (
  2                  objno, ownerid, property, colname, reftyp, soid, robjid,
  3                  pkeycno, pkeyowner) AS
  4          SELECT  o$.obj#, o$.owner#, c$.property,
  5                  DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
  6                  rf$.reftyp, NVL(rf$.stabid, HEXTORAW('00')),
  7                  NVL2(rf$.stabid, (SELECT  ro$.obj#
  8                                    FROM    sys.obj$ ro$
  9                                    WHERE   ro$.oid$ = rf$.stabid),
 10                       0),
 11                  DECODE(BITAND(rf$.reftyp, 4),
 12                         4, (SELECT  rcd$.con#
 13                             FROM    sys.obj$ ro$, sys.cdef$ rcd$
 14                             WHERE   ro$.oid$ = rf$.stabid AND
 15                                     rcd$.obj# = ro$.obj# AND
 16                                     rcd$.type# = 2),
 17                         0),
 18                  DECODE(BITAND(rf$.reftyp, 4),
 19                         4, (SELECT  ru$.name
 20                             FROM    sys.obj$ ro$, sys.user$ ru$
 21                             WHERE   ro$.oid$ = rf$.stabid AND
 22                                     ru$.user# = ro$.owner#),
 23                         '')
 24          FROM    sys.refcon$ rf$, sys.obj$ o$, sys.col$ c$, sys.attrcol$ a$
 25          WHERE   rf$.obj# = o$.obj# AND
 26                  rf$.obj# = c$.obj# AND
 27                  rf$.intcol# = c$.intcol# AND
 28                  rf$.obj# = a$.obj# (+) AND
 29                  rf$.intcol# = a$.intcol# (+) AND
 30                  rf$.reftyp != 0 AND
 31                  BITAND(c$.property, 32768) != 32768     /* not unused column */
 32  /

View created.

SQL> GRANT SELECT ON sys.exu8rfs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rfsu AS
  2          SELECT  *
  3          FROM    sys.exu8rfs
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rfsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu8rfs(u) variation for user-defined REFs - obsoleted in 9.0.2
SQL> REM
SQL> REM Initial view included the sys.cdef$ table which broke export/import
SQL> REM cycle when SCOPE IS syntax was used for table constraints.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8orfs (
  2                  objno, ownerid, property, colname, reftyp, soid, robjid, rname)
  3        AS
  4          SELECT  o$.obj#, o$.owner#, c$.property,
  5                  DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
  6                  rf$.reftyp, rf$.stabid, ro$.obj#, ro$.name
  7          FROM    sys.refcon$ rf$, sys.obj$ o$, sys.col$ c$, sys.attrcol$ a$,
  8                  sys.obj$ ro$
  9          WHERE   rf$.obj# = o$.obj# AND
 10                  rf$.obj# = c$.obj# AND
 11                  rf$.intcol# = c$.intcol# AND
 12                  rf$.obj# = a$.obj# (+) AND
 13                  rf$.intcol# = a$.intcol# (+) AND
 14                  rf$.reftyp != 0 AND
 15                  BITAND(c$.property, 32768) != 32768 AND /* not unused column */
 16                  rf$.stabid = ro$.oid$ AND
 17                  (UID IN (o$.owner#, 0) OR
 18                   EXISTS (
 19                      SELECT  role
 20                      FROM    sys.session_roles
 21                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8orfs TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain parent table info for an inner nested table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pnt (
  2                  pobjno, pname, pownerid, cobjno) AS
  3          SELECT  nt$.obj#, o$.name, o$.owner#, nt$.ntab#
  4          FROM    sys.obj$ o$, sys.ntab$ nt$
  5          WHERE   nt$.obj# = o$.obj#
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8pnt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8pntu AS
  2          SELECT  *
  3          FROM    sys.exu8pnt
  4          WHERE   pownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8pntu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM bitmap, functional and domain indexes are included if the base table
SQL> REM is included or if the index is defined on a table, and that table
SQL> REM references a table that is included in the export.
SQL> REM
SQL> REM Note that the following 9 views do not handle references to inner
SQL> REM nested tables, since references to and from inner nested tables
SQL> REM are not currently supported by SQL.  Should SQL allow such references
SQL> REM in the future, these views will need to be modified.
SQL> REM
SQL> REM incremental export for bitmap, functional and domain indices
SQL> REM (used only when record = yes)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9indic AS
  2          SELECT  *
  3          FROM    sys.exu9ind
  4          WHERE   sysgenconst = 0 AND               /* not sys gen constraints */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  i.owner#, i.name
 10                      FROM    sys.incexp i, sys.incvid v
 11                      WHERE   i.expid > v.expid AND
 12                              i.type# = 2)
 13                    UNION (
 14                      SELECT  r.ownerid, r.tname
 15                      FROM    sys.incexp ii, sys.incvid vv, sys.exu8ref r
 16                      WHERE              /*refs a table included in the export */
 17                              r.rtname = ii.name AND
 18                              r.rownerid = ii.owner# AND
 19                              ii.expid > vv.expid AND
 20                              ii.type# = 2))
 21  /

View created.

SQL> GRANT SELECT ON sys.exu9indic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81indic AS
  2          SELECT  *
  3          FROM    sys.exu9indic
  4  /

View created.

SQL> GRANT SELECT ON sys.exu81indic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM incremental export for bitmap indices in 8.0 (used only when record = yes)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8indic AS
  2          SELECT  *
  3          FROM    sys.exu81indic
  4          WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
  5                  type != 9                              /* nor domain indexes */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8indic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM incremental export for bitmap, functional and domain indexes
SQL> REM note: exutabi will return the correct table name because record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9indi AS
  2          SELECT  *
  3          FROM    sys.exu9ind
  4          WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  ownerid, name
 10                      FROM    sys.exu9tabi)
 11                    UNION (
 12                      SELECT  r.ownerid, r.tname
 13                      FROM    sys.exu9tabi ii, sys.exu8ref r
 14                      WHERE   r.robjid = ii.objid))   /* table included in inc */
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9indi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81indi AS
  2          SELECT  *
  3          FROM    sys.exu81ind
  4          WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  ownerid, name
 10                      FROM    sys.exu81tabi)
 11                    UNION (
 12                      SELECT  r.ownerid, r.tname
 13                      FROM    sys.exu9tabi ii, sys.exu8ref r
 14                      WHERE   r.robjid = ii.objid))   /* table included in inc */
 15  /

View created.

SQL> GRANT SELECT ON sys.exu81indi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM incremental export for V8.0 bitmap indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8indi AS
  2          SELECT  *
  3          FROM    sys.exu81indi
  4          WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
  5                  type != 9                              /* nor domain indexes */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8indi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM cumulative export for bitmap, functional and domain indexes
SQL> REM note: assume exutabc will return correct table name because record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9indc AS
  2          SELECT  *
  3          FROM    sys.exu9ind
  4          WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  ownerid, name
 10                      FROM    sys.exu9tabc)
 11                    UNION (
 12                      SELECT  r.ownerid, r.tname
 13                      FROM    sys.exu81tabc cc, sys.exu8ref r
 14                      WHERE   r.robjid = cc.objid))   /* table included in cum */
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9indc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81indc AS
  2          SELECT  *
  3          FROM    sys.exu81ind
  4          WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  ownerid, name
 10                      FROM    sys.exu81tabc)
 11                    UNION (
 12                      SELECT  r.ownerid, r.tname
 13                      FROM    sys.exu81tabc cc, sys.exu8ref r
 14                      WHERE   r.robjid = cc.objid))   /* table included in cum */
 15  /

View created.

SQL> GRANT SELECT ON sys.exu81indc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM cumulative export for V8.0 bitmap indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8indc AS
  2          SELECT  *
  3          FROM    sys.exu81indc
  4          WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
  5                  type != 9                              /* nor domain indexes */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8indc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Operators
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81opr (
  2                  name, objid, owner, ownerid, olevel, sqlver) AS
  3          SELECT  o.name, o.obj#, u.name, o.owner#, d.dlevel, sv.sql_version
  4          FROM    sys.exu81obj o, sys.user$ u, sys.operator$ op,
  5                  sys.exu8ordop d, sys.exu816sqv sv
  6          WHERE   o.obj# = op.obj# AND
  7                  o.owner# = u.user# AND
  8                  o.obj# = d.obj#(+) AND
  9                  o.spare1 = sv.version# (+)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu81opr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get operators for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81opru AS
  2          SELECT  *
  3          FROM    sys.exu81opr
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81opru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Operators for incremental export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81opri AS
  2          SELECT  op.*
  3          FROM    sys.exu81opr op, sys.incexp i, sys.incvid v
  4          WHERE   op.name = i.name(+) AND
  5                  op.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 33) = 33 AND
  7                  v.expid < NVL(i.expid, 9999)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81opri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Operators for cumulative export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81oprc AS
  2          SELECT  op.*
  3          FROM    sys.exu81opr op, sys.incexp i, sys.incvid v
  4          WHERE   op.name = i.name(+) AND
  5                  op.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 33) = 33 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81oprc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Indextypes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ity (
  2                  name, objid, owner, ownerid) AS
  3          SELECT  o.name, o.obj#, u.name, o.owner#
  4          FROM    sys.exu81obj o, sys.user$ u, sys.indtypes$ i
  5          WHERE   o.obj# = i.obj# AND
  6                  o.owner# = u.user#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81ity TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Indextypes for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ityu AS
  2          SELECT  *
  3          FROM    sys.exu81ity
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81ityu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Indextypes for incremental export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ityi AS
  2          SELECT  it.*
  3          FROM    sys.exu81ity it, sys.incexp i, sys.incvid v
  4          WHERE   it.name = i.name(+) AND
  5                  it.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 32) = 32 AND
  7                  v.expid < NVL(i.expid, 9999)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81ityi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Indextypes for cumulative export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ityc AS
  2          SELECT  it.*
  3          FROM    sys.exu81ity it, sys.incexp i, sys.incvid v
  4          WHERE   it.name = i.name(+) AND
  5                  it.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 32) = 32 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81ityc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Row Level Security policies
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81rls (
  2                  objown, objnam, policy, polown, polsch, polfun, stmts, chkopt,
  3                  enabled, spolicy) AS
  4          SELECT  u.name, o.name, r.pname, r.pfschma, r.ppname, r.pfname,
  5                  DECODE(BITAND(r.stmt_type, 1), 0, '', 'SELECT,') ||
  6                  DECODE(BITAND(r.stmt_type, 2), 0, '', 'INSERT,') ||
  7                  DECODE(BITAND(r.stmt_type, 4), 0, '', 'UPDATE,') ||
  8                  DECODE(BITAND(r.stmt_type, 8), 0, '', 'DELETE,'),
  9                  r.check_opt, r.enable_flag,
 10                  DECODE(BITAND(r.stmt_type, 16), 0, 0, 1)
 11          FROM    sys.user$ u, sys.obj$ o, sys.rls$ r
 12          WHERE   u.user# = o.owner# AND
 13                  r.obj# = o.obj# AND
 14                  (UID IN (0, o.owner#) OR
 15                   EXISTS (
 16                      SELECT  role
 17                      FROM    sys.session_roles
 18                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu81rls TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add support for PFGAC to get driving context
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pct (
  2                  namespace, attribute, objown, objnam) AS
  3          SELECT  c.ns, c.attr, u.name, o.name
  4          FROM    sys.rls_ctx$ c, sys.user$ u, sys.obj$ o
  5          WHERE   c.obj# = o.obj# AND
  6                  u.user# = o.owner# AND
  7                  (UID IN (o.owner#, 0) OR
  8                   EXISTS (
  9                      SELECT  role
 10                      FROM    sys.session_roles
 11                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 12  /

View created.

SQL> GRANT SELECT ON sys.exu9pct TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add support for PFGAC to get policy groups
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pgp (
  2                  polgrp, objown, objnam) AS
  3          SELECT  g.gname, u.name, o.name
  4          FROM    sys.rls_grp$ g, sys.user$ u, sys.obj$ o
  5          WHERE   g.obj# = o.obj# AND
  6                  u.user# = o.owner# AND
  7                  (UID IN (o.owner#, 0) OR
  8                   EXISTS (
  9                      SELECT  role
 10                      FROM    sys.session_roles
 11                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 12  /

View created.

SQL> GRANT SELECT ON sys.exu9pgp TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add support for PFGAC to get RLS policies
SQL> REM
SQL> REM Get Row Level Security policies
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9rls (
  2                  objown, objnam, polgrp, policy, polown, polsch, polfun, stmt,
  3                  chkopt, enabled, spolicy) AS
  4          SELECT  u.name, o.name, r.gname, r.pname, r.pfschma, r.ppname,
  5                  r.pfname,
  6                  DECODE(BITAND(r.stmt_type, 1), 0, '', 'SELECT,') ||
  7                  DECODE(BITAND(r.stmt_type, 2), 0, '', 'INSERT,') ||
  8                  DECODE(BITAND(r.stmt_type, 4), 0, '', 'UPDATE,') ||
  9                  DECODE(BITAND(r.stmt_type, 8), 0, '', 'DELETE,'),
 10                  r.check_opt, r.enable_flag,
 11                  DECODE(BITAND(r.stmt_type, 16), 0, 0, 1)
 12          FROM    sys.user$ u, sys.obj$ o, sys.rls$ r
 13          WHERE   u.user# = o.owner# AND
 14                  r.obj# = o.obj# AND
 15                  (UID IN (o.owner#, 0) OR
 16                   EXISTS (
 17                      SELECT  role
 18                      FROM    sys.session_roles
 19                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 20  /

View created.

SQL> GRANT SELECT ON sys.exu9rls TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get all Dimensions
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dim (
  2                  ownerid, owner, dimname, dimtext) AS
  3          SELECT  o.owner#, u.name, o.name, dm.dimtext
  4          FROM    sys.obj$ o, sys.user$ u, sys.dim$ dm
  5          WHERE   u.user# = o.owner# AND
  6                  dm.obj# = o.obj# AND
  7                  (UID IN (0, o.owner#) OR
  8                   EXISTS (
  9                      SELECT  role
 10                      FROM    sys.session_roles
 11                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8dim TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Dimensions for this user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dimu AS
  2          SELECT  *
  3          FROM    sys.exu8dim
  4  /

View created.

SQL> GRANT SELECT ON sys.exu8dimu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Dimensions for incremental export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dimi AS
  2          SELECT  dm.*
  3          FROM    sys.exu8dim dm, sys.incexp i, sys.incvid v
  4          WHERE   dm.dimname = i.name(+) AND
  5                  dm.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 43) = 43 AND
  7                  v.expid < NVL(i.expid, 9999)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8dimi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Dimensions for Cumulative export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dimc AS
  2          SELECT  dm.*
  3          FROM    sys.exu8dim dm, sys.incexp i, sys.incvid v
  4          WHERE   dm.dimname = i.name(+) AND
  5                  dm.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 43) = 43 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8dimc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM All procedural objects. If the user has SELECT_CATALOG_ROLE, can see all
SQL> REM objects... otherwise, just his own.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81procobj (
  2                  name, objid, owner, ownerid, type#, class, prepost, level#,
  3                  package, pkg_schema) AS
  4          SELECT  o.name, o.obj#, u.name, o.owner#, o.type#, p.class, p.prepost,
  5                  p.level#, p.package, p.schema
  6          FROM    sys.exu81obj o, sys.user$ u, sys.exppkgobj$ p
  7          WHERE   p.type# = o.type# AND
  8                  o.owner# = u.user# AND
  9                  (UID IN (o.owner#, 0) OR
 10                   EXISTS (
 11                      SELECT  role
 12                      FROM    sys.session_roles
 13                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81procobj TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM All instance class procedural objects: These are objects dependent upon a
SQL> REM parent object.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81procobjinstance (
  2                  name, objid, owner, ownerid, type#, class, prepost, level#,
  3                  package, pkg_schema, par_name, par_objid, par_property) AS
  4          SELECT  o.name, o.objid, o.owner, o.ownerid, o.type#, o.class,
  5                  o.prepost, o.level#, o.package, o.pkg_schema, op.name,
  6                  d.p_obj#, t.property
  7          FROM    sys.exu81procobj o, sys.expdepobj$ d, sys.exu81obj op,
  8                  sys.tab$ t
  9          WHERE   o.class = 3 AND
 10                  d.d_obj# = o.objid AND
 11                  d.p_obj# = op.obj# AND
 12                  d.p_obj# = t.obj#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81procobjinstance TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Packages providing procedural object support.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81objectpkg (
  2                  package, pkg_schema, class, type#, level#) AS
  3          SELECT  package, schema, class, type#, level#
  4          FROM    sys.exppkgobj$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81objectpkg TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Packages providing procedural actions
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81actionpkg (
  2                  package, pkg_schema, class, level#) AS
  3          SELECT  package, schema, class, level#
  4          FROM    sys.exppkgact$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81actionpkg TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Objects that have procedural actions associated with them. Users with
SQL> REM SELECT_CATALOG_ROLE or can see all objects; otherwise, just their own.
SQL> REM Return both class 3 and class 4 for this view.  Class 3 will
SQL> REM ignore namespace and class when issuing callback.
SQL> REM
SQL> REM This view is used by exu81actionobj view.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9actionobj (
  2                  name, objid, owner, ownerid, property, type#, level#,
  3                  package, pkg_schema, namespace, class ) AS
  4          SELECT  o.name, d.obj#, u.name, o.owner#, t.property, o.type#,
  5                  p.level#, p.package, p.schema, o.namespace, p.class
  6          FROM    sys.exu81obj o, sys.user$ u, sys.exppkgact$ p, sys.tab$ t,
  7                  sys.expdepact$ d
  8          WHERE   d.obj# = o.obj# AND
  9                  o.owner# = u.user# AND
 10                  d.package = p.package AND
 11                  d.schema = p.schema AND
 12                  ((p.class = 3) OR (p.class = 4)) AND
 13                  d.obj# = t.obj# AND
 14                  (UID IN (o.owner#, 0) OR
 15                   EXISTS (
 16                      SELECT  role
 17                      FROM    sys.session_roles
 18                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9actionobj TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For 8i view, we only return class = 3.  class 4 catagory added in
SQL> REM 902 timeframe
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81actionobj (
  2                  name, objid, owner, ownerid, property, type#, level#, package,
  3                  pkg_schema) AS
  4          SELECT  oa.name, oa.objid, oa.owner, oa.ownerid, oa.property,
  5                  oa.type#, oa.level#, oa.package, oa.pkg_schema
  6          FROM    sys.exu9actionobj oa
  7          WHERE   oa.class = 3
  8  /

View created.

SQL> 
SQL> GRANT SELECT ON sys.exu81actionobj TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM Get Collection Storage Compatibility Information
SQL> REM
SQL> REM v$compatibility is being removed with 10i, make sure this
SQL> REM always returns 8.1.0.0.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81csc (
  2                  release) AS
  3          SELECT  '8.1.0.0.0'
  4          FROM    DUAL
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81csc TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Enumerate tables in tablespace (for PITR and transportable ts modes)
SQL> REM Include tables that are either stored in the tablespace or whose 1st
SQL> REM (sub)partition is in the tablespace.  If a table is partitioned, but
SQL> REM its first partition is not stored in one of the PITR/TTS tablespaces,
SQL> REM it will not be returned through this query.  This will effectively drop
SQL> REM the partition when the TTS tablespaces are plugged back in.
SQL> REM If a secondary partition's tablespace is not in the TTS list, it will
SQL> REM be accounted for by the PL/SQL procedure that determines whether a TTS
SQL> REM is consistent.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tts (
  2                  dobjid, name, ownerid, tabno, clusterflag, tsname, hakan)
  3        AS                                             /* Unpartitioned tables */
  4          SELECT  NVL(t$.dataobj#, t$.obj#), o$.name, o$.owner#, NVL(t$.tab#, 0),
  5                  NVL(t$.bobj#, 0), ts$.name, t$.spare1
  6          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$
  7          WHERE   t$.obj# = o$.obj# AND
  8                  t$.ts# = ts$.ts# AND
  9                  BITAND(o$.flags, 128) != 128 AND       /* Recycle bin object */
 10                  BITAND(t$.property, 64+512+8192) = 0    /* Not nested or IOT */
 11        UNION ALL                                   /* 1st Partition is simple */
 12          SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
 13                  ts$.name, t$.spare1
 14          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
 15                  (SELECT  bo#,
 16                           MIN(ts#) KEEP (DENSE_RANK FIRST ORDER BY part#) ts#
 17                  FROM     sys.tabpart$
 18                  GROUP BY bo#) tp1$
 19          WHERE   t$.obj# = o$.obj# AND
 20                  t$.obj# = tp1$.bo# AND
 21                  tp1$.ts# = ts$.ts# AND
 22                  BITAND(o$.flags, 128) != 128 AND
 23                  BITAND(t$.property, 64+512+8192) = 0
 24        UNION ALL                           /* 1st Partition is subpartitioned */
 25          SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
 26                  ts$.name, t$.spare1
 27          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
 28                  (SELECT  tcp$.bo#,
 29                           MIN(tsp$.ts#) KEEP
 30                             (DENSE_RANK FIRST ORDER BY
 31                               tcp$.part#, tsp$.subpart#) ts#
 32                  FROM     sys.tabcompart$ tcp$, sys.tabsubpart$ tsp$
 33                  WHERE    tcp$.obj# = tsp$.pobj#
 34                  GROUP BY tcp$.bo#) tcp1$
 35          WHERE   t$.obj# = o$.obj# AND
 36                  t$.obj# = tcp1$.bo# AND
 37                  tcp1$.ts# = ts$.ts# AND
 38                  BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
 39                  BITAND(t$.property, 64+512+8192) = 0
 40        UNION ALL                                        /* Unpartitioned IOTs */
 41          SELECT  i$.dataobj#, o$.name, o$.owner#, NVL(t$.tab#, 0),
 42                  NVL(t$.bobj#, 0), ts$.name, t$.spare1
 43          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.ind$ i$
 44          WHERE   t$.obj# = o$.obj# AND
 45                  t$.pctused$ = i$.obj# AND /*For IOTs, pctused has index obj# */
 46                  i$.ts# = ts$.ts# AND
 47                  BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
 48                  BITAND(t$.property, 64+512+8192) = 64
 49        UNION ALL                                      /* 1st Partition of IOT */
 50          SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
 51                  ts$.name, t$.spare1
 52          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
 53                  (SELECT  bo#,
 54                           MIN(ts#) KEEP (DENSE_RANK FIRST ORDER BY part#) ts#
 55                  FROM     sys.indpart$
 56                  GROUP BY bo#) ip1$
 57          WHERE   t$.obj# = o$.obj# AND
 58                  t$.pctused$ = ip1$.bo# AND
 59                  ip1$.ts# = ts$.ts# AND
 60                  BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
 61                  BITAND(t$.property, 64+512+8192) = 64
 62  /

View created.

SQL> GRANT SELECT ON sys.exu81tts TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM Determine icache plsql mode
SQL> REM YES or NO, if not present, default to NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8icplsql (
  2                  value) AS
  3          SELECT  value$
  4          FROM    sys.props$
  5          WHERE   name = 'ICACHE_IMP_PLSQL'
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8icplsql TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Enumerate tables in tablespace (for logical export of tablespaces)
SQL> REM Include tables that are either stored in the tablespace or have a partition
SQL> REM stored in the tablespace.  Ignore tables in SYS and cartridge schemas.
SQL> REM dobjid and tabno are not used for logical export.
SQL> REM Use sys.obj$ directly to make sure secondary objects are included.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ltts (
  2                  dobjid, name, ownerid, tabno, clusterflag, tsname)
  3        AS                                             /* Unpartitioned tables */
  4          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
  5          FROM    sys.tab$ t$, sys.exu81obj o$, sys.ts$ ts$
  6          WHERE   t$.obj# = o$.obj# AND
  7                  t$.ts# = ts$.ts# AND
  8                  o$.owner# != 0 AND
  9                  BITAND(t$.property, 32+64+512+8192) = 0 /* Not nested or IOT */
 10        UNION ALL                                         /* Simple Partitions */
 11          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
 12          FROM    sys.tab$ t$, sys.obj$ o$, sys.tabpart$ tp$, sys.ts$ ts$
 13          WHERE   t$.obj# = o$.obj# AND
 14                  t$.obj# = tp$.bo# AND
 15                  tp$.ts# = ts$.ts# AND
 16                  o$.owner# != 0 AND
 17                  BITAND(t$.property, 32+64+512+8192) = 32
 18        UNION ALL                                      /* Composite partitions */
 19          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
 20          FROM    sys.tab$ t$, sys.obj$ o$, sys.tabcompart$ tcp$,
 21                  sys.tabsubpart$ tsp$, sys.ts$ ts$
 22          WHERE   t$.obj# = o$.obj# AND
 23                  t$.obj# = tcp$.bo# AND
 24                  tcp$.obj# = tsp$.pobj# AND
 25                  tsp$.ts# = ts$.ts# AND
 26                  o$.owner# != 0 AND
 27                  BITAND(t$.property, 32+64+512+8192) = 32
 28        UNION ALL                                        /* Unpartitioned IOTs */
 29          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
 30          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.ind$ i$
 31          WHERE   t$.obj# = o$.obj# AND
 32                  t$.pctused$ = i$.obj# AND /* For IOTs, pctused has index obj#*/
 33                  i$.ts# = ts$.ts# AND
 34                  o$.owner# != 0 AND
 35                  BITAND(t$.property, 32+64+512+8192) = 64
 36        UNION ALL                                      /* 1st Partition of IOT */
 37          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
 38          FROM    sys.tab$ t$, sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$
 39          WHERE   t$.obj# = o$.obj# AND
 40                  t$.pctused$ = ip$.bo# AND
 41                  ip$.ts# = ts$.ts# AND
 42                  o$.owner# != 0 AND
 43                  BITAND(t$.property, 32+64+512+8192) = 32+64
 44  /

View created.

SQL> GRANT SELECT ON sys.exu9ltts TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add support to get n-tier authentication information out of the database.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9nta (
  2                  client, proxy, flags, role_clause, cred_type, cred_ver,
  3                  cred_minor) AS
  4          SELECT  u$.name, up$.name, pd$.flags,
  5                  DECODE(pd$.flags,
  6                         2, 'WITH NO ROLES',
  7                         4, 'WITH ROLE',
  8                         8, 'WITH ROLE ALL EXCEPT', ' '),
  9                  DECODE(pd$.credential_type#,
 10                         1, 'AUTHENTICATED USING CERTIFICATE',
 11                         2, 'AUTHENTICATED USING DISTINGUISHED NAME',
 12                         3, 'AUTHENTICATED USING KERBEROS',
 13                         4, 'AUTHENTICATED USING PASSWORD', ' '),
 14                  DECODE(pd$.credential_version#,
 15                         1, DECODE(pd$.credential_type#,
 16                                   1, 'TYPE ''X.509''',
 17                                   3, 'VERSION ''1.0''', ' '), ' '),
 18                  DECODE(pd$.credential_minor#,
 19                         1, DECODE(pd$.credential_type#,
 20                                   1, 'VERSION ''3''', ' '), ' ')
 21          FROM    sys.user$ u$, sys.user$ up$, sys.proxy_data$ pd$
 22          WHERE   pd$.client# = u$.user# AND
 23                  pd$.proxy# = up$.user#
 24  /

View created.

SQL> GRANT SELECT ON sys.exu9nta TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9ntarole (
  2                  roleid, role, client, proxy) AS
  3          SELECT  prd$.role#, ur$.name, uc$.name, up$.name
  4          FROM    sys.user$ ur$, sys.proxy_role_data$ prd$,
  5                  sys.user$ uc$, sys.user$ up$
  6          WHERE   prd$.role#   = ur$.user# AND
  7                  prd$.client# = uc$.user# AND
  8                  prd$.proxy#  = up$.user#
  9  /

View created.

SQL> GRANT SELECT ON sys.exu9ntarole TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 10iR1 modifications for n-tier authentication
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10nta (
  2                  client, proxy, flags, role_clause, auth) AS
  3          SELECT  u$.name, up$.name, pd$.flags,
  4                  DECODE(pd$.flags,
  5                         2, 'WITH NO ROLES',
  6                         4, 'WITH ROLE',
  7                         8, 'WITH ROLE ALL EXCEPT', ' '),
  8                  DECODE(pd$.credential_type#,
  9                         5, 'AUTHENTICATION REQUIRED', ' ')
 10          FROM    sys.user$ u$, sys.user$ up$, sys.proxy_info$ pd$
 11          WHERE   pd$.client# = u$.user# AND
 12                  pd$.proxy# = up$.user#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu10nta TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10ntarole (
  2                  roleid, role, client, proxy) AS
  3          SELECT  prd$.role#, ur$.name, uc$.name, up$.name
  4          FROM    sys.user$ ur$, sys.proxy_role_info$ prd$,
  5                  sys.user$ uc$, sys.user$ up$
  6          WHERE   prd$.role#   = ur$.user# AND
  7                  prd$.client# = uc$.user# AND
  8                  prd$.proxy#  = up$.user#
  9  /

View created.

SQL> GRANT SELECT ON sys.exu10ntarole TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the default settings for the persistent switches.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9defpswitches (
  2                  compflgs, nlslensem ) AS
  3          SELECT  a.value, b.value
  4          FROM    sys.v$parameter a, sys.v$parameter b
  5          WHERE   a.name = 'plsql_compiler_flags' AND
  6                  b.name = 'nls_length_semantics'
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9defpswitches TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the two persistent sql switches for a given objid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9objswitch (
  2                  objid, compflgs, nlslensem ) AS
  3          SELECT  a.obj#, a.value, b.value
  4          FROM    sys.settings$ a, sys.settings$ b, sys.obj$ o
  5          WHERE   o.obj#  = a.obj# AND
  6                  a.obj#  = b.obj# AND
  7                  a.param = 'plsql_compiler_flags' AND
  8                  b.param = 'nls_length_semantics' AND
  9                  (UID IN (o.owner#, 0) OR
 10                   EXISTS (
 11                      SELECT  role
 12                      FROM    sys.session_roles
 13                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 14  /

View created.

SQL> GRANT SELECT ON sys.exu9objswitch TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the default settings for the persistent switches.
SQL> REM 10i version for new plsql optimize level
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10defpswitches (
  2                  compflgs, nlslensem, optlevel ) AS
  3          SELECT  a.value, b.value, c.value
  4          FROM    sys.v$parameter a, sys.v$parameter b, sys.v$parameter c
  5          WHERE   a.name = 'plsql_compiler_flags' AND
  6                  b.name = 'nls_length_semantics' AND
  7                  c.name = 'plsql_optimize_level'
  8  /

View created.

SQL> GRANT SELECT ON sys.exu10defpswitches TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the two persistent sql switches for a given objid
SQL> REM 10i version for new plsql optimize level
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10objswitch (
  2                  objid, compflgs, nlslensem, optlevel ) AS
  3          SELECT  a.obj#, a.value, b.value, c.value
  4          FROM    sys.settings$ a, sys.settings$ b, sys.settings$ c, sys.obj$ o
  5          WHERE   o.obj#  = a.obj# AND
  6                  a.obj#  = b.obj# AND
  7                  b.obj#  = c.obj# AND
  8                  a.param = 'plsql_compiler_flags' AND
  9                  b.param = 'nls_length_semantics' AND
 10                  c.param = 'plsql_optimize_level' AND
 11                  (UID IN (o.owner#, 0) OR
 12                   EXISTS (
 13                      SELECT  role
 14                      FROM    sys.session_roles
 15                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 16  /

View created.

SQL> GRANT SELECT ON sys.exu10objswitch TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM (These 2 views 'a' versions, exist because PLSQL_COMPILER_FLAGS was
SQL> REM  changed twice during 10i.)
SQL> REM Create a view to get the default settings for the persistent switches.
SQL> REM 10ia version for new plsql code type
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10adefpswitches (
  2                  nlslensem, optlevel, codetype, warnings ) AS
  3          SELECT  a.value, b.value, c.value, d.value
  4          FROM    sys.v$parameter a, sys.v$parameter b, sys.v$parameter c,
  5                  sys.v$parameter d
  6          WHERE   a.name = 'nls_length_semantics' AND
  7                  b.name = 'plsql_optimize_level' AND
  8                  c.name = 'plsql_code_type'      AND
  9                  d.name = 'plsql_warnings'
 10  /

View created.

SQL> GRANT SELECT ON sys.exu10adefpswitches TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the five persistent sql switches for a given objid
SQL> REM 10ia version for new plsql code type & plsql debug
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10aobjswitch (
  2                  objid, nlslensem, optlevel, codetype, debug, warnings ) AS
  3          /* normal case - no overrides */
  4          SELECT  a.obj#, a.value, b.value, c.value, d.value, e.value
  5          FROM    sys.settings$ a, sys.settings$ b, sys.settings$ c,
  6                  sys.settings$ d, sys.settings$ e, sys.obj$ o
  7          WHERE   o.obj#  = a.obj# AND
  8                  a.obj#  = b.obj# AND
  9                  b.obj#  = c.obj# AND
 10                  c.obj#  = d.obj# AND
 11                  d.obj#  = e.obj# AND
 12                  a.param = 'nls_length_semantics'         AND
 13                  b.param = 'plsql_optimize_level'         AND
 14                  c.param = 'plsql_code_type'              AND
 15                  d.param = 'plsql_debug'                  AND
 16                  e.param = 'plsql_warnings'               AND
 17                  (UID IN (o.owner#, 0) OR
 18                   EXISTS (
 19                      SELECT  role
 20                      FROM    sys.session_roles
 21                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 22  /

View created.

SQL> GRANT SELECT ON sys.exu10aobjswitch TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the default settings for the persistent switches.
SQL> REM 10R2 version for new plsql_ccflags
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10r2defpswitches (
  2                  nlslensem, optlevel, codetype, warnings, ccflags ) AS
  3          SELECT  a.value, b.value, c.value, d.value, e.value
  4          FROM    sys.v$parameter a, sys.v$parameter b, sys.v$parameter c,
  5                  sys.v$parameter d, sys.v$parameter e
  6          WHERE   a.name = 'nls_length_semantics' AND
  7                  b.name = 'plsql_optimize_level' AND
  8                  c.name = 'plsql_code_type'      AND
  9                  d.name = 'plsql_warnings'       AND
 10                  e.name = 'plsql_ccflags'
 11  /

View created.

SQL> GRANT SELECT ON sys.exu10r2defpswitches TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the six persistent sql switches for a given objid
SQL> REM 10R2 version for new plsql_ccflags
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10r2objswitch (
  2                  objid, nlslensem, optlevel, codetype, debug, warnings,
  3                  ccflags ) AS
  4          /* normal case - no overrides */
  5          SELECT  a.obj#, a.value, b.value, c.value, d.value, e.value ,
  6                  f.value
  7          FROM    sys.settings$ a, sys.settings$ b, sys.settings$ c,
  8                  sys.settings$ d, sys.settings$ e, sys.settings$ f,
  9                  sys.obj$ o
 10          WHERE   o.obj#  = a.obj# AND
 11                  a.obj#  = b.obj# AND
 12                  b.obj#  = c.obj# AND
 13                  c.obj#  = d.obj# AND
 14                  d.obj#  = e.obj# AND
 15                  e.obj#  = f.obj# AND
 16                  a.param = 'nls_length_semantics'         AND
 17                  b.param = 'plsql_optimize_level'         AND
 18                  c.param = 'plsql_code_type'              AND
 19                  d.param = 'plsql_debug'                  AND
 20                  e.param = 'plsql_warnings'               AND
 21                  f.param = 'plsql_ccflags'                AND
 22                  (UID IN (o.owner#, 0) OR
 23                   EXISTS (
 24                      SELECT  role
 25                      FROM    sys.session_roles
 26                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 27  /

View created.

SQL> GRANT SELECT ON sys.exu10r2objswitch TO PUBLIC;

Grant succeeded.

SQL> REM
SQL> 
SQL> REM
SQL> REM Add support for FGA
SQL> REM
SQL> REM Get fine grained auditing policies
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9fga (
  2                  objown, objnam, policy, poltxt, polcol, polown, polpkg, polfun,
  3                  enabled) AS
  4          SELECT  u.name, o.name, f.pname,
  5                  replace(f.ptxt,'''',''''''),
  6                  f.pcol, f.pfschma, f.ppname,
  7                  f.pfname, f.enable_flag
  8          FROM    sys.user$ u, sys.obj$ o, sys.fga$ f
  9          WHERE   u.user# = o.owner# AND
 10                  f.obj# = o.obj# AND
 11                  (UID IN (o.owner#, 0) OR
 12                   EXISTS (
 13                      SELECT  role
 14                      FROM    sys.session_roles
 15                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 16  /

View created.

SQL> GRANT SELECT ON sys.exu9fga TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Views for 10iR1 (CDC format) snapshot log
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10mvl (
  2                  ctobj#, log_owner, log_name, log_ownerid, created_time,
  3                  file_version, using_rowid_flag, using_primarykey_flag,
  4                  using_oid_flag, using_sequence_flag, change_set_name,
  5                  source_schema_name, source_table_name, created_scn,
  6                  mvl_flag, captured_values, mvl_temp_log, mvl_v7trigger,
  7                  last_altered, lowest_scn, mvl_oldest_rid, mvl_oldest_pk,
  8                  mvl_oldest_oid, mvl_oldest_new, mvl_oldest_rid_time,
  9                  mvl_oldest_pk_time, mvl_oldest_oid_time,
 10                  mvl_oldest_new_time, mvl_backcompat_view,
 11                  mvl_physmvl, highest_scn, highest_timestamp,
 12                  mvl_oldest_seq, mvl_oldest_seq_time) AS
 13          SELECT  ct.obj#, ct.change_table_schema, ct.change_table_name, u.user#,
 14                  ct.created, 7, DECODE(BITAND(ct.mvl_flag, 1), 1, 1, 0),
 15                  DECODE(BITAND(ct.mvl_flag, 2), 2, 1, 0),
 16                  DECODE(BITAND(ct.mvl_flag, 512), 512, 1, 0),
 17                  DECODE(BITAND(ct.mvl_flag, 1024), 1024, 1, 0),
 18                  ct.change_set_name, ct.source_schema_name,
 19                  ct.source_table_name, ct.created_scn, ct.mvl_flag,
 20                  ct.captured_values, ct.mvl_temp_log, ct.mvl_v7trigger,
 21                  ct.last_altered, ct.lowest_scn, ct.mvl_oldest_rid,
 22                  ct.mvl_oldest_pk, ct.mvl_oldest_oid, ct.mvl_oldest_new,
 23                  ct.mvl_oldest_rid_time, ct.mvl_oldest_pk_time,
 24                  ct.mvl_oldest_oid_time, ct.mvl_oldest_new_time,
 25                  ct.mvl_backcompat_view, ct.mvl_physmvl, ct.highest_scn,
 26                  ct.highest_timestamp, ct.mvl_oldest_seq, ct.mvl_oldest_seq_time
 27          FROM    sys.cdc_change_tables$ ct, sys.user$ u
 28          WHERE   ct.change_table_schema = u.name AND
 29                  ct.mvl_flag IS NOT NULL AND
 30                  BITAND(ct.mvl_flag, 128) = 128 AND
 31                  (UID IN (0, u.user#) OR
 32                   EXISTS (
 33                      SELECT  role
 34                      FROM    sys.session_roles
 35                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 36  /

View created.

SQL> GRANT SELECT ON sys.exu10mvl TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10mvlu AS
  2          SELECT  *
  3          FROM    sys.exu10mvl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10mvlu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Adding 9.0 (CDC format) snapshot log support JohnG 06JUL00
SQL> REM new (CDC format) MV log views for v9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9mvl (
  2                  ctobj#, log_owner, log_name, log_ownerid, created_time,
  3                  file_version, using_rowid_flag, using_primarykey_flag,
  4                  using_oid_flag, using_sequence_flag, change_set_name,
  5                  source_schema_name, source_table_name, created_scn,
  6                  mvl_flag, captured_values, mvl_temp_log, mvl_v7trigger,
  7                  last_altered, lowest_scn, mvl_oldest_rid, mvl_oldest_pk,
  8                  mvl_oldest_oid, mvl_oldest_new, mvl_oldest_rid_time,
  9                  mvl_oldest_pk_time, mvl_oldest_oid_time,
 10                  mvl_oldest_new_time, mvl_backcompat_view,
 11                  mvl_physmvl, highest_scn, highest_timestamp) AS
 12          SELECT  ct.obj#, ct.change_table_schema, ct.change_table_name, u.user#,
 13                  ct.created, 5, DECODE(BITAND(ct.mvl_flag, 1), 1, 1, 0),
 14                  DECODE(BITAND(ct.mvl_flag, 2), 2, 1, 0),
 15                  DECODE(BITAND(ct.mvl_flag, 512), 512, 1, 0),
 16                  DECODE(BITAND(ct.mvl_flag, 1024), 1024, 1, 0),
 17                  ct.change_set_name, ct.source_schema_name,
 18                  ct.source_table_name, ct.created_scn, ct.mvl_flag,
 19                  ct.captured_values, ct.mvl_temp_log, ct.mvl_v7trigger,
 20                  ct.last_altered, ct.lowest_scn, ct.mvl_oldest_rid,
 21                  ct.mvl_oldest_pk, ct.mvl_oldest_oid, ct.mvl_oldest_new,
 22                  ct.mvl_oldest_rid_time, ct.mvl_oldest_pk_time,
 23                  ct.mvl_oldest_oid_time, ct.mvl_oldest_new_time,
 24                  ct.mvl_backcompat_view, ct.mvl_physmvl, ct.highest_scn,
 25                  ct.highest_timestamp
 26          FROM    sys.cdc_change_tables$ ct, sys.user$ u
 27          WHERE   ct.change_table_schema = u.name AND
 28                  ct.mvl_flag IS NOT NULL AND
 29                  BITAND(ct.mvl_flag, 128) = 128 AND
 30                  (UID IN (0, u.user#) OR
 31                   EXISTS (
 32                      SELECT  role
 33                      FROM    sys.session_roles
 34                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 35  /

View created.

SQL> GRANT SELECT ON sys.exu9mvl TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlu AS
  2          SELECT  *
  3          FROM    sys.exu9mvl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlcdcs AS
  2          SELECT  s.set_name, s.username, s.created, s.status, s.earliest_scn,
  3                  s.latest_scn, s.description, s.last_purged, s.last_extended,
  4                  s.mvl_invalid, s.handle
  5          FROM    sys.cdc_subscribers$ s
  6          WHERE   s.handle IN (
  7                      SELECT  t.handle
  8                      FROM    sys.cdc_subscribed_tables$ t
  9                      WHERE   t.change_table_obj# IN (
 10                                  SELECT  obj#
 11                                  FROM    sys.cdc_change_tables$ ct, sys.user$ u
 12                                  WHERE   (ct.change_table_schema = u.name AND
 13                                           u.user# = UID) OR
 14                                          UID = 0 OR
 15                                          EXISTS (
 16                                              SELECT  role
 17                                              FROM    sys.session_roles
 18                                              WHERE   role =
 19                                                      'SELECT_CATALOG_ROLE')))
 20  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlcdcs TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlcdcst AS
  2          SELECT  handle, view_name, view_status, mv_flag, mv_colvec,
  3                  change_table_obj#
  4          FROM    sys.cdc_subscribed_tables$
  5          WHERE   handle IN (
  6                      SELECT  t.handle
  7                      FROM    sys.cdc_subscribed_tables$ t
  8                      WHERE   t.change_table_obj# IN (
  9                                  SELECT  obj#
 10                                  FROM    sys.cdc_change_tables$ ct, sys.user$ u
 11                                  WHERE   (ct.change_table_schema = u.name AND
 12                                           u.user# = UID) OR
 13                                          UID = 0 OR
 14                                          EXISTS (
 15                                              SELECT  role
 16                                              FROM    sys.session_roles
 17                                              WHERE   role =
 18                                                      'SELECT_CATALOG_ROLE')))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlcdcst TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlcdcsc AS
  2          SELECT  column_name, handle, change_table_obj#
  3          FROM    sys.cdc_subscribed_columns$
  4          WHERE   handle IN (
  5                      SELECT  t.handle
  6                      FROM    sys.cdc_subscribed_tables$ t
  7                      WHERE   t.change_table_obj# IN (
  8                                  SELECT  obj#
  9                                  FROM    sys.cdc_change_tables$ ct, sys.user$ u
 10                                  WHERE   (ct.change_table_schema = u.name AND
 11                                           u.user# = UID) OR
 12                                          UID = 0 OR
 13                                          EXISTS (
 14                                              SELECT  role
 15                                              FROM    sys.session_roles
 16                                              WHERE   role =
 17                                                      'SELECT_CATALOG_ROLE')))
 18  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlcdcsc TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlcdccc AS
  2          SELECT  column_name, created, created_scn, change_table_obj#
  3          FROM    sys.cdc_change_columns$
  4          WHERE   change_table_obj# IN (
  5                      SELECT  obj#
  6                      FROM    sys.cdc_change_tables$ ct, sys.user$ u
  7                      WHERE   (UID = u.user# AND
  8                               ct.change_table_schema = u.name) OR
  9                              (UID = 0 AND
 10                               ct.change_table_schema = u.name) OR
 11                              EXISTS (
 12                                  SELECT  role
 13                                  FROM    sys.session_roles
 14                                  WHERE   role = 'SELECT_CATALOG_ROLE'))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlcdccc TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Substitutable and 'is type of' inheritance constraints
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9inhcolcons
  2          (tobjid, intcolid, cname, typeflags, subtypeflags,
  3           typeownerid, typeowner, typename)
  4      AS SELECT
  5          ct$.obj#, ct$.intcol#,
  6          DECODE(BITAND(c$.property,1), 0, '"'||c$.name||'"', 1, ac$.name),
  7          ct$.flags, NVL(sc$.flags,0),
  8          NVL(so$.owner#,0), NVL(su$.name,' '), NVL(so$.name,' ')
  9      FROM
 10          sys.coltype$ ct$, sys.col$ c$, sys.attrcol$ ac$, sys.subcoltype$ sc$,
 11          sys.obj$ so$, sys.user$ su$, sys.obj$ to$
 12      WHERE
 13          bitand (ct$.flags, (512+1024+2048+4096)) != 0 AND
 14          ct$.obj# = c$.obj# AND
 15          ct$.intcol# = c$.intcol# AND
 16          ct$.obj# = ac$.obj# (+) AND
 17          ct$.intcol# = ac$.intcol# (+) AND
 18          ct$.obj# = sc$.obj# (+) AND
 19          ct$.intcol# = sc$.intcol# (+) AND
 20          bitand(NVL(sc$.flags,1),1+2) != 0 AND
 21          sc$.toid = so$.oid$ (+) AND
 22          so$.owner# = su$.user# (+) AND
 23          ct$.obj# = to$.obj# AND
 24          (UID = 0 OR (UID = to$.owner#) OR
 25           EXISTS(SELECT * FROM session_roles WHERE role='SELECT_CATALOG_ROLE'))
 26  /

View created.

SQL> GRANT SELECT ON sys.exu9inhcolcons TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM end of 9.0 (CDC format) MV log support
SQL> 
SQL> REM
SQL> REM get eXternal TaBle data
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9xtb (
  2                  objid, default_dir, type, nr_locations, reject_limit, par_type,
  3                  param_clob, position, directory, name) AS
  4          SELECT  et$.obj#, et$.default_dir, et$.type$, et$.nr_locations,
  5                  et$.reject_limit, et$.par_type, et$.param_clob,
  6                  el$.position, el$.dir, el$.name
  7          FROM    sys.external_location$ el$, sys.external_tab$ et$, sys.obj$ o$
  8          WHERE   el$.obj# = et$.obj# AND
  9                  el$.obj# = o$.obj#  AND
 10                  (UID IN (o$.owner#, 0) OR
 11                   EXISTS (
 12                      SELECT  role
 13                      FROM    sys.session_roles
 14                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9xtb TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Export view to Get Sort Area Size.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9gsas (
  2                  value) AS
  3          SELECT  value
  4          FROM    sys.v$parameter
  5          WHERE   name = 'sort_area_size'
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9gsas TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM NOT NULL column constraints - only used for object tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9otnnull (tobjid, name, conname, defer) AS
  2    SELECT  tobjid, name, conname, defer
  3    FROM    sys.exu8col_temp
  4    WHERE   isnull = 1 AND
  5            BITAND(colprop, 32) != 32       /* Not hidden (exploded col/attrs) */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9otnnull  TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to see if a table is compressed (new for 10i).
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expcompressedtab
  2      (SPARE1, TOBJ$) AS
  3          SELECT s.spare1, t.obj#
  4          FROM   sys.tab$ t, sys.seg$ s
  5          WHERE  t.ts#    = s.ts#
  6          AND    t.file#  = s.file#
  7          AND    t.block# = s.block#
  8          AND    s.type#  = 5
  9          AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048)
 10  /

View created.

SQL> GRANT SELECT ON sys.expcompressedtab TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to see if a partition is compressed (new for 10i).
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expcompressedpart
  2      (SPARE1, TOBJ$) AS
  3          SELECT s.spare1, t.obj#
  4          FROM   sys.tabpart$ t, sys.seg$ s
  5          WHERE  t.ts#    = s.ts#
  6          AND    t.file#  = s.file#
  7          AND    t.block# = s.block#
  8          AND    s.type#  = 5
  9          AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048)
 10  /

View created.

SQL> GRANT SELECT ON sys.expcompressedpart TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to see if a subpartition is compressed (new for 10i).
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expcompressedsub
  2      (SPARE1, TOBJ$) AS
  3          SELECT s.spare1, t.obj#
  4          FROM   sys.tabsubpart$ t, sys.seg$ s
  5          WHERE  t.ts#    = s.ts#
  6          AND    t.file#  = s.file#
  7          AND    t.block# = s.block#
  8          AND    s.type#  = 5
  9          AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048)
 10  /

View created.

SQL> GRANT SELECT ON sys.expcompressedsub TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to see if USER has EXEMPT ACCESS POLICY privilege.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expexempt
  2      (COUNT) AS
  3          SELECT  COUNT(*)
  4          FROM    sys.sysauth$
  5          WHERE   (privilege# =
  6                          (SELECT privilege
  7                           FROM   sys.system_privilege_map
  8                           WHERE  name = 'EXEMPT ACCESS POLICY'))
  9          AND     grantee# = UID   /* user directly has priv */
 10          OR      (grantee# = UID   /* user has role with priv */
 11                          AND privilege# > 0
 12                          AND privilege# IN
 13                                  (SELECT u1.privilege#
 14                                   FROM sys.sysauth$ u1, sys.sysauth$ u2
 15                                   WHERE u1.grantee# = UID
 16                                   AND u1.privilege# = u2.grantee#
 17                                   AND u2.privilege# =
 18                                        (SELECT privilege
 19                                         FROM   sys.system_privilege_map
 20                                         WHERE  name = 'EXEMPT ACCESS POLICY')))
 21  /

View created.

SQL> GRANT SELECT ON sys.expexempt TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM The following four views are used to determine if a partitions's subpartition
SQL> REM were created using the table's partition template.  They are referenced by a
SQL> REM PL/SQL function in prvtpexp.
SQL> 
SQL> CREATE OR REPLACE VIEW sys.exptabsubpart AS
  2          SELECT
  3                tsp.obj#                                                 OBJNO,
  4                tsp.pobj#                                                POBJNO,
  5                row_number() OVER
  6                     (partition by tsp.pobj# order by tsp.subpart#) - 1  SUBPARTNO,
  7                bhiboundval                                              BHIBOUNDVAL,
  8                ts#                                                      TSNO
  9          FROM sys.tabsubpart$ tsp
 10  /

View created.

SQL> GRANT SELECT ON sys.exptabsubpart TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW sys.exptabsubpartdata_view AS
  2          SELECT
  3                sp.bhiboundval       SPBND,
  4                dsp.bhiboundval      DSPBND,
  5                p.obj#               PONO,
  6                sp.tsno              SPTS,
  7                dsp.ts#              DSPTS,
  8                p.defts#             PDEFTS,
  9                tpo.defts#           TDEFTS,
 10                u.datats#            UDEFTS
 11          FROM sys.tabcompart$ p, sys.partobj$ tpo, sys.exptabsubpart sp,
 12               sys.defsubpart$ dsp, sys.obj$ po, sys.obj$ spo, sys.user$ u
 13          WHERE
 14               p.bo# = tpo.obj# AND
 15               p.subpartcnt = MOD(TRUNC(tpo.spare2/65536), 65536) AND
 16               sp.pobjno = p.obj# AND
 17               po.obj# = p.obj# AND
 18               spo.obj# = sp.objno AND
 19               sp.subpartno = dsp.spart_position AND
 20               dsp.bo# = p.bo# AND
 21               u.user# = po.owner# and
 22               (spo.subname = (po.subname || '_' || dsp.spart_name) OR
 23                              (po.subname LIKE 'SYS_P%' AND
 24                               spo.subname LIKE 'SYS_SUBP%'))
 25  /

View created.

SQL> 
SQL> GRANT SELECT ON sys.exptabsubpartdata_view TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM We need to see if a subpartition has lob fragments
SQL> REM
SQL> 
SQL> CREATE OR REPLACE VIEW exptabsubpartlobfrag AS
  2          SELECT
  3                lf.parentobj#                                         PARENTOBJNO,
  4                lf.ts#                                                TSNO,
  5                lf.fragobj#                                           FRAGOBJNO,
  6                row_number() OVER
  7                   (partition by lf.parentobj# order by lf.frag#) - 1 FRAGNO,
  8                lf.tabfragobj#                                        TABFRAGOBJNO
  9          FROM sys.lobfrag$ lf
 10  /

View created.

SQL> GRANT SELECT ON sys.exptabsubpartlobfrag TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW sys.exptabsubpartlob_view AS
  2          SELECT
  3                tp.obj#            PONO,
  4                lp.defts#          LPDEFTS,
  5                lf.tsno            LFTS,
  6                lb.defts#          LCDEFTS,
  7                dsp.lob_spart_ts#  LSPDEFTS,
  8                tsp.ts#            SPTS
  9          FROM  sys.tabcompart$ tp, sys.lobcomppart$ lp, sys.partlob$ lb,
 10                sys.exptabsubpartlobfrag lf, sys.defsubpartlob$ dsp,
 11                sys.obj$ lspo, sys.obj$ tpo, sys.tabsubpart$ tsp
 12          WHERE
 13                lp.tabpartobj# = tp.obj# AND
 14                lp.lobj# = lb.lobj# and
 15                lf.parentobjno = lp.partobj# AND
 16                dsp.bo# = tp.bo# and
 17                dsp.intcol# = lb.intcol# AND
 18                lspo.obj# = lf.fragobjno AND
 19                tpo.obj# = tp.obj# AND
 20                (lspo.subname = tpo.subname || '_' || dsp.lob_spart_name OR
 21                 (tpo.subname LIKE 'SYS_P%' AND lspo.subname LIKE 'SYS_LOB_SUBP%')) AND
 22                dsp.spart_position = lf.fragno AND
 23                tsp.obj# = lf.tabfragobjno
 24       UNION ALL
 25          SELECT tp.obj#           PONO,
 26                 lp.defts#         LPDEFTS,
 27                 lf.tsno           LFTS,
 28                 lb.defts#         LCDEFTS,
 29                                   NULL,
 30                 tsp.ts#           SPTS
 31          FROM sys.tabcompart$ tp, sys.lobcomppart$ lp, sys.partlob$ lb,
 32               sys.exptabsubpartlobfrag lf, sys.obj$ lspo, sys.obj$ tpo,
 33               sys.tabsubpart$ tsp
 34          WHERE lp.tabpartobj# = tp.obj# AND
 35                lp.lobj# = lb.lobj# AND
 36                lf.parentobjno = lp.partobj# AND
 37                lb.intcol# NOT IN
 38                  (SELECT distinct dsp.intcol#
 39                    FROM sys.defsubpartlob$ dsp
 40                    WHERE dsp.bo# = tp.bo#) AND
 41                lspo.obj# = lf.fragobjno AND
 42                tpo.obj# = tp.obj# AND
 43                lspo.subname LIKE 'SYS_LOB_SUBP%' AND
 44                tsp.obj# = lf.tabfragobjno;

View created.

SQL> /

View created.

SQL> GRANT SELECT ON sys.exptabsubpartlob_view TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW sys.expgetenccolnam AS
  2          SELECT c.name, c.obj#
  3          FROM   sys.col$ c, sys.obj$ o
  4          WHERE  bitand(c.property,67108864) = 67108864 AND /* encrypted column */
  5                 c.obj#  = o.obj#                       AND
  6                 (UID IN (o.owner#, 0) OR
  7                   EXISTS (
  8                      SELECT  role
  9                      FROM    sys.session_roles
 10                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 11  /

View created.

SQL> GRANT SELECT ON sys.expgetenccolnam TO PUBLIC;

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem View to get XSL delimiter string (new for 11).
SQL> Rem
SQL> CREATE OR REPLACE VIEW sys.expxsldelim
  2            ( xsldelimiter ) AS
  3          SELECT SUBSTR(DEFAULT_VAL,2,4)
  4          FROM SYS.METAXSLPARAM$
  5          WHERE MODEL = 'ORACLE' AND TRANSFORM = 'PARSE' AND PARAM = 'PRS_DELIM'
  6  /

View created.

SQL> GRANT SELECT ON sys.expxsldelim TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get MAPPING table info for a NON-partitioned IOT (new for 10.2.2).
SQL> REM New for 10.2
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expmapiot
  2            (obj, dobj, ts, fileno, block, initextnt,
  3             freelists,
  4             groups,
  5             pool,
  6             tsname, logging,
  7             pctfree$,
  8             pctused$,
  9             initrans, maxtrans ) AS
 10          SELECT t.obj#, t.dataobj#, t.ts#, t.file#, t.block#, s.iniexts,
 11                 NVL(s.lists,0),
 12                 NVL(s.groups,0),
 13                 DECODE(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
 14                 ts.name, ts.dflogging,
 15                 MOD(t.pctfree$, 100),
 16                 t.pctused$,
 17                 t.initrans, t.maxtrans
 18          FROM   sys.tab$ t, sys.seg$ s, sys.ts$ ts, sys.obj$ o
 19          WHERE  t.ts#    = s.ts#
 20          AND    t.file#  = s.file#
 21          AND    t.block# = s.block#
 22          AND    s.type#  = 5
 23          AND    ts.ts#   = t.ts#
 24          AND    t.obj#   = o.obj#
 25          AND    (UID IN (o.owner#, 0) OR
 26                   EXISTS (
 27                      SELECT  role
 28                      FROM    sys.session_roles
 29                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 30  /

View created.

SQL> GRANT SELECT ON sys.expmapiot TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get the obj# of the mapping table of a Partitioned IOT.
SQL> REM New for 10.2
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expgetmapobj
  2            (mapobj, iotobj) AS
  3          SELECT  t.pctfree$, t.obj#
  4          FROM    sys.tab$ t, sys.obj$ o
  5          WHERE   t.obj# = o.obj#
  6          AND     (UID IN (o.owner#, 0) OR
  7                   EXISTS (
  8                      SELECT  role
  9                      FROM    sys.session_roles
 10                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 11  /

View created.

SQL> GRANT SELECT ON sys.expgetmapobj TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get MAPPING table info for a partitioned IOT (new for 10.2.2).
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.exppiotmap
  2            (obj, dobj, ts, fileno, block,
  3             initextnt,
  4             freelists, groups,
  5             pool,
  6             bo, partno, tsname, logging,
  7             pctfree$,
  8             pctused$, initrans, maxtrans,
  9             blocksize)  AS
 10          SELECT t.obj#, t.dataobj#, t.ts#, t.file#, t.block#,
 11                 NVL(po.deftiniexts, 0),
 12                 po.deflists, po.defgroups,
 13                 DECODE(po.spare1, 1, 'KEEP', 2, 'RECYCLE', 'DEFAULT'),
 14                 t.bo#, t.part#, ts.name, po.deflogging,
 15                 MOD(po.defpctfree, 100),
 16                 po.defpctused, t.initrans, t.maxtrans,
 17                 NVL(ts.blocksize, 2048)   /* non null for table/indexes */
 18          FROM   sys.tabpart$ t, sys.partobj$ po, sys.ts$ ts, sys.obj$ o
 19          WHERE  ts.ts#   = t.ts#
 20          AND    t.bo#    = po.obj#
 21          AND    t.bo#    = o.obj#
 22          AND    (UID IN (o.owner#, 0) OR
 23                   EXISTS (
 24                      SELECT  role
 25                      FROM    sys.session_roles
 26                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 27  /

View created.

SQL> GRANT SELECT ON sys.exppiotmap TO PUBLIC;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add versioning support for export. This will get bumped up as the views
SQL> REM evolve. The insert is needed for upgrades from 7.0 or new databases. The
SQL> REM update is needed for databases that have older compatibility. These are
SQL> REM the releases when the compatibility was bumped:
SQL> REM
SQL> REM    7.0.* - no compatibility - assume zero
SQL> REM    7.1.3 - set to one
SQL> REM    7.2.1 - set to two
SQL> REM    7.2.3 - set to three
SQL> REM    8.0.1 - set to four
SQL> REM    8.0.2 - set to five
SQL> REM    8.0.3 - set to six
SQL> REM    8.0.4 - set to seven
SQL> REM    8.1.6 - set to eight
SQL> REM
SQL> INSERT INTO props$
  2          SELECT  'EXPORT_VIEWS_VERSION', '8', 'Export views revision #'
  3          FROM    sys.dual
  4          WHERE   NOT EXISTS (
  5                      SELECT  'x'
  6                      FROM    sys.props$
  7                      WHERE   name = 'EXPORT_VIEWS_VERSION')
  8  /

0 rows created.

SQL> UPDATE props$ SET value$ = 8 WHERE name = 'EXPORT_VIEWS_VERSION'
  2  /

1 row updated.

SQL> COMMIT
  2  /

Commit complete.

SQL> 
SQL> REM
SQL> REM Exclude the system.help table from export
SQL> REM but avoid duplicates upon multiple runs of catexp.sql
SQL> REM
SQL> insert into noexp$
  2      select 'SYSTEM', 'HELP', 2 from sys.dual
  3      where not exists (
  4         select 'x'
  5         from   sys.noexp$
  6         where name  = 'HELP' AND
  7                   owner = 'SYSTEM' )
  8  /

0 rows created.

SQL> COMMIT
  2  /

Commit complete.

SQL> PROMPT Skipping Oracle OLAP API because it is not installed or versions mismatch...
Skipping Oracle OLAP API because it is not installed or versions mismatch...
SQL> ALTER SESSION SET current_schema = SYS;

Session altered.

SQL> PROMPT Updating registry...
Updating registry...
SQL> INSERT INTO registry$history
  2    (action_time, action,
  3     namespace, version, id,
  4     bundle_series, comments)
  5  VALUES
  6    (SYSTIMESTAMP, 'APPLY',
  7     SYS_CONTEXT('REGISTRY$CTX','NAMESPACE'),
  8     '10.2.0.4',
  9     8,
 10     'CPU',
 11     'CPUJul2010');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> SPOOL off
SQL> SET echo off
Check the following log file for errors:
/oracle/product/v10.2.0.4/cfgtoollogs/catbundle/catbundle_CPU_DOEM1S_APPLY_2010Sep22_11_57_27.log
SQL> quit
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/rdbms/admin
$ sqlluplus "/ as sysdba"

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Sep 22 11:59:04 2010

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.


Connected to:
Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL> @catbundle.sql cpu apply.
SQL> 
SQL> 
SQL> SELECT * FROM registry$history where ID = '6452863';

ACTION_TIME
---------------------------------------------------------------------------
ACTION                         NAMESPACE
------------------------------ ------------------------------
VERSION                                ID
------------------------------ ----------
COMMENTS
--------------------------------------------------------------------------------
BUNDLE_SERIES
------------------------------
04-MAY-10 05.59.27.169089 PM
CPU
                                  6452863

ACTION_TIME
---------------------------------------------------------------------------
ACTION                         NAMESPACE
------------------------------ ------------------------------
VERSION                                ID
------------------------------ ----------
COMMENTS
--------------------------------------------------------------------------------
BUNDLE_SERIES
------------------------------
view recompilation



SQL> exit
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/rdbms/admin
$ cd cd $ORACLE_HOME/cpu/view_recompile
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/rdbms/admin
$ cd $ORACLE_HOME/cpu/view_recompile
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/cpu/view_recompile
$ sqlplus /nolog

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Sep 22 12:00:28 2010

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.

SQL> CONNECT / AS SYSDBA
Connected.
SQL> SHUTDOWN IMMEDIATE;
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> STARTUP UPGRADE;startup;
ORACLE instance started.

Total System Global Area 1996488704 bytes
Fixed Size                  2085136 bytes
Variable Size             905973488 bytes
Database Buffers         1073741824 bytes
Redo Buffers               14688256 bytes
Database mounted.
Database opened.
SQL> eixit
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/cpu/view_recompile
$ cd $ORACLE_HOME/rdbms/admin
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/rdbms/admin
$ sqlplus /nolog

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Sep 22 12:02:57 2010

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.

SQL> CONNECT / AS SYSDBA
Connected.
SQL> @utlrp.sql

TIMESTAMP
--------------------------------------------------------------------------------
COMP_TIMESTAMP UTLRP_BGN  2010-09-22 12:03:14

DOC>   The following PL/SQL block invokes UTL_RECOMP to recompile invalid
DOC>   objects in the database. Recompilation time is proportional to the
DOC>   number of invalid objects in the database, so this command may take
DOC>   a long time to execute on a database with a large number of invalid
DOC>   objects.
DOC>
DOC>   Use the following queries to track recompilation progress:
DOC>
DOC>   1. Query returning the number of invalid objects remaining. This
DOC>      number should decrease with time.
DOC>         SELECT COUNT(*) FROM obj$ WHERE status IN (4, 5, 6);
DOC>
DOC>   2. Query returning the number of objects compiled so far. This number
DOC>      should increase with time.
DOC>         SELECT COUNT(*) FROM UTL_RECOMP_COMPILED;
DOC>
DOC>   This script automatically chooses serial or parallel recompilation
DOC>   based on the number of CPUs available (parameter cpu_count) multiplied
DOC>   by the number of threads per CPU (parameter parallel_threads_per_cpu).
DOC>   On RAC, this number is added across all RAC nodes.
DOC>
DOC>   UTL_RECOMP uses DBMS_SCHEDULER to create jobs for parallel
DOC>   recompilation. Jobs are created without instance affinity so that they
DOC>   can migrate across RAC nodes. Use the following queries to verify
DOC>   whether UTL_RECOMP jobs are being created and run correctly:
DOC>
DOC>   1. Query showing jobs created by UTL_RECOMP
DOC>         SELECT job_name FROM dba_scheduler_jobs
DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
DOC>
DOC>   2. Query showing UTL_RECOMP jobs that are running
DOC>         SELECT job_name FROM dba_scheduler_running_jobs
DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
DOC>#

PL/SQL procedure successfully completed.


TIMESTAMP
--------------------------------------------------------------------------------
COMP_TIMESTAMP UTLRP_END  2010-09-22 12:03:18


PL/SQL procedure successfully completed.

DOC> The following query reports the number of objects that have compiled
DOC> with errors (objects that compile with errors have status set to 3 in
DOC> obj$). If the number is higher than expected, please examine the error
DOC> messages reported with each object (using SHOW ERRORS) to see if they
DOC> point to system misconfiguration or resource constraints that must be
DOC> fixed before attempting to recompile these objects.
DOC>#

OBJECTS WITH ERRORS
-------------------
                  2

DOC> The following query reports the number of errors caught during
DOC> recompilation. If this number is non-zero, please query the error
DOC> messages in the table UTL_RECOMP_ERRORS to see if any of these errors
DOC> are due to misconfiguration or resource constraints that must be
DOC> fixed before objects can compile successfully.
DOC>#

ERRORS DURING RECOMPILATION
---------------------------
                          0


PL/SQL procedure successfully completed.

SQL> select object_name from dba_objects where status = .INVALID.;
select object_name from dba_objects where status = .INVALID.
                                                   *
ERROR at line 1:
ORA-00936: missing expression


SQL> select object_name from dba_objects where status ='INVALID';

OBJECT_NAME
--------------------------------------------------------------------------------
GETPW_PRC
GETPW_PRC

SQL> select object_name,OWERNERNER from dba_objects where status ='INVALID';

OBJECT_NAME
--------------------------------------------------------------------------------
OWNER
------------------------------
GETPW_PRC
ETADMIN

GETPW_PRC
PUBLIC


SQL> EXIT
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/rdbms/admin
$ cd $ORACLE_HOME/install
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/install
$ ./changePerm.sh

-------------------------------------------------------------------------------
Disclaimer: The purpose of this script is to relax permissions on some of the
files in the database Oracle Home so that all clients can access them.
Please note that Oracle Corporation recommends using the most restrictive file
permissions as possible for your given implementation.  Running this script
should be done only after considering all security ramifications.
-------------------------------------------------------------------------------

-n Do you wish to continue (y/n) [n]: 
Y
Spooling the error log /tmp/changePerm_err.log...

Finished running the script successfully
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/install
$ doem1s @ oem0stl0:/oracle/product/v10.2.0.4/install
$ stseTSEtetDb
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/install
$ sqlplus "/ as sysdba"

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Sep 22 12:10:12 2010

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.


Connected to:
Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL> shtudwonutddown immediate;
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> startup;
ORACLE instance started.

Total System Global Area 1996488704 bytes
Fixed Size                  2085136 bytes
Variable Size             905973488 bytes
Database Buffers         1073741824 bytes
Redo Buffers               14688256 bytes
Database mounted.
Database opened.
SQL> exitexit
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
doem1s @ oem0stl0:/oracle/product/v10.2.0.4/install
$ SETetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 4

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [drct0s]    ORACLE_HOME = [/oracle/product/v11.1.0.7]

drct0s @ oem0stl0:/oracle/product/v10.2.0.4/install
$ cd
drct0s @ oem0stl0:/oracle/home
$ pwd
/oracle/home
drct0s @ oem0stl0:/oracle/home
$ ls export 
drct0s @ oem0stl0:/oracle/home
$ export PATH=$PATH:/oracle/local/tools
drct0s @ oem0stl0:/oracle/home
$ export PATH=$PATH:$ORACLE_HOME/OPatch
drct0s @ oem0stl0:/oracle/home
$ export PATH=$PATH:/usr/ccs/bin
drct0s @ oem0stl0:/oracle/home
$ echo $PATH
/usr/bin:/etc:/usr/sbin:/usr/ucb:/usr/bin/X11:/sbin:/usr/java131/jre/bin:/usr/java131/bin:/usr/seos/bin:/usr/local/bin:/oracle/product/v11.1.0.7/bin:/oracle/local/bin:/oracle/product/v11.1.0.7/ldap/bin:/obacktrack64/bin:/obacktrack64/bin:/oracle/local/tools:/oracle/product/v11.1.0.7/OPatch:/usr/ccs/bin
drct0s @ oem0stl0:/oracle/home
$ cd $ORACLE_HOME/jdk/bin 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$       opatch version
Invoking OPatch 11.1.0.6.2

OPatch Version: 11.1.0.6.2

OPatch succeeded.
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ sqlplus "/ as sysdba"

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 12:16:35 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.

Connected to an idle instance.

SQL> startup;
ORACLE instance started.

Total System Global Area 1043886080 bytes
Fixed Size                  2160352 bytes
Variable Size             985663776 bytes
Database Buffers           50331648 bytes
Redo Buffers                5730304 bytes
Database mounted.
Database opened.
SQL> select distinct encrypted from dba_tablespaces;

ENC
---
NO

SQL> select status from v$encryption_wallet;

STATUS
---------
CLOSED

SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$       opatch  lsinventory
Invoking OPatch 11.1.0.6.2

Oracle Interim Patch Installer version 11.1.0.6.2
Copyright (c) 2007, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v11.1.0.7
Central Inventory : /oracle/product/v10.2.0.4/oraInventory.10204
   from           : /etc/oraInst.loc
OPatch version    : 11.1.0.6.2
OUI version       : 11.1.0.7.0
OUI location      : /oracle/product/v11.1.0.7/oui
Log file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/opatch2010-09-22_12-18-38PM.log

List of Homes on this system:

  Home name= OUIHome1, Location= "/oracle/product/v10.2.0.4"
Inventory load failed... OPatch cannot load inventory for the given Oracle Home.
Possible causes are:
   Oracle Home dir. path does not exist in Central Inventory
   Oracle Home is a symbolic link
   Oracle Home inventory is corrupted
LsInventorySession failed: OracleHomeInventory gets null oracleHomeInfo

OPatch failed with error code 73
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ sqlplus "/ as sysdba"

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 12:18:49 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL> shutdown immediate;
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$       opatch  lsinventory
Invoking OPatch 11.1.0.6.2

Oracle Interim Patch Installer version 11.1.0.6.2
Copyright (c) 2007, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v11.1.0.7
Central Inventory : /oracle/product/v10.2.0.4/oraInventory.10204
   from           : /etc/oraInst.loc
OPatch version    : 11.1.0.6.2
OUI version       : 11.1.0.7.0
OUI location      : /oracle/product/v11.1.0.7/oui
Log file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/opatch2010-09-22_12-19-33PM.log

List of Homes on this system:

  Home name= OUIHome1, Location= "/oracle/product/v10.2.0.4"
Inventory load failed... OPatch cannot load inventory for the given Oracle Home.
Possible causes are:
   Oracle Home dir. path does not exist in Central Inventory
   Oracle Home is a symbolic link
   Oracle Home inventory is corrupted
LsInventorySession failed: OracleHomeInventory gets null oracleHomeInfo

OPatch failed with error code 73
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ vi /etc/oraInst.loc
"/etc/oraInst.loc" 5 lines, 232 characters inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
#inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107
inst_group=dba
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"/etc/oraInst.loc" 5 lines, 232 characters


inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107i:q!
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ vi /etc/oraInst.loc
ksh: ^[kvi:  not found
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ vi /etc/oraInst.loc
"/etc/oraInst.loc" 5 lines, 232 characters inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
#inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107
inst_group=dba
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~"/etc/oraInst.loc" 5 lines, 232 characters

#inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204#
:wq"/etc/oraInst.loc" 5 lines, 232 characters 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ cat /etc/oraInst.loc
inventory_loc=/oracle/home/oraInventory
#inventory_loc=/sys_apps_01/oem/agent10g/oraInventory.oem
#inventory_loc=/oracle/product/v10.2.0.4/oraInventory.10204
inventory_loc=/oracle/product/v11.1.0.7/oraInventory.11107
inst_group=dba
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$  opatch  lsinventory
Invoking OPatch 11.1.0.6.2

Oracle Interim Patch Installer version 11.1.0.6.2
Copyright (c) 2007, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v11.1.0.7
Central Inventory : /oracle/product/v11.1.0.7/oraInventory.11107
   from           : /etc/oraInst.loc
OPatch version    : 11.1.0.6.2
OUI version       : 11.1.0.7.0
OUI location      : /oracle/product/v11.1.0.7/oui
Log file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/opatch2010-09-22_12-21-20PM.log

Lsinventory Output file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/lsinv/lsinventory2010-09-22_12-21-20PM.txt

--------------------------------------------------------------------------------
Installed Top-level Products (2): 

Oracle Database 11g                                                  11.1.0.6.0
Oracle Database 11g Patch Set 1                                      11.1.0.7.0
There are 2 products installed in this Oracle Home.


Interim patches (18) :

Patch  9118622      : applied on Wed Mar 03 14:33:51 CST 2010
   Created on 4 Jan 2010, 04:05:12 hrs PST8PDT
   Bugs fixed:
     9118622

Patch  9118620      : applied on Wed Mar 03 14:33:46 CST 2010
   Created on 4 Jan 2010, 01:31:47 hrs PST8PDT
   Bugs fixed:
     9118620

Patch  9114072      : applied on Wed Mar 03 14:33:43 CST 2010
   Created on 23 Dec 2009, 12:13:30 hrs PST8PDT
   Bugs fixed:
     9114072, 8836375, 8290478, 8534338

Patch  8855577      : applied on Wed Mar 03 14:33:40 CST 2010
   Created on 25 Sep 2009, 06:23:00 hrs PST8PDT
   Bugs fixed:
     8855577

Patch  8855575      : applied on Wed Mar 03 14:33:36 CST 2010
   Created on 25 Sep 2009, 06:22:50 hrs PST8PDT
   Bugs fixed:
     8855575

Patch  8855570      : applied on Wed Mar 03 14:33:32 CST 2010
   Created on 2 Sep 2009, 08:23:21 hrs PST8PDT
   Bugs fixed:
     8306933, 8855570

Patch  8855565      : applied on Wed Mar 03 14:33:29 CST 2010
   Created on 2 Sep 2009, 08:16:23 hrs PST8PDT
   Bugs fixed:
     8855565

Patch  8855559      : applied on Wed Mar 03 14:33:26 CST 2010
   Created on 25 Sep 2009, 06:22:41 hrs PST8PDT
   Bugs fixed:
     8855559, 8563945

Patch  8855553      : applied on Wed Mar 03 14:33:23 CST 2010
   Created on 9 Sep 2009, 04:30:24 hrs PST8PDT
   Bugs fixed:
     8855553

Patch  8563948      : applied on Wed Mar 03 14:33:19 CST 2010
   Created on 11 Jun 2009, 10:30:13 hrs UTC
   Bugs fixed:
     8563948

Patch  8563947      : applied on Wed Mar 03 14:32:20 CST 2010
   Created on 11 Jun 2009, 10:29:36 hrs UTC
   Bugs fixed:
     8563947

Patch  8563946      : applied on Wed Mar 03 14:31:58 CST 2010
   Created on 11 Jun 2009, 10:28:00 hrs UTC
   Bugs fixed:
     8563946

Patch  8563944      : applied on Wed Mar 03 14:31:54 CST 2010
   Created on 11 Jun 2009, 10:22:59 hrs UTC
   Bugs fixed:
     6870937, 8563944

Patch  8563943      : applied on Wed Mar 03 14:31:50 CST 2010
   Created on 11 Jun 2009, 10:15:40 hrs UTC
   Bugs fixed:
     8563943

Patch  8563942      : applied on Wed Mar 03 14:31:45 CST 2010
   Created on 11 Jun 2009, 03:00:06 hrs PST8PDT
   Bugs fixed:
     8563942

Patch  8563941      : applied on Wed Mar 03 14:31:42 CST 2010
   Created on 11 Jun 2009, 02:59:26 hrs PST8PDT
   Bugs fixed:
     8563941

Patch  8342506      : applied on Wed Mar 03 14:31:38 CST 2010
   Created on 18 Mar 2009, 04:41:41 hrs PST8PDT
   Bugs fixed:
     8342506

Patch  8306934      : applied on Wed Mar 03 14:31:35 CST 2010
   Created on 18 Mar 2009, 06:26:03 hrs PST8PDT
   Bugs fixed:
     8306934



--------------------------------------------------------------------------------

OPatch succeeded.
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ ps -ef | grep smon
  oracle  6619306  9306188   0 12:21:49  pts/6  0:00 grep smon 
  oracle  8257592        1   0 12:10:49      -  0:00 ora_smon_doem1s 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ ps -ef | grep smon
  oracle  8257592        1   0 12:10:49      -  0:00 ora_smon_doem1s 
  oracle 14418338  9306188   0 12:23:25  pts/6  0:00 grep smon 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ s -ef 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ ps -ef | grep inh
  oracle  9371668  9306188   0 12:23:35  pts/6  0:00 grep inh 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ opatch version
Invoking OPatch 11.1.0.6.2

OPatch Version: 11.1.0.6.2

OPatch succeeded.
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/jdk/bin
$ cd /oracle/product/v11.1.0.7/patches_11107/9655014
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ ps -ef | grep smon
  oracle  7536998  9306188   0 12:26:11  pts/6  0:00 grep smon 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ ps -ef | grep inh
  oracle  5571042  9306188   0 12:26:14  pts/6  0:00 grep inh 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ opatch napply -skip_subset -skip_duplicate
Invoking OPatch 11.1.0.6.2

Oracle Interim Patch Installer version 11.1.0.6.2
Copyright (c) 2007, Oracle Corporation.  All rights reserved.

UTIL session

Oracle Home       : /oracle/product/v11.1.0.7
Central Inventory : /oracle/product/v11.1.0.7/oraInventory.11107
   from           : /etc/oraInst.loc
OPatch version    : 11.1.0.6.2
OUI version       : 11.1.0.7.0
OUI location      : /oracle/product/v11.1.0.7/oui
Log file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/opatch2010-09-22_12-26-25PM.log

Invoking utility "napply"
Checking conflict among patches...
Checking if Oracle Home has components required by patches...
Checking skip_duplicate
These patches will be skipped because they are duplicates of some patch(es) in the Oracle Home: 8342506,8563941,8563942,8563943,8563944,8563946,8563947,8563948,8855553,8855559,8855565,8855570,8855575,8855577,9118620
OPatch continues with these patches: 9458814,9458816,9458819,9458829,9458831,9655014,9702142,9702143
Checking skip_subset
Checking conflicts against Oracle Home...

Conflicts/Supersets for each patch are:

Patch : 9655014

        Bug Superset of 9114072
        Super set bugs are:
        9114072,  8836375,  8290478,  8534338

Patch : 9702142

        Bug Superset of 9118622
        Super set bugs are:
        9118622

Patch : 9702143

        Bug Superset of 8306934
        Super set bugs are:
        8306934

OPatch found that the following patches are not required.
They are either subset of the patches in Oracle Home (or) subset of the patches in the given list 
(or) duplicate : 
   8342506   8563941   8563942   8563943   8563944   8563946   8563947   8563948   8855553   8855559   8855565   8855570   8855575   8855577   9118620

Following patches will be rolled back from Oracle Home on application of the patches in the given list :
   9114072   9118622   8306934

Do you want to proceed? [y|n]
y
User Responded with: Y
OPatch continues with these patches:    9458814   9458816   9458819   9458829   9458831   9655014   9702142   9702143

Do you want to proceed? [y|n]
y
User Responded with: Y

Running prerequisite checks...

OPatch detected non-cluster Oracle Home from the inventory and will patch the local system only.


Please shutdown Oracle instances running out of this ORACLE_HOME on the local system.
(Oracle Home = '/oracle/product/v11.1.0.7')


Is the local system ready for patching? [y|n]
y
User Responded with: Y
Backing up files affected by the patch 'NApply' for restore. This might take a while...
Execution of 'sh /oracle/product/v11.1.0.7/patches_11107/9655014/9655014/custom/scripts/pre -apply 9655014 ':

Return Code = 0

Applying patch 9458814...

ApplySession applying interim patch '9458814' to OH '/oracle/product/v11.1.0.7'
ApplySession rolling back interim patch '9114072' from OH '/oracle/product/v11.1.0.7'
Execution of 'sh /oracle/product/v11.1.0.7/.patch_storage/9114072_Dec_23_2009_12_13_30/original_patch/custom/scripts/pre -rollback 9114072 ':

Return Code = 0

Patching component oracle.rdbms, 11.1.0.7.0...
Deleting file "/oracle/product/v11.1.0.7/cpu/CPUJan2010/catcpu.sql"
Deleting file "/oracle/product/v11.1.0.7/cpu/CPUJan2010/catcpu_rollback.sql"
Deleting file "/oracle/product/v11.1.0.7/rdbms/admin/bundledata_CPU.xml"
Deleting file "/oracle/product/v11.1.0.7/rdbms/admin/catbundle.sql"
Deleting file "/oracle/product/v11.1.0.7/cpu/scripts/sdo_oct2009.sql"

Patching component oracle.rdbms.rsf, 11.1.0.7.0...
Deleting file "/oracle/product/v11.1.0.7/cpu/CPUJan2010/rollback_all.lst"
Deleting file "/oracle/product/v11.1.0.7/cpu/CPUJan2010/rollback_new.lst"
RollbackSession removing interim patch '9114072' from inventory

--------------------------------------------------------------------------------
********************************************************************************
********************************************************************************
**                                ATTENTION                                   **
**                                                                            **
** Please note that the Security Patch Installation (Patch Deinstallation) is **
** not complete until all the Post Installation (Post Deinstallation)         **
** instructions noted in the Readme accompanying this patch, have been        **
** successfully completed.                                                    **
**                                                                            **
********************************************************************************
********************************************************************************

--------------------------------------------------------------------------------

Execution of 'sh /oracle/product/v11.1.0.7/.patch_storage/9114072_Dec_23_2009_12_13_30/original_patch/custom/scripts/post -rollback 9114072 ':

Return Code = 0
ApplySession rolling back interim patch '9118622' from OH '/oracle/product/v11.1.0.7'

Patching component oracle.network.rsf, 11.1.0.7.0...
Updating archive file "/oracle/product/v11.1.0.7/lib/libnro11.a"  with "lib/libnro11.a/ncrfgp.o"
Updating archive file "/oracle/product/v11.1.0.7/lib/libnro11.a"  with "lib/libnro11.a/ncrfidsa.o"
Updating archive file "/oracle/product/v11.1.0.7/lib32/libnro11.a"  with "lib32/libnro11.a/ncrfgp.o"
Updating archive file "/oracle/product/v11.1.0.7/lib32/libnro11.a"  with "lib32/libnro11.a/ncrfidsa.o"

Patching component oracle.rdbms, 11.1.0.7.0...
RollbackSession removing interim patch '9118622' from inventory
ApplySession rolling back interim patch '8306934' from OH '/oracle/product/v11.1.0.7'

Patching component oracle.network.listener, 11.1.0.7.0...
Updating archive file "/oracle/product/v11.1.0.7/network/lib/libnlsnr11.a"  with "network/lib/libnlsnr11.a/nsglgr.o"
Updating archive file "/oracle/product/v11.1.0.7/network/lib/libnlsnr11.a"  with "network/lib/libnlsnr11.a/nsglro.o"
Updating archive file "/oracle/product/v11.1.0.7/network/lib32/libnlsnr11.a"  with "network/lib32/libnlsnr11.a/nsglgr.o"
Updating archive file "/oracle/product/v11.1.0.7/network/lib32/libnlsnr11.a"  with "network/lib32/libnlsnr11.a/nsglro.o"
RollbackSession removing interim patch '8306934' from inventory


OPatch back to application of the patch '9458814' after auto-rollback.

Backing up files affected by the patch '9458814' for rollback. This might take a while...

Patching component oracle.rdbms.dbscripts, 11.1.0.7.0...
Copying file to "/oracle/product/v11.1.0.7/rdbms/admin/catexp.sql"
ApplySession adding interim patch '9458814' to inventory

Verifying the update...
Inventory check OK: Patch ID 9458814 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9458814 are present in Oracle Home.

Applying patch 9458816...

ApplySession applying interim patch '9458816' to OH '/oracle/product/v11.1.0.7'
Backing up files affected by the patch '9458816' for rollback. This might take a while...

Patching component oracle.rdbms, 11.1.0.7.0...
Updating archive file "/oracle/product/v11.1.0.7/lib/libserver11.a"  with "lib/libserver11.a/aud.o"
Updating archive file "/oracle/product/v11.1.0.7/lib/libserver11.a"  with "lib/libserver11.a/kks1.o"
Updating archive file "/oracle/product/v11.1.0.7/lib/libserver11.a"  with "lib/libserver11.a/opiprs.o"
ApplySession adding interim patch '9458816' to inventory

Verifying the update...
Inventory check OK: Patch ID 9458816 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9458816 are present in Oracle Home.

Applying patch 9458819...

ApplySession applying interim patch '9458819' to OH '/oracle/product/v11.1.0.7'
Backing up files affected by the patch '9458819' for rollback. This might take a while...

Patching component oracle.javavm.server, 11.1.0.7.0...
Copying file to "/oracle/product/v11.1.0.7/javavm/install/jvm_exp.sql"
ApplySession adding interim patch '9458819' to inventory

Verifying the update...
Inventory check OK: Patch ID 9458819 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9458819 are present in Oracle Home.

Applying patch 9458829...

ApplySession applying interim patch '9458829' to OH '/oracle/product/v11.1.0.7'
Backing up files affected by the patch '9458829' for rollback. This might take a while...

Patching component oracle.rdbms, 11.1.0.7.0...
Copying file to "/oracle/product/v11.1.0.7/rdbms/lib/jox.o"
ApplySession adding interim patch '9458829' to inventory

Verifying the update...
Inventory check OK: Patch ID 9458829 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9458829 are present in Oracle Home.

Applying patch 9458831...

ApplySession applying interim patch '9458831' to OH '/oracle/product/v11.1.0.7'
Backing up files affected by the patch '9458831' for rollback. This might take a while...

Patching component oracle.javavm.server, 11.1.0.7.0...
Copying file to "/oracle/product/v11.1.0.7/javavm/install/initjvm.sql"
Copying file to "/oracle/product/v11.1.0.7/javavm/install/jvmursc.sql"
ApplySession adding interim patch '9458831' to inventory

Verifying the update...
Inventory check OK: Patch ID 9458831 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9458831 are present in Oracle Home.

Applying patch 9655014...

ApplySession applying interim patch '9655014' to OH '/oracle/product/v11.1.0.7'
Backing up files affected by the patch '9655014' for rollback. This might take a while...

Patching component oracle.rdbms, 11.1.0.7.0...
Copying file to "/oracle/product/v11.1.0.7/cpu/CPUJul2010/catcpu.sql"
Copying file to "/oracle/product/v11.1.0.7/cpu/CPUJul2010/catcpu_rollback.sql"
Copying file to "/oracle/product/v11.1.0.7/rdbms/admin/bundledata_CPU.xml"
Copying file to "/oracle/product/v11.1.0.7/rdbms/admin/catbundle.sql"
Copying file to "/oracle/product/v11.1.0.7/cpu/scripts/sdo_oct2009.sql"
Copying file to "/oracle/product/v11.1.0.7/cpu/scripts/bug9016295.sql"
Copying file to "/oracle/product/v11.1.0.7/cpu/scripts/bug9371993.sql"
Copying file to "/oracle/product/v11.1.0.7/cpu/scripts/apscpu.sql"
Copying file to "/oracle/product/v11.1.0.7/cpu/scripts/amdcpu.sql"
Copying file to "/oracle/product/v11.1.0.7/cpu/scripts/xoqcpu.sql"

Patching component oracle.rdbms.rsf, 11.1.0.7.0...
Copying file to "/oracle/product/v11.1.0.7/cpu/CPUJul2010/rollback_all.lst"
Copying file to "/oracle/product/v11.1.0.7/cpu/CPUJul2010/rollback_new.lst"
ApplySession adding interim patch '9655014' to inventory

Verifying the update...
Inventory check OK: Patch ID 9655014 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9655014 are present in Oracle Home.

Applying patch 9702142...

ApplySession applying interim patch '9702142' to OH '/oracle/product/v11.1.0.7'
Backing up files affected by the patch '9702142' for rollback. This might take a while...

Patching component oracle.network.rsf, 11.1.0.7.0...
Updating archive file "/oracle/product/v11.1.0.7/lib/libnro11.a"  with "lib/libnro11.a/ncrfidsa.o"
Updating archive file "/oracle/product/v11.1.0.7/lib/libnro11.a"  with "lib/libnro11.a/ncrfgp.o"
Updating archive file "/oracle/product/v11.1.0.7/lib32/libnro11.a"  with "lib32/libnro11.a/ncrfidsa.o"
Updating archive file "/oracle/product/v11.1.0.7/lib32/libnro11.a"  with "lib32/libnro11.a/ncrfgp.o"

Patching component oracle.rdbms, 11.1.0.7.0...
ApplySession adding interim patch '9702142' to inventory

Verifying the update...
Inventory check OK: Patch ID 9702142 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9702142 are present in Oracle Home.

Applying patch 9702143...

ApplySession applying interim patch '9702143' to OH '/oracle/product/v11.1.0.7'
Backing up files affected by the patch '9702143' for rollback. This might take a while...

Patching component oracle.network.listener, 11.1.0.7.0...
Updating archive file "/oracle/product/v11.1.0.7/network/lib/libnlsnr11.a"  with "network/lib/libnlsnr11.a/nsglgr.o"
Updating archive file "/oracle/product/v11.1.0.7/network/lib/libnlsnr11.a"  with "network/lib/libnlsnr11.a/nsglro.o"
Updating archive file "/oracle/product/v11.1.0.7/network/lib32/libnlsnr11.a"  with "network/lib32/libnlsnr11.a/nsglgr.o"
Updating archive file "/oracle/product/v11.1.0.7/network/lib32/libnlsnr11.a"  with "network/lib32/libnlsnr11.a/nsglro.o"
ApplySession adding interim patch '9702143' to inventory

Verifying the update...
Inventory check OK: Patch ID 9702143 is registered in Oracle Home inventory with proper meta-data.
Files check OK: Files from Patch ID 9702143 are present in Oracle Home.
Running make for target ioracle
Running make for target client_sharedlib
Running make for target client_sharedlib
Running make for target itnslsnr
Execution of 'sh /oracle/product/v11.1.0.7/patches_11107/9655014/9655014/custom/scripts/post -apply 9655014 ':

Return Code = 0

The local system has been patched and can be restarted.

UtilSession: N-Apply done.
--------------------------------------------------------------------------------
The following warnings have occurred during OPatch execution:
1) OUI-67302:
OPatch found that the following patches are not required.
They are either subset of the patches in Oracle Home (or) subset of the patches in the given list 
(or) duplicate : 
   8342506   8563941   8563942   8563943   8563944   8563946   8563947   8563948   8855553   8855559   8855565   8855570   8855575   8855577   9118620
2) OUI-67303:
Following patches will be rolled back from Oracle Home on application of the patches in the given list :
   9114072   9118622   8306934
--------------------------------------------------------------------------------
OPatch Session completed with warnings.

OPatch completed with warnings.
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ opatch lsinventory 9655014
Invoking OPatch 11.1.0.6.2

Oracle Interim Patch Installer version 11.1.0.6.2
Copyright (c) 2007, Oracle Corporation.  All rights reserved.


Oracle Home       : /oracle/product/v11.1.0.7
Central Inventory : /oracle/product/v11.1.0.7/oraInventory.11107
   from           : /etc/oraInst.loc
OPatch version    : 11.1.0.6.2
OUI version       : 11.1.0.7.0
OUI location      : /oracle/product/v11.1.0.7/oui
Log file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/opatch2010-09-22_12-28-44PM.log

Lsinventory Output file location : /oracle/product/v11.1.0.7/cfgtoollogs/opatch/lsinv/lsinventory2010-09-22_12-28-44PM.txt

--------------------------------------------------------------------------------
Installed Top-level Products (2): 

Oracle Database 11g                                                  11.1.0.6.0
Oracle Database 11g Patch Set 1                                      11.1.0.7.0
There are 2 products installed in this Oracle Home.


Interim patches (23) :

Patch  9702143      : applied on Wed Sep 22 12:27:26 CDT 2010
   Created on 31 May 2010, 08:34:41 hrs UTC
   Bugs fixed:
     8306934, 9702143

Patch  9702142      : applied on Wed Sep 22 12:27:22 CDT 2010
   Created on 31 May 2010, 08:32:02 hrs UTC
   Bugs fixed:
     9702142, 9118622

Patch  9655014      : applied on Wed Sep 22 12:27:19 CDT 2010
   Created on 6 Jul 2010, 02:54:43 hrs PST8PDT
   Bugs fixed:
     9655014, 9114072, 9458811, 8290478, 8836375, 9369783, 8534338

Patch  9458831      : applied on Wed Sep 22 12:27:16 CDT 2010
   Created on 11 Mar 2010, 07:30:20 hrs PST8PDT
   Bugs fixed:
     9458831

Patch  9458829      : applied on Wed Sep 22 12:27:14 CDT 2010
   Created on 30 Mar 2010, 06:59:07 hrs PST8PDT
   Bugs fixed:
     9458829

Patch  9458819      : applied on Wed Sep 22 12:27:11 CDT 2010
   Created on 11 Mar 2010, 06:41:20 hrs PST8PDT
   Bugs fixed:
     9458819

Patch  9458816      : applied on Wed Sep 22 12:27:08 CDT 2010
   Created on 30 Mar 2010, 08:20:20 hrs PST8PDT
   Bugs fixed:
     9458816

Patch  9458814      : applied on Wed Sep 22 12:27:05 CDT 2010
   Created on 11 Mar 2010, 06:21:39 hrs PST8PDT
   Bugs fixed:
     9458814

Patch  9118620      : applied on Wed Mar 03 14:33:46 CST 2010
   Created on 4 Jan 2010, 01:31:47 hrs PST8PDT
   Bugs fixed:
     9118620

Patch  8855577      : applied on Wed Mar 03 14:33:40 CST 2010
   Created on 25 Sep 2009, 06:23:00 hrs PST8PDT
   Bugs fixed:
     8855577

Patch  8855575      : applied on Wed Mar 03 14:33:36 CST 2010
   Created on 25 Sep 2009, 06:22:50 hrs PST8PDT
   Bugs fixed:
     8855575

Patch  8855570      : applied on Wed Mar 03 14:33:32 CST 2010
   Created on 2 Sep 2009, 08:23:21 hrs PST8PDT
   Bugs fixed:
     8306933, 8855570

Patch  8855565      : applied on Wed Mar 03 14:33:29 CST 2010
   Created on 2 Sep 2009, 08:16:23 hrs PST8PDT
   Bugs fixed:
     8855565

Patch  8855559      : applied on Wed Mar 03 14:33:26 CST 2010
   Created on 25 Sep 2009, 06:22:41 hrs PST8PDT
   Bugs fixed:
     8855559, 8563945

Patch  8855553      : applied on Wed Mar 03 14:33:23 CST 2010
   Created on 9 Sep 2009, 04:30:24 hrs PST8PDT
   Bugs fixed:
     8855553

Patch  8563948      : applied on Wed Mar 03 14:33:19 CST 2010
   Created on 11 Jun 2009, 10:30:13 hrs UTC
   Bugs fixed:
     8563948

Patch  8563947      : applied on Wed Mar 03 14:32:20 CST 2010
   Created on 11 Jun 2009, 10:29:36 hrs UTC
   Bugs fixed:
     8563947

Patch  8563946      : applied on Wed Mar 03 14:31:58 CST 2010
   Created on 11 Jun 2009, 10:28:00 hrs UTC
   Bugs fixed:
     8563946

Patch  8563944      : applied on Wed Mar 03 14:31:54 CST 2010
   Created on 11 Jun 2009, 10:22:59 hrs UTC
   Bugs fixed:
     6870937, 8563944

Patch  8563943      : applied on Wed Mar 03 14:31:50 CST 2010
   Created on 11 Jun 2009, 10:15:40 hrs UTC
   Bugs fixed:
     8563943

Patch  8563942      : applied on Wed Mar 03 14:31:45 CST 2010
   Created on 11 Jun 2009, 03:00:06 hrs PST8PDT
   Bugs fixed:
     8563942

Patch  8563941      : applied on Wed Mar 03 14:31:42 CST 2010
   Created on 11 Jun 2009, 02:59:26 hrs PST8PDT
   Bugs fixed:
     8563941

Patch  8342506      : applied on Wed Mar 03 14:31:38 CST 2010
   Created on 18 Mar 2009, 04:41:41 hrs PST8PDT
   Bugs fixed:
     8342506



--------------------------------------------------------------------------------

OPatch succeeded.
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ opatch lsinventory | grep 9655014
Patch  9655014      : applied on Wed Sep 22 12:27:19 CDT 2010
     9655014, 9114072, 9458811, 8290478, 8836375, 9369783, 8534338
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/patches_11107/9655014
$ cd $ORACLE_HOME/rdbms/admin
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/rdbms/admin
$ sqlplus /nolog

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 12:30:35 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.

SQL> CONNECT / AS SYSDBA
Connected to an idle instance.
SQL> STARTUP
ORACLE instance started.

Total System Global Area 1043886080 bytes
Fixed Size                  2160352 bytes
Variable Size             985663776 bytes
Database Buffers           50331648 bytes
Redo Buffers                5730304 bytes
Database mounted.
Database opened.
SQL> @catbundle.sql cpu apply

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.





Generating apply and rollback scripts...
Check the following file for errors:
/oracle/product/v11.1.0.7/cfgtoollogs/catbundle/catbundle_CPU_DRCT0S_GENERATE_2010Sep22_12_31_21.log
Apply script: /oracle/product/v11.1.0.7/rdbms/admin/catbundle_CPU_DRCT0S_APPLY.sql
Rollback script: /oracle/product/v11.1.0.7/rdbms/admin/catbundle_CPU_DRCT0S_ROLLBACK.sql

PL/SQL procedure successfully completed.

Executing script file...




SQL> COLUMN spool_file NEW_VALUE spool_file NOPRINT
SQL> SELECT '/oracle/product/v11.1.0.7/cfgtoollogs/catbundle/' || 'catbundle_CPU_' || name || '_APPLY_' || TO_CHAR(SYSDATE, 'YYYYMonDD_hh24_mi_ss', 'NLS_DATE_LANGUAGE=''AMERICAN''') || '.log' AS spool_file FROM v$database;




SQL> SPOOL &spool_file
SQL> exec dbms_registry.set_session_namespace('SERVER')

PL/SQL procedure successfully completed.

SQL> PROMPT Skipping Oracle Spatial because it is not installed or versions mismatch...
Skipping Oracle Spatial because it is not installed or versions mismatch...
SQL> PROMPT Processing JAVAVM Option...
Processing JAVAVM Option...
SQL> ALTER SESSION SET current_schema = sys;

Session altered.

SQL> @?/cpu/scripts/bug9371993.sql
SQL> revoke execute on "oracle/aurora/util/Wrapper" from public;

Revoke succeeded.

SQL> @?/javavm/install/jvm_exp.sql
SQL> Rem
SQL> Rem $Header: javavm/install/jvm_exp.sql /st_recommended_11.1.0.7.0/2 2010/02/25 13:56:19 etucker Exp $
SQL> Rem
SQL> Rem dbms_jvm_exp_perms.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbms_jvm_exp_perms.sql - supports export of java permissions
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This package is registered in sys.exppkgobj$.  This will enable
SQL> Rem      exporting of all permmissions.  Any permissions different from those
SQL> Rem      in the target db will be added to java$policy$ if necessary.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      import_perms can not be run alone.  It depends on the strings emitted
SQL> Rem      by the export_perms() output to create the beginning table.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    etucker     02/25/10 - add protection for revoke
SQL> Rem    etucker     02/14/10 - XbranchMerge
SQL> Rem                           etucker_rfi_backport_9016295_11.1.0.7.3 from
SQL> Rem                           st_javavm_11.1.0
SQL> Rem    etucker     02/12/10 - add revoke
SQL> Rem    etucker     02/11/10 - Backport etucker_bug-9016295 from main
SQL> Rem    etucker     04/02/07 - disable problems
SQL> Rem    etucker     06/30/05 - check for enabled
SQL> Rem    etucker     06/28/05 - fix query
SQL> Rem    etucker     06/13/05 - add version check for backward compat
SQL> Rem    etucker     06/08/05 - remove set stuff
SQL> Rem    etucker     05/06/05 - etucker_bug-3993297
SQL> Rem    etucker     05/06/05 - more support
SQL> Rem    etucker     05/02/05 - Created
SQL> Rem
SQL> 
SQL> create or replace package DBMS_JVM_EXP_PERMS AUTHID CURRENT_USER as
  2    TYPE temp_rec is record (
  3         kind        dba_java_policy.kind%TYPE,
  4         grantee     dba_java_policy.grantee%TYPE,
  5         type_schema dba_java_policy.type_schema%TYPE,
  6         type_name   dba_java_policy.type_name%TYPE,
  7         name        dba_java_policy.name%TYPE,
  8         action      dba_java_policy.action%TYPE,
  9         enabled     dba_java_policy.enabled%TYPE
 10         );
 11  
 12    TYPE temp_java_policy is table of temp_rec;
 13  
 14    function create_exp(objid IN number,
 15                        version in varchar2,
 16                        new_block OUT PLS_INTEGER) return varchar2;
 17  
 18    function grant_exp (objid IN NUMBER,
 19                        isdba IN PLS_INTEGER,
 20                        grantor OUT VARCHAR2,
 21                        version IN VARCHAR2,
 22                        new_block OUT PLS_INTEGER) RETURN varchar2;
 23  
 24    function audit_exp (objid IN NUMBER,
 25                        version IN VARCHAR2,
 26                        new_block OUT PLS_INTEGER) RETURN varchar2;
 27  
 28    function drop_exp (objid IN NUMBER,
 29                       version IN VARCHAR2,
 30                       new_block OUT PLS_INTEGER) RETURN varchar2;
 31  
 32    function audit_sysprivs_exp (version IN VARCHAR2,
 33                                 new_block OUT PLS_INTEGER ) RETURN varchar2;
 34    function grant_sysprivs_exp(version IN varchar2,
 35                                new_block OUT PLS_INTEGER
 36                               ) return varchar2;
 37    procedure import_jvm_perms(pcol temp_java_policy);
 38    function  export_perms(state IN OUT PLS_INTEGER, new_block OUT PLS_INTEGER)
 39                          return varchar2;
 40  end DBMS_JVM_EXP_PERMS;
 41  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace package body DBMS_JVM_EXP_PERMS as
  2    EXP_END    CONSTANT PLS_INTEGER := 999999;
  3    EXP_START  CONSTANT PLS_INTEGER := 0;
  4    cursor policy_q is select kind, grantee, type_schema,type_name,
  5                              name,action, enabled from dba_java_policy where
  6                              enabled='ENABLED';
  7    zone PLS_INTEGER := EXP_START;
  8  
  9  
 10    function grant_sysprivs_exp(version IN varchar2,
 11                                new_block OUT PLS_INTEGER
 12                               ) return varchar2 as
 13  
 14    comm_str    varchar2(4000);
 15    Begin
 16      -- Check version is >= 10.2
 17      if version < '10.02.00.00.00' then
 18        return '';
 19      end if;
 20  
 21      sys.dbms_zhelp_ir.check_sys_priv(DBMS_ZHELP_IR.KZSSTA);
 22  
 23      <<exp_done>>
 24      if zone = EXP_END then
 25        zone := EXP_START;
 26        if policy_q%ISOPEN = TRUE then
 27          close policy_q;
 28        end if;
 29        return '';
 30      end if;
 31  
 32      comm_str := export_perms(zone, new_block);
 33  
 34      if comm_str is null then
 35        zone := EXP_END;
 36        goto exp_done;
 37      else
 38        zone := zone + 1;
 39        return comm_str;
 40      end if;
 41    exception
 42      when others then
 43        zone := EXP_START;
 44        raise;
 45    end grant_sysprivs_exp;
 46  
 47    function create_exp(objid IN number,
 48                        version in varchar2,
 49                        new_block OUT PLS_INTEGER) return varchar2 as
 50    Begin
 51      return '';
 52    end create_exp;
 53  
 54    function grant_exp (objid IN NUMBER,
 55                        isdba IN PLS_INTEGER,
 56                        grantor OUT VARCHAR2,
 57                        version IN VARCHAR2,
 58                        new_block OUT PLS_INTEGER) RETURN varchar2 as
 59    Begin
 60      return '';
 61    end grant_exp;
 62  
 63    function audit_exp (objid IN NUMBER,
 64                        version IN VARCHAR2,
 65                        new_block OUT PLS_INTEGER) RETURN varchar2 as
 66    Begin
 67      return '';
 68    end audit_exp;
 69  
 70    function audit_sysprivs_exp (version IN VARCHAR2,
 71                                 new_block OUT PLS_INTEGER ) RETURN varchar2 as
 72    Begin
 73      return '';
 74    end audit_sysprivs_exp;
 75  
 76    function drop_exp (objid IN NUMBER,
 77                       version IN VARCHAR2,
 78                       new_block OUT PLS_INTEGER) RETURN varchar2 as
 79    Begin
 80      return '';
 81    end drop_exp;
 82  
 83   -- uses the temp_java_perms table built by the first part of import
 84   -- and adds permissions and policy permissions as necessary.
 85    procedure import_jvm_perms(pcol temp_java_policy) as
 86  
 87    row_count number;
 88  
 89    key       number;
 90  
 91    POLICYPERM CONSTANT varchar2(50) :=
 92          'oracle.aurora.rdbms.security.PolicyTablePermission';
 93  
 94    class  varchar2(500);
 95  
 96    action varchar2(200);
 97  
 98    pol_seq number :=0 ;
 99    run_seq number :=0 ;
100  
101    Begin
102  
103      -- Check privs
104      sys.dbms_zhelp_ir.check_sys_priv(DBMS_ZHELP_IR.KZSSTA);
105  
106      -- we need to disable the RESTRICTion on RuntimePermission#LoadLibrary
107      select seq into pol_seq from dba_java_policy
108             where kind = 'RESTRICT' and type_schema='SYS'
109             and type_name = POLICYPERM and
110             name = '0:java.lang.RuntimePermission#loadLibrary.*' and
111             enabled='ENABLED';
112  
113      if(pol_seq != 0) then
114          dbms_java.disable_permission(pol_seq);
115      end if;
116  
117      select seq into run_seq from dba_java_policy
118             where kind = 'RESTRICT' and type_schema='SYS'
119             and type_name = 'java.lang.RuntimePermission' and
120             name = 'loadLibrary.*' and  enabled='ENABLED';
121  
122      if(run_seq != 0) then
123          dbms_java.disable_permission(run_seq);
124      end if;
125  
126  
127      -- This is the main loop that goes through each record
128      -- and check the target dba_java_policy table to see if there is
129      -- a like permission there already.  If not then the permission
130      -- is created.
131  
132      for i in pcol.FIRST .. pcol.LAST
133      loop
134          -- Check if permission is already in dba_java_policy
135          select count(*) into row_count from dba_java_policy d where
136          pcol(i).kind = d.kind and
137          pcol(i).grantee = d.grantee and
138          pcol(i).type_schema = d.type_schema and
139          pcol(i).type_name = d.type_name and
140          (pcol(i).name = d.name or (pcol(i).name is null and d.name is null)
141           or ((d.name ='*' or d.name is null) and pcol(i).name != null)) and
142          (pcol(i).action = d.action or (pcol(i).action is null and
143          d.action is null) or ((d.action = '*' or d.action is null) and
144          pcol(i).action != null));
145          -- If this is non-zero then we must grant or restrict
146          if row_count = 0 then
147            -- GRANT
148            if pcol(i).kind = 'GRANT' then
149            -- Policy Permissions are handled differently
150              if pcol(i).type_name = POLICYPERM then
151                if(instr(pcol(i).name,'0',1,1) = 0) then
152                  class := pcol(i).name;
153                  action := '';
154                else
155                  class := substr(pcol(i).name,3,instr(pcol(i).name,'#',1,1)-3);
156                  action := substr(pcol(i).name,instr(pcol(i).name,'#',1,1)+1);
157                end if;
158                dbms_java.grant_policy_permission(pcol(i).grantee,
159                  pcol(i).type_schema, class, action, key);
160              else -- regular grants
161                dbms_java.grant_permission(pcol(i).grantee,
162                  pcol(i).type_schema||':'||pcol(i).type_name,
163                  pcol(i).name, pcol(i).action,key);
164              end if;
165            else -- RESTRICT
166              if pcol(i).type_name = POLICYPERM then
167                dbms_java.restrict_permission(pcol(i).grantee,
168                  pcol(i).type_schema||':'||POLICYPERM, pcol(i).name,'',key);
169              else
170                 dbms_java.restrict_permission(pcol(i).grantee,
171                  pcol(i).type_schema||':'||pcol(i).type_name,
172                  pcol(i).name, pcol(i).action,key);
173              end if;
174            end if;
175            if pcol(i).enabled = 'DISABLE' then
176              dbms_java.disable_permission(key);
177            end if;
178          else
179            goto end_loop;
180          end if;
181      <<end_loop>>
182      null;
183      end loop;
184  
185      -- reenable the RESTRICTions run_seq must be first!
186      if(run_seq != 0) then
187         dbms_java.enable_permission(run_seq);
188      end if;
189      if( pol_seq != 0) then
190         dbms_java.enable_permission(pol_seq);
191      end if;
192    exception
193      WHEN OTHERS THEN
194       raise;
195    end import_jvm_perms;
196  
197    function export_perms(state IN OUT PLS_INTEGER, new_block OUT PLS_INTEGER)
198          return varchar2 as
199  
200    kind        varchar2(8);
201    grantee     varchar2(30);
202    type_schema varchar2(30);
203    type_name   varchar2(4000);
204    name        varchar2(4000);
205    action      varchar2(4000);
206    enabled     varchar2(8);
207  
208    Begin
209  -- open the dba_java_policy cursor and return temp tale creation
210      IF policy_q%ISOPEN = FALSE and state = 0 THEN
211        open policy_q;
212        new_block := 0;
213        return 'execute immediate (''CREATE TABLE TEMP_JAVA_PRIVS' ||
214               ' AS SELECT KIND, GRANTEE, TYPE_SCHEMA, TYPE_NAME,' ||
215               ' NAME, ACTION, ENABLED FROM DBA_JAVA_POLICY WHERE ROWNUM > 1'');';
216      end if;
217  --  Process the insert commands for import.
218      if policy_q%ISOPEN = TRUE then
219        Fetch policy_q into kind, grantee, type_schema,
220                            type_name, name, action, enabled;
221        if policy_q%NOTFOUND OR policy_q%NOTFOUND IS NULL THEN
222          close policy_q;
223          state := EXP_END -1;
224      else
225    -- process each row and right the inserts
226         if state = 1 then
227           new_block := 1;
228         else
229           new_block := 0;
230         end if;
231         return 'INSERT INTO TEMP_JAVA_PRIVS VALUES(''' || kind || ''',''' ||
232                 grantee || ''',''' || type_schema || ''',''' || type_name ||
233                 ''',''' || name || ''',''' || action || ''',''' ||
234                 enabled || ''');';
235        end if;
236      end if;
237      if state = EXP_END-1 then
238        new_block :=1;
239        return
240  'DECLARE
241     TJP SYS.DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;
242     CURSOR C1 IS SELECT KIND,GRANTEE,TYPE_SCHEMA,TYPE_NAME,
243                         NAME,ACTION,ENABLED FROM TEMP_JAVA_PRIVS;
244  BEGIN
245     OPEN C1;
246     FETCH C1 BULK COLLECT INTO TJP;
247     CLOSE C1;
248     SYS.DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(TJP);
249     EXECUTE IMMEDIATE(''DROP TABLE TEMP_JAVA_PRIVS'');
250  END;';
251      end if;
252  -- export is done
253      return '';
254    end export_perms;
255  
256  end DBMS_JVM_EXP_PERMS;
257  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> DELETE FROM exppkgobj$ where package = 'DBMS_JVM_EXP_PERMS';

1 row deleted.

SQL> insert into sys.exppkgobj$ values('DBMS_JVM_EXP_PERMS', 'SYS', 1, 29, 1, 4000);

1 row created.

SQL> commit;

Commit complete.

SQL> 
SQL> 
SQL> 
SQL> GRANT EXECUTE ON sys.dbms_jvm_exp_perms TO IMP_FULL_DATABASE;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_jvm_exp_perms TO DATAPUMP_EXP_FULL_DATABASE;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_jvm_exp_perms for sys.dbms_jvm_exp_perms;

Synonym created.

SQL> /

Synonym created.

SQL> 
SQL> -- This will error out if the patch was run previously.
SQL> -- This will not affect the patch.
SQL> begin
  2  initjvmaux.exec('revoke execute on sys.dbms_jvm_exp_perms from PUBLIC');
  3  exception
  4  when others then
  5  if sqlcode not in (-01927, -06550, -06512) then raise; end if;
  6  end;
  7  /
revoke execute on sys.dbms_jvm_exp_perms from PUBLIC

PL/SQL procedure successfully completed.

SQL> @?/cpu/scripts/bug9016295.sql
SQL> @?/javavm/install/jvm_exp.sql
SQL> Rem
SQL> Rem $Header: javavm/install/jvm_exp.sql /st_recommended_11.1.0.7.0/2 2010/02/25 13:56:19 etucker Exp $
SQL> Rem
SQL> Rem dbms_jvm_exp_perms.sql
SQL> Rem
SQL> Rem Copyright (c) 2005, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbms_jvm_exp_perms.sql - supports export of java permissions
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This package is registered in sys.exppkgobj$.  This will enable
SQL> Rem      exporting of all permmissions.  Any permissions different from those
SQL> Rem      in the target db will be added to java$policy$ if necessary.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      import_perms can not be run alone.  It depends on the strings emitted
SQL> Rem      by the export_perms() output to create the beginning table.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    etucker     02/25/10 - add protection for revoke
SQL> Rem    etucker     02/14/10 - XbranchMerge
SQL> Rem                           etucker_rfi_backport_9016295_11.1.0.7.3 from
SQL> Rem                           st_javavm_11.1.0
SQL> Rem    etucker     02/12/10 - add revoke
SQL> Rem    etucker     02/11/10 - Backport etucker_bug-9016295 from main
SQL> Rem    etucker     04/02/07 - disable problems
SQL> Rem    etucker     06/30/05 - check for enabled
SQL> Rem    etucker     06/28/05 - fix query
SQL> Rem    etucker     06/13/05 - add version check for backward compat
SQL> Rem    etucker     06/08/05 - remove set stuff
SQL> Rem    etucker     05/06/05 - etucker_bug-3993297
SQL> Rem    etucker     05/06/05 - more support
SQL> Rem    etucker     05/02/05 - Created
SQL> Rem
SQL> 
SQL> create or replace package DBMS_JVM_EXP_PERMS AUTHID CURRENT_USER as
  2    TYPE temp_rec is record (
  3         kind        dba_java_policy.kind%TYPE,
  4         grantee     dba_java_policy.grantee%TYPE,
  5         type_schema dba_java_policy.type_schema%TYPE,
  6         type_name   dba_java_policy.type_name%TYPE,
  7         name        dba_java_policy.name%TYPE,
  8         action      dba_java_policy.action%TYPE,
  9         enabled     dba_java_policy.enabled%TYPE
 10         );
 11  
 12    TYPE temp_java_policy is table of temp_rec;
 13  
 14    function create_exp(objid IN number,
 15                        version in varchar2,
 16                        new_block OUT PLS_INTEGER) return varchar2;
 17  
 18    function grant_exp (objid IN NUMBER,
 19                        isdba IN PLS_INTEGER,
 20                        grantor OUT VARCHAR2,
 21                        version IN VARCHAR2,
 22                        new_block OUT PLS_INTEGER) RETURN varchar2;
 23  
 24    function audit_exp (objid IN NUMBER,
 25                        version IN VARCHAR2,
 26                        new_block OUT PLS_INTEGER) RETURN varchar2;
 27  
 28    function drop_exp (objid IN NUMBER,
 29                       version IN VARCHAR2,
 30                       new_block OUT PLS_INTEGER) RETURN varchar2;
 31  
 32    function audit_sysprivs_exp (version IN VARCHAR2,
 33                                 new_block OUT PLS_INTEGER ) RETURN varchar2;
 34    function grant_sysprivs_exp(version IN varchar2,
 35                                new_block OUT PLS_INTEGER
 36                               ) return varchar2;
 37    procedure import_jvm_perms(pcol temp_java_policy);
 38    function  export_perms(state IN OUT PLS_INTEGER, new_block OUT PLS_INTEGER)
 39                          return varchar2;
 40  end DBMS_JVM_EXP_PERMS;
 41  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> create or replace package body DBMS_JVM_EXP_PERMS as
  2    EXP_END    CONSTANT PLS_INTEGER := 999999;
  3    EXP_START  CONSTANT PLS_INTEGER := 0;
  4    cursor policy_q is select kind, grantee, type_schema,type_name,
  5                              name,action, enabled from dba_java_policy where
  6                              enabled='ENABLED';
  7    zone PLS_INTEGER := EXP_START;
  8  
  9  
 10    function grant_sysprivs_exp(version IN varchar2,
 11                                new_block OUT PLS_INTEGER
 12                               ) return varchar2 as
 13  
 14    comm_str    varchar2(4000);
 15    Begin
 16      -- Check version is >= 10.2
 17      if version < '10.02.00.00.00' then
 18        return '';
 19      end if;
 20  
 21      sys.dbms_zhelp_ir.check_sys_priv(DBMS_ZHELP_IR.KZSSTA);
 22  
 23      <<exp_done>>
 24      if zone = EXP_END then
 25        zone := EXP_START;
 26        if policy_q%ISOPEN = TRUE then
 27          close policy_q;
 28        end if;
 29        return '';
 30      end if;
 31  
 32      comm_str := export_perms(zone, new_block);
 33  
 34      if comm_str is null then
 35        zone := EXP_END;
 36        goto exp_done;
 37      else
 38        zone := zone + 1;
 39        return comm_str;
 40      end if;
 41    exception
 42      when others then
 43        zone := EXP_START;
 44        raise;
 45    end grant_sysprivs_exp;
 46  
 47    function create_exp(objid IN number,
 48                        version in varchar2,
 49                        new_block OUT PLS_INTEGER) return varchar2 as
 50    Begin
 51      return '';
 52    end create_exp;
 53  
 54    function grant_exp (objid IN NUMBER,
 55                        isdba IN PLS_INTEGER,
 56                        grantor OUT VARCHAR2,
 57                        version IN VARCHAR2,
 58                        new_block OUT PLS_INTEGER) RETURN varchar2 as
 59    Begin
 60      return '';
 61    end grant_exp;
 62  
 63    function audit_exp (objid IN NUMBER,
 64                        version IN VARCHAR2,
 65                        new_block OUT PLS_INTEGER) RETURN varchar2 as
 66    Begin
 67      return '';
 68    end audit_exp;
 69  
 70    function audit_sysprivs_exp (version IN VARCHAR2,
 71                                 new_block OUT PLS_INTEGER ) RETURN varchar2 as
 72    Begin
 73      return '';
 74    end audit_sysprivs_exp;
 75  
 76    function drop_exp (objid IN NUMBER,
 77                       version IN VARCHAR2,
 78                       new_block OUT PLS_INTEGER) RETURN varchar2 as
 79    Begin
 80      return '';
 81    end drop_exp;
 82  
 83   -- uses the temp_java_perms table built by the first part of import
 84   -- and adds permissions and policy permissions as necessary.
 85    procedure import_jvm_perms(pcol temp_java_policy) as
 86  
 87    row_count number;
 88  
 89    key       number;
 90  
 91    POLICYPERM CONSTANT varchar2(50) :=
 92          'oracle.aurora.rdbms.security.PolicyTablePermission';
 93  
 94    class  varchar2(500);
 95  
 96    action varchar2(200);
 97  
 98    pol_seq number :=0 ;
 99    run_seq number :=0 ;
100  
101    Begin
102  
103      -- Check privs
104      sys.dbms_zhelp_ir.check_sys_priv(DBMS_ZHELP_IR.KZSSTA);
105  
106      -- we need to disable the RESTRICTion on RuntimePermission#LoadLibrary
107      select seq into pol_seq from dba_java_policy
108             where kind = 'RESTRICT' and type_schema='SYS'
109             and type_name = POLICYPERM and
110             name = '0:java.lang.RuntimePermission#loadLibrary.*' and
111             enabled='ENABLED';
112  
113      if(pol_seq != 0) then
114          dbms_java.disable_permission(pol_seq);
115      end if;
116  
117      select seq into run_seq from dba_java_policy
118             where kind = 'RESTRICT' and type_schema='SYS'
119             and type_name = 'java.lang.RuntimePermission' and
120             name = 'loadLibrary.*' and  enabled='ENABLED';
121  
122      if(run_seq != 0) then
123          dbms_java.disable_permission(run_seq);
124      end if;
125  
126  
127      -- This is the main loop that goes through each record
128      -- and check the target dba_java_policy table to see if there is
129      -- a like permission there already.  If not then the permission
130      -- is created.
131  
132      for i in pcol.FIRST .. pcol.LAST
133      loop
134          -- Check if permission is already in dba_java_policy
135          select count(*) into row_count from dba_java_policy d where
136          pcol(i).kind = d.kind and
137          pcol(i).grantee = d.grantee and
138          pcol(i).type_schema = d.type_schema and
139          pcol(i).type_name = d.type_name and
140          (pcol(i).name = d.name or (pcol(i).name is null and d.name is null)
141           or ((d.name ='*' or d.name is null) and pcol(i).name != null)) and
142          (pcol(i).action = d.action or (pcol(i).action is null and
143          d.action is null) or ((d.action = '*' or d.action is null) and
144          pcol(i).action != null));
145          -- If this is non-zero then we must grant or restrict
146          if row_count = 0 then
147            -- GRANT
148            if pcol(i).kind = 'GRANT' then
149            -- Policy Permissions are handled differently
150              if pcol(i).type_name = POLICYPERM then
151                if(instr(pcol(i).name,'0',1,1) = 0) then
152                  class := pcol(i).name;
153                  action := '';
154                else
155                  class := substr(pcol(i).name,3,instr(pcol(i).name,'#',1,1)-3);
156                  action := substr(pcol(i).name,instr(pcol(i).name,'#',1,1)+1);
157                end if;
158                dbms_java.grant_policy_permission(pcol(i).grantee,
159                  pcol(i).type_schema, class, action, key);
160              else -- regular grants
161                dbms_java.grant_permission(pcol(i).grantee,
162                  pcol(i).type_schema||':'||pcol(i).type_name,
163                  pcol(i).name, pcol(i).action,key);
164              end if;
165            else -- RESTRICT
166              if pcol(i).type_name = POLICYPERM then
167                dbms_java.restrict_permission(pcol(i).grantee,
168                  pcol(i).type_schema||':'||POLICYPERM, pcol(i).name,'',key);
169              else
170                 dbms_java.restrict_permission(pcol(i).grantee,
171                  pcol(i).type_schema||':'||pcol(i).type_name,
172                  pcol(i).name, pcol(i).action,key);
173              end if;
174            end if;
175            if pcol(i).enabled = 'DISABLE' then
176              dbms_java.disable_permission(key);
177            end if;
178          else
179            goto end_loop;
180          end if;
181      <<end_loop>>
182      null;
183      end loop;
184  
185      -- reenable the RESTRICTions run_seq must be first!
186      if(run_seq != 0) then
187         dbms_java.enable_permission(run_seq);
188      end if;
189      if( pol_seq != 0) then
190         dbms_java.enable_permission(pol_seq);
191      end if;
192    exception
193      WHEN OTHERS THEN
194       raise;
195    end import_jvm_perms;
196  
197    function export_perms(state IN OUT PLS_INTEGER, new_block OUT PLS_INTEGER)
198          return varchar2 as
199  
200    kind        varchar2(8);
201    grantee     varchar2(30);
202    type_schema varchar2(30);
203    type_name   varchar2(4000);
204    name        varchar2(4000);
205    action      varchar2(4000);
206    enabled     varchar2(8);
207  
208    Begin
209  -- open the dba_java_policy cursor and return temp tale creation
210      IF policy_q%ISOPEN = FALSE and state = 0 THEN
211        open policy_q;
212        new_block := 0;
213        return 'execute immediate (''CREATE TABLE TEMP_JAVA_PRIVS' ||
214               ' AS SELECT KIND, GRANTEE, TYPE_SCHEMA, TYPE_NAME,' ||
215               ' NAME, ACTION, ENABLED FROM DBA_JAVA_POLICY WHERE ROWNUM > 1'');';
216      end if;
217  --  Process the insert commands for import.
218      if policy_q%ISOPEN = TRUE then
219        Fetch policy_q into kind, grantee, type_schema,
220                            type_name, name, action, enabled;
221        if policy_q%NOTFOUND OR policy_q%NOTFOUND IS NULL THEN
222          close policy_q;
223          state := EXP_END -1;
224      else
225    -- process each row and right the inserts
226         if state = 1 then
227           new_block := 1;
228         else
229           new_block := 0;
230         end if;
231         return 'INSERT INTO TEMP_JAVA_PRIVS VALUES(''' || kind || ''',''' ||
232                 grantee || ''',''' || type_schema || ''',''' || type_name ||
233                 ''',''' || name || ''',''' || action || ''',''' ||
234                 enabled || ''');';
235        end if;
236      end if;
237      if state = EXP_END-1 then
238        new_block :=1;
239        return
240  'DECLARE
241     TJP SYS.DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;
242     CURSOR C1 IS SELECT KIND,GRANTEE,TYPE_SCHEMA,TYPE_NAME,
243                         NAME,ACTION,ENABLED FROM TEMP_JAVA_PRIVS;
244  BEGIN
245     OPEN C1;
246     FETCH C1 BULK COLLECT INTO TJP;
247     CLOSE C1;
248     SYS.DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(TJP);
249     EXECUTE IMMEDIATE(''DROP TABLE TEMP_JAVA_PRIVS'');
250  END;';
251      end if;
252  -- export is done
253      return '';
254    end export_perms;
255  
256  end DBMS_JVM_EXP_PERMS;
257  /

Package body created.

SQL> show errors;
No errors.
SQL> 
SQL> DELETE FROM exppkgobj$ where package = 'DBMS_JVM_EXP_PERMS';

1 row deleted.

SQL> insert into sys.exppkgobj$ values('DBMS_JVM_EXP_PERMS', 'SYS', 1, 29, 1, 4000);

1 row created.

SQL> commit;

Commit complete.

SQL> 
SQL> 
SQL> 
SQL> GRANT EXECUTE ON sys.dbms_jvm_exp_perms TO IMP_FULL_DATABASE;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_jvm_exp_perms TO DATAPUMP_EXP_FULL_DATABASE;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_jvm_exp_perms for sys.dbms_jvm_exp_perms;

Synonym created.

SQL> /

Synonym created.

SQL> 
SQL> -- This will error out if the patch was run previously.
SQL> -- This will not affect the patch.
SQL> begin
  2  initjvmaux.exec('revoke execute on sys.dbms_jvm_exp_perms from PUBLIC');
  3  exception
  4  when others then
  5  if sqlcode not in (-01927, -06550, -06512) then raise; end if;
  6  end;
  7  /
revoke execute on sys.dbms_jvm_exp_perms from PUBLIC

PL/SQL procedure successfully completed.

SQL> 
SQL> PROMPT Skipping OLAP Analytic Workspace because it is not installed or versions mismatch...
Skipping OLAP Analytic Workspace because it is not installed or versions mismatch...
SQL> PROMPT Processing Oracle Database Packages and Types...
Processing Oracle Database Packages and Types...
SQL> ALTER SESSION SET current_schema = sys;

Session altered.

SQL> @?/rdbms/admin/catexp.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catexp.sql /st_recommended_11.1.0.7.0/1 2010/01/18 22:37:27 mjangir Exp $ expvew.sql
SQL> Rem
SQL> Rem Copyright (c) 1987, 2010, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem NAME
SQL> Rem    CATEXP81.SQL - CATalog EXPort/import sql script
SQL> Rem  FUNCTION
SQL> Rem    Creates internal views for Export/Import utility
SQL> Rem  NOTES
SQL> Rem    Must be run when connected to SYS or INTERNAL.
SQL> Rem
SQL> Rem    This file is organized into 3 sections:
SQL> Rem     Section 1: Views needed by BOTH export and import
SQL> Rem     Section 2: Views required by import ONLY
SQL> Rem     Section 3: Views required by export ONLY
SQL> Rem
SQL> Rem     Import does not currently require any views of its own. The views
SQL> Rem     used by both tools are moved to the top so that a user doing an import
SQL> Rem     only has to run part of this file. Since there are common views
SQL> Rem     a separate file called catimp.sql was not created for now for
SQL> Rem     maintenance reasons.
SQL> Rem
SQL> Rem     No views depend on catalog.sql. This script can be run standalone.
SQL> Rem
SQL> Rem
SQL> Rem  MODIFIED
SQL> Rem     mjangir    01/14/10 - Backport mjangir_bug-8982033 from main
SQL> Rem     msakayed   05/12/08 - Lrg #3404520: fix exu8dir view
SQL> Rem     mjangir    02/04/08 - 6119138: grant to exp_full_db instead of
SQL> Rem                           select_catalog_role for exu8phs
SQL> Rem     mjangir    09/11/07 - XbranchMerge mjangir_bug-5872788_10.2.0.4 from
SQL> Rem                           st_rdbms_10.2
SQL> Rem     mjangir    06/07/07 - bug 5872788 operator dependency ordering
SQL> Rem     weizhang   03/08/07 - lrg 2884728: support tablespace MAXSIZE
SQL> Rem     hosu       02/27/07 - add administer sql management object to
SQL> Rem                           exp_full_database and imp_full_database roles
SQL> Rem     kamble     11/02/06 - add IDR_DIR to noexp$
SQL> Rem     slynn      10/12/06 - smartfile->securefile
SQL> Rem     yhu        09/14/06 - export with system managed statistics
SQL> Rem     mhho       09/10/06 - add XS$NULL to be excluded from all views
SQL> Rem     kamble     09/07/06 - exu11xml view for getting opqtype$ flags
SQL> Rem     kamble     08/10/06 - encrypted tablespace
SQL> Rem     ataracha   07/13/06 - add user anonymous to be excluded from all views
SQL> Rem     mjangir    07/10/06 - 5176017: Adding ifreepool column in exu9lob view
SQL> Rem     dkapoor    07/03/06 - don't export ORACLE_OCM
SQL> Rem     weizhang   06/06/06 - proj 18567: support LOBRETENTION and MAXSIZE
SQL> Rem     xbarr      06/06/06 - remove DMSYS schema - obsolete in 11g
SQL> Rem     sramakri   05/15/06 - define exu11ind similar to exu9ind
SQL> Rem     sramakri   04/12/06 - index changes for mvs
SQL> Rem     wesmith    04/05/06 - add snapshot views for v11
SQL> Rem     kamble     03/13/06 - 4711857: comment$ problem(long column involved)
SQL> Rem     dgagne     01/26/06 - add replace for apos in exu10asc view for
SQL> Rem                           columns with apos in them
SQL> Rem     jgalanes   12/20/05 - Add expxsldelim for 4656020
SQL> Rem     sdavidso   11/30/05 - Fix 4087161 - MDAPI for nested tables w/XMLtype
SQL> Rem     jgalanes   08/04/05 - Fix 4526056 - exu81ixsp - get compression
SQL> Rem     jgalanes   07/13/05 - 4375555 IOT w/mapping table in TRANSPORTABLE
SQL> Rem                           mode
SQL> Rem     cdilling   05/11/05 - Fix 4347949 - ignore java classes owned by SYS
SQL> Rem     jgalanes   05/09/05 - Fix 4046842 - exclude types not related to
SQL> Rem                           subject table
SQL> Rem     cdilling   05/02/05 - ignore WMSYS
SQL> Rem     kneel      11/11/04 - fix lrg 1795214: unique constraint error on
SQL> Rem                           import
SQL> Rem     jgalanes   10/27/04 - Fix 3906846 - add exu102xtyp view
SQL> Rem     araghava   10/25/04 - 3448802: don't partobj$ to get blocksize in
SQL> Rem                           *_LOBS
SQL> Rem     jgalanes   10/15/04 - 3651756 switch from SELECT_CATALOG_ROLE
SQL> Rem                           to ExP_FULL_DATABASE on exu?lnk
SQL> Rem     jgalanes   09/28/04 - PLSQL_CCFLAGS
SQL> Rem     rburns     09/13/04 - check for SYS user
SQL> Rem     jgalanes   08/31/04 - Column encryption
SQL> Rem     jgalanes   07/21/04 - Fix 3047454 TTS with unused ADT columns
SQL> Rem     cdilling   07/01/04 - Do not export EXFSYS schema or HELP table
SQL> Rem     jgalanes   06/10/04 - 3617574 add HAKAN factor to exu81tts
SQL> Rem     rvissapr   06/09/04 - proj 5523 dblink pswd encode
SQL> Rem     jgalanes   04/23/04 - Fix 3447083 - IOT degree lost
SQL> Rem     mxiao      03/25/03 - add EXU10SNAP*
SQL> Rem     jgalanes   03/05/04 - Adding new views for 3467567 imp_tab_trig &
SQL> Rem                           imp_lob_notnull
SQL> Rem     jgalanes   02/25/04 - Fix 2654811 exu81tabs trigflag with row movement
SQL> Rem     bmccarth   02/03/04 - check tables making use of template part.
SQL> Rem     jgalanes   12/18/03 - Fix 2734632 - PRESERVE SPECIFICATION TIMESTAMP
SQL> Rem     jgalanes   12/18/03 - Fix 3107208 - replacing missing view
SQL> Rem     jgalanes   01/26/04 - Fix 2539145 EXEMPT ACCESS POLICY - EXPExEMPT
SQL> Rem     hikimura   11/11/03 - 3159568: add type to exu8ref
SQL> Rem     jgalanes   11/10/03 - lrg1566954 dataobj# ordering
SQL> Rem     jgalanes   11/06/03 - new views for 3230116 - compression
SQL> Rem     kamble     09/08/03 - 3071475: return attr name if lob is user defined
SQL> Rem     hikimura   08/01/03 - 2977202: add view imp9con
SQL> Rem     jgalanes   08/20/03 - Fix lrg1336525 - table stats for IOTs
SQL> Rem     clei       07/15/03 - synonym polices no longer attached to base object
SQL> Rem     kamble     06/25/03 - 2803911: add view exu8col_tts_unused_col
SQL> Rem     mramache   06/23/03 - sql profiles
SQL> Rem     bmccarth   06/27/03 - 10i version of exu9coe that includes column
SQL> Rem                           with default values for object tables
SQL> Rem     jgalanes   05/21/03 - PLSQL_COMPILER_FLAGS changes
SQL> Rem     cdilling   05/19/03 - Do not export DBSNMP user
SQL> Rem     aramarao   04/24/03 - 2900891 fix ora-904 on spolicy exporting from 817
SQL> Rem     jgalanes   05/20/03 - create exu10doso for 2946068
SQL> Rem     krajaman   05/20/03 - Remove d_owner# from dependency$
SQL> Rem     jgalanes   05/02/03 - 2859106 more supplemental log stuff
SQL> Rem     jgalanes   04/01/03 - Fix 2869900 by fixing DECODE in imp_lob_info view
SQL> Rem     bmccarth   03/18/03 - ignore DMSYS
SQL> Rem     bmccarth   03/20/03 - exclude recycle bin object from transportable
SQL> Rem                           and domain index secondary object views
SQL> Rem     kamble     02/27/03 - imp9tvoid - get latest tvoid
SQL> Rem     bmccarth   01/22/03 - binary float/double values incorrect
SQL> Rem     wfisher    01/27/03 - Granting RESUMABLE priv to *_FULL_DATABASE roles
SQL> Rem     jgalanes   01/29/03 - PL/SQL compiler optimize switch changes
SQL> Rem     mxiao      01/13/03 - retrieve COMMENT in exu9snap
SQL> Rem     bmccarth   01/13/03 - return opqtype$ out-of-line flag
SQL> Rem     atsukerm   12/27/02 - grant profile creation to imp_full_database
SQL> Rem     jgalanes   01/03/03 - Fix lrg by adding lob.property to lob_chunksize view
SQL> Rem     bmccarth   01/08/03 - exclude 21/22 types from tabxxx views
SQL> Rem     cdilling   01/06/03 - Do not export DIP
SQL> Rem     jdavison   12/13/02 - Do not export SI_INFORMTN_SCHEMA
SQL> Rem     bmccarth   10/29/02 - exclude recycle bin objects
SQL> Rem     tkeefe     09/24/02 - Move proxy_data$ and proxy_role_data$ out of
SQL> Rem                           bootstrap region
SQL> Rem     vkarra     08/08/02 - tablespace groups
SQL> Rem     sasriniv   09/05/02 - Fix 2544428
SQL> Rem     nireland   09/04/02 - Add select any seq to exp_full_database
SQL> Rem     bmccarth   08/20/02 - don't exclude secondary object from exu9ltts
SQL> Rem     mxiao      08/07/02 - add new view for 10i mv logs
SQL> Rem     twtong     08/22/02 - add alias_txt to exu9snap
SQL> Rem     jgalanes   08/08/02 - Fix 2383871 by exporting typeid
SQL> Rem     sasriniv   08/01/02 - Fix lrg caused by 2261722
SQL> Rem     jgalanes   07/18/02 - Add new view for 2247291 LOB triggers to
SQL> Rem                           get chunk size
SQL> Rem     sasriniv   07/03/02 - Fix 2261722
SQL> Rem     araghava   05/15/02 - partition #s no longer go from 1->n. don't use
SQL> Rem                           predicate part# = 1.
SQL> Rem     jgalanes   05/07/02 - Fix bug 2349201.
SQL> Rem     bmccarth   04/29/02 - v$compatibility going away
SQL> Rem     bmccarth   03/29/02 - remove uid check from exu9xmlst
SQL> Rem     jgalanes   04/03/02 - Fix bug 2300104 - support UNDER clause of
SQL> Rem                           CREATE VIEW.
SQL> Rem     jgalanes   02/15/02 - Fix 2226749 by improving type ordering.
SQL> Rem     emagrath   02/08/02 - Exclude hidden columns for NOT NULL constr.
SQL> Rem     jgalanes   01/30/02 - bug 2182686 - use source$ for triggers export.
SQL> Rem     bmccarth   01/28/02 - exclude xdb schema, add views to grab xdb info
SQL> Rem     emagrath   01/07/02 - Elim. endian REF problem
SQL> Rem     jgalanes   12/19/01 - Fix bug 2127010 by ordering types..
SQL> Rem     jgalanes   12/10/01 - make imp9tvoid fetch object STATUS.
SQL> Rem     bmccarth   12/21/01 - ordered collections
SQL> Rem     nireland   11/14/01 - Fix column comment problem. #2106151
SQL> Rem     nireland   11/06/01  - Add defsubpcnt to EXU9PDS. #2089034
SQL> Rem     celsbern   11/01/01 - adding grant on exu9actionobj.
SQL> Rem     bmccarth   10/23/01 - merge error in exu81actionobj
SQL> Rem     celsbern   10/19/01  - merge LOG to MAIN
SQL> Rem     clei       10/11/01  -
> Rem     prakumar   10/10/01  - 2035111:Add a hint to exu9lbp & exu81lbsp to
SQL> Rem                            improve performance
SQL> Rem     bmccarth   10/17/01  - log branch merge
SQL> Rem     dgagne     10/12/01  - add support for table/tablespace compress option
SQL> Rem     jgalanes   10/05/01  - implement support for type synonyms.
SQL> Rem     prakumar   09/18/01  - add support for grant on java (re)source objects
SQL> Rem     clei       08/30/01  - change exu9rls to support VPD policies on
SQL> Rem                            synonym
SQL> Rem     dgagne     09/12/01  - add support for subpartition templates
SQL> Rem     dgagne     08/29/01  - add support for range/list composite partitions
SQL> Rem     bmccarth   08/27/01  - typeo in 8lnk view
SQL> Rem     bmccarth   08/21/01  - return flags from link table
SQL> Rem     emagrath   08/14/01  - Elim. probs with REF and other constraints
SQL> Rem     bmccarth   08/02/01  - New view to containing tables with unused
SQL> Rem                            columns
SQL> Rem     bmccarth   07/24/01  - log based replication
SQL> Rem     pabingha   07/17/01  - add exu9mvlu view
SQL> Rem     nireland   07/05/01  - Amend exu9ind to exclude ALL OID PK indices
SQL> Rem     druthven   06/29/01  - 1826338 - improve performance of exu81lbspu
SQL> Rem     dmwong     05/30/01  - bug1796876 - quotes in FGA predicates.
SQL> Rem     dmwong     05/27/01  - bug1802004 - remove trailing spaces in exu9rls.
SQL> Rem     pabingha   05/09/01  - add oldest times to CDC MV Log views
SQL> Rem     htseng     04/12/01  - eliminate execute twice (remove ;).
SQL> Rem     clei       04/16/01  - add static policy
SQL> Rem     wfisher    04/18/01  - Relax restrictions on when 'is type of' is
SQL> Rem                            generated.
SQL> Rem     prakumar   04/03/01 -  Support col NOT NULL constraint for object table
SQL> Rem     gclaborn   04/02/01  - Inc. perf. of partitioned lob views: #1712758
SQL> Rem     dgagne     04/04/01  - Add import view to get compatibility mode
SQL> Rem     nireland   03/14/01  - Fix pre-8.1 trigger export. #1675586
SQL> Rem     tkeefe     03/14/01  - Simplify normalization of n-tier schema.
SQL> Rem     htseng     03/13/01  - remove an extra line from create/select imp9usr
SQL> Rem     somichi    03/05/01  - 1206380: Grant 'analyze any' privilege to
SQL> Rem                                     imp_full_database role
SQL> Rem     wesmith    03/01/01  - exu8coo: include snapshot hidden column
SQL> Rem     htseng     03/01/01  - add new query imp9usr for checking import user.
SQL> Rem     abrumm     02/20/01  - external_tab$: store access params as lob
SQL> Rem     dgagne     02/26/01  - fix exu9ind for stats on sys gen constraints
SQL> Rem     emagrath   02/16/01  - Support Opaque Type LOB storage
SQL> Rem     bmccarth   02/15/01  - imp9tvoid needs to use kzsrorol
SQL> Rem     bmccarth   02/07/01  - exu8col need coltype
SQL> Rem     bmccarth   01/08/01  - type evolution
SQL> Rem     emagrath   01/29/01  - Support XMLType CLOB storage
SQL> Rem     dmwong     01/28/01  - remove EXEMPT ACCESS POLICY for 8.0
SQL> Rem                            compatibility
SQL> Rem     prakumar   01/15/01  - Fix for bug 1218370
SQL> Rem     wfisher    01/08/01  - Type inheritance.
SQL> Rem     wesmith    12/28/00  - code review comments
SQL> Rem     dgagne     12/27/00  - change views with connect by for perf. gain
SQL> Rem     wesmith    12/13/00  - 9.0 export/import support for MVs
SQL> Rem     gmurphy    12/11/00  - Dont export LBACSYS in full export
SQL> Rem     jingliu    12/07/00  - add column synnam2 in exu8syn
SQL> Rem     abgupta    12/07/00  - disallow export of functional indices created
SQL> Rem                            as part of create MV.
SQL> Rem     dgagne     12/08/00  - add support for null associations
SQL> Rem     arithikr   12/13/00  - 1489592: expect ORA-1921 for
SQL> Rem                            imp_,exp_full_database
SQL> Rem     dgagne     12/04/00  - update for 9i
SQL> Rem     htseng     12/08/00  - Decode AL16UTF16 to UTF8 in exu8cset to fix
SQL> Rem                            9idb to 8i.
SQL> Rem     emagrath   11/28/00  - Exclude OIDINDEXs from index view
SQL> Rem     cku        11/17/00  - PBMJI
SQL> Rem     htseng     11/13/00  - add constraint using index support
SQL> Rem     dgagne     11/16/00  - remove tab_ovf references
SQL> Rem     rburns     11/09/00  - remove & for sqlplus
SQL> Rem     slawande   11/09/00  - Add export support for seq# in mvlog.
SQL> Rem     emagrath   10/31/00  - Support IOT MAPPING TABLE
SQL> Rem     prakumar   10/30/00  - #1421243:Ref column not null constraint was lost
SQL> Rem     emagrath   10/20/00  - Provide statistics info for PIOTs
SQL> Rem     dgagne     10/18/00  - put exu8dimu back in for 8.1.5 exp
SQL> Rem     nshodhan   10/17/00  - filter out oid only snapshot logs for 81views
SQL> Rem     jingliu    10/13/00  - code review comment
SQL> Rem     wfisher    10/11/00  - NLS_CHAR_LENGTH -> NLS_LENGTH_SEMANTICS
SQL> Rem     jingliu    09/29/00  - modify jobq related export view
SQL> Rem     bmccarth   09/28/00  - add view for domain index partitions
SQL> Rem     jgalanes   09/25/00  - Adding table qualifiers to new MV log views.
SQL> Rem     jgalanes   07/06/00  - Adding view for CDC style MV logs
SQL> Rem     dgagne     09/29/00  - update exu8ref for ref const on views
SQL> Rem     dgagne     09/26/00  - add support for tab_ovf$ to all table views
SQL> Rem     prakumar   09/18/00  - Fix view exu81javt to support shortened java obj
SQL> Rem     prakumar   09/10/00  - Bug 1347528:fix ts_type in exu8sto view.
SQL> Rem     nshodhan   09/06/00  - Add exu9snapl
SQL> Rem     wfisher    09/05/00  - Bitmap join indexes
SQL> Rem     htseng     08/31/00  - add row level scn support
SQL> Rem     htseng     08/24/00  - correct rollback seg bit
SQL> Rem     emagrath   07/28/00  - Multi-blocksize support
SQL> Rem     dgagne     10/11/00  - add view for obtaining compiler switches
SQL> Rem     nireland   07/25/00  - Fix exu81fil. #1244182
SQL> Rem     htseng     07/17/00  - undo tablespace support
SQL> Rem     bmccarth   07/12/00  - Domain index v2 changes
SQL> Rem     dgagne     07/11/00  - Update constraint views to not include tables in
SQL> Rem     dmwong     07/10/00  - add support for partitiond fine grained access.
SQL> Rem     dgagne     06/26/00  - Add support for 9.0 N-tier authentication
SQL> Rem     dgagne     07/18/00  - modify exu81tabs for external tables
SQL> Rem     bmccarth   06/22/00  - Change exu9nta for breakup of proxy$ table
SQL> Rem     nireland   06/07/00  - Add isonline to exu81sto
SQL> Rem     wfisher    06/16/00  - Unicode support
SQL> Rem     rmurthy    06/20/00  - change objauth.option column to hold flag bits
SQL> Rem     nireland   05/31/00  - Don't export constraints for ORDSYS etc.#1308267
SQL> Rem     wfisher    05/24/00  - Use partitioning info for logical tablespace exp
SQL> Rem     bmccarth   05/16/00  - bug 1296644 - performance of stored procedure ex
SQL> Rem     arithikr   05/10/00  - Bad merge, restore the file
SQL> Rem     jdavison   04/25/00  - Adjust creation of exu816ctx view.
SQL> Rem     htseng     04/11/00  - need quots for column name in lob clause
SQL> Rem     dmwong     08/31/98  - add exu81approle to support application role
SQL> Rem     tlee       10/13/98  - support adt attribute column on partition keys
SQL> Rem     nireland   03/21/00  - Fix outer join problem with exu8syn
SQL> Rem     dgagne     04/06/00  - add support for n-tier 8.1 project
SQL> Rem     rvissapr   03/06/00  - add support to create context accessed globally
SQL> Rem     dgagne     03/21/00  - update views used to examine indexes with const
SQL> Rem     dgagne     02/29/00  - Change exu81nos to export stats with named contr
SQL> Rem     emagrath   02/25/00  - Get attributes for LOBs in PIOTs
SQL> Rem     bmccarth   01/14/00  - icache: check for icache_imp_plsql
SQL> Rem     nireland   01/20/00  - tempflags now obsolete
SQL> Rem     wfisher    02/08/00  -  Create mode for logically exporting tablespaces
SQL> Rem     nireland   12/22/99  - Fetch index partition base object #
SQL> Rem     bmccarth   11/11/99  - incorrect merge- remove outer joints from
SQL> Rem                            exu816tgr
SQL> Rem     bmccarth   11/01/99  - performance work on exu816tgr
SQL> Rem     wfisher    10/21/99  - Don't look at invalid types on scalar nested tab
SQL> Rem     bmccarth   10/13/99  - bug 991834 - exu8orfs - remove cdef$ use
SQL> Rem     htseng     09/09/99  - fix primary key missing nologging attribute
SQL> Rem     cchui      08/18/99  - modify exu8coo to check for RLS hidden col
SQL> Rem     wfisher    08/17/99  - Fixing up grant for exu816sqv
SQL> Rem     wfisher    08/04/99  - Support sql versioning for snapshots/ update ver
SQL> Rem     wfisher    08/09/99  - fixing exu81tts and exu81usci
SQL> Rem     nireland   07/28/99  - Need update any table for LOBs. #861310
SQL> Rem     thoang     07/22/99  - Not using spare1 and spare2 from col$.
SQL> Rem     emagrath   07/08/99  - Support enhanced trigger events
SQL> Rem     dmwong     07/06/99  - add view to test for trusted oracle
SQL> Rem     mjungerm   06/15/99  - add java shared data object type
SQL> Rem     wfisher    06/24/99  - SQL Version support
SQL> Rem     cyyip      05/26/99  - remove special character '&'
SQL> Rem     wfisher    05/28/99  - Speeding up EXUTTS query
SQL> Rem     nvishnub   05/04/99  - Fix bug # 882543 (filter_non_existent_types)
SQL> Rem     nireland   04/21/99  - Remove bogus DROP ROLE. #874826
SQL> Rem     lbarton    04/26/99  - make export sensitive to COLLSTO COMPATIBILITY
SQL> Rem     nvishnub   04/19/99  - Fix views to improve performance.
SQL> Rem     nireland   04/09/99  - Cope with large tables. #867018
SQL> Rem     nvishnub   03/24/99  - E/I support for fast rebuild of domain indexes.
SQL> Rem     wfisher    03/26/99  - Make synonym ordering y2k ready
SQL> Rem     wfisher    03/18/99  - Redo view dependency ordering
SQL> Rem     wfisher    03/08/99  - TS for IOTS comes from index
SQL> Rem     wfisher    02/24/99  - more column statistics
SQL> Rem     lbarton    03/12/99  - change exu81javt
SQL> Rem     wfisher    02/15/99  - Don't export precomputed statistics when associa
SQL> Rem     nvishnub   01/07/99  - Handle indexes due to constraints correctly.
SQL> Rem     lbarton    02/22/99  - filter cartridge-owned objects
SQL> Rem     nvishnub   02/25/99  - Optimize view exu8dim(u).
SQL> Rem     wfisher    01/06/99  - bug 745470: vlen needed for testing overflow
SQL> Rem     wfisher    12/21/98  - Support associations
SQL> Rem     tlee       12/10/98  - change privilege rewrite to query rewrite
SQL> Rem     vkarra     11/19/98  - fix 81ind_base
SQL> Rem     masubram   11/17/98  - code review comments
SQL> Rem     masubram   10/13/98  - add two columns to exu81srt
SQL> Rem     mimoy      11/13/98  - Support NEVER REFRESH for snapshot in exu81snap
SQL> Rem     wesmith    11/13/98  - RepAPI export code review fixes
SQL> Rem     jingliu    11/12/98  - Fix imp/exp snapshot log related difs
SQL> Rem     lbarton    11/09/98  - new priv: administer database trigger
SQL> Rem     wfisher    11/04/98  - Add new privs to impexp roles
SQL> Rem     wesmith    11/02/98  - Fix view exu81rgsu
SQL> Rem     jingliu    10/30/98  - Support snapshot log export for 8.1
SQL> Rem     tlee       10/27/98  - get compress option for piot in exu81usci
SQL> Rem     wesmith    10/20/98  - Modify view exu81snap to nvl() flavor_id
SQL> Rem     wesmith    10/15/98  - Add support for export of RepAPI snapshots
SQL> Rem     tlee       10/13/98  - support adt attribute column on partition keys
SQL> Rem     avaradar   10/07/98  - get property value in exu8col
SQL> Rem     nvishnub   10/20/98  - Enumerate partitioned constraints indices.
SQL> Rem     tlee       10/02/98  - get subpart storage for transportable tablespace
SQL> Rem     avaradar   09/28/98  - compare intcol# in exu8spok, exu8poki, exu8pok
SQL> Rem     wfisher    09/08/98  - Specify default histograms if no histograms exis
SQL> Rem     avaradar   09/07/98  - Hidden column support for snapshots
SQL> Rem     lbarton    09/09/98  - Filter types owned by cartridges
SQL> Rem     tlee       09/01/98  - transportable tablespace with nested table
SQL> Rem     nvishnub   08/26/98  - Filter special schema objects.
SQL> Rem     tlee       08/25/98  - transportable tablespace with iot
SQL> Rem     tlee       08/25/98  - update defbufpool of default level
SQL> Rem     whuang     08/19/98  - fake index
SQL> Rem     nvishnub   08/05/98  - E/I of primary key refs.
SQL> Rem     nvishnub   07/29/98  - Filter datetime interval types.
SQL> Rem     nireland   07/28/98  - Correctly identify constraint indices. #686272
SQL> Rem     lbarton    08/04/98  - use new dbms_java names
SQL> Rem     tlee       07/22/98  - remove ts_type from exupds, update exu8lob
SQL> Rem     lbarton    07/13/98  - lrid downgrade support
SQL> Rem     nvishnub   07/13/98  - Add tablespace_type to storage info.
SQL> Rem     lbarton    06/19/98  - Java longname support
SQL> Rem     tlee       06/14/98  - lob and varray as lob partitioned obj support
SQL> Rem     tlee       06/10/98  - tspitr support of new partitioning
SQL> Rem     amsrivas   06/07/98  - Bug 536970
SQL> Rem     gclaborn   06/08/98  - Add system procedural object and action support
SQL> Rem     nvishnub   06/05/98  - Put back lob-index storage clause.
SQL> Rem     gclaborn   06/04/98  - Separate new export tables
SQL> Rem     asurpur    06/03/98  - Adding changes to exu8grs
SQL> Rem     asurpur    06/02/98  - Changing view exu8spv to not export some privile
SQL> Rem     gclaborn   06/02/98  - Update operator / indextype support
SQL> Rem     lbarton    05/26/98  - javasnm$ has changed
SQL> Rem     nvishnub   05/20/98  - Fix exu8ink to not to include 0 cols.
SQL> Rem     gclaborn   05/08/98  - Add views on exppkgs$ / expdep$: Subset exu8tab
SQL> Rem                            and exu8typ from 81 versions; no secondary obj.
SQL> Rem     tlee       05/07/98  - fix exu8pds and update tabcompart$ changes
SQL> Rem     dmwong     05/07/98  - require select_catalog_role for exu81rls
SQL> Rem     nvishnub   05/01/98  - Lob storage for varrays.
SQL> Rem     ayalaman   05/01/98  - Key compression : add preccnt to exu81ind
SQL> Rem     nvishnub   04/29/98  - Nested table enhancements.
SQL> Rem     hasun      04/28/98  - Exclude 8.1 snapshots from V8.0.X export
SQL> Rem     wfisher    04/27/98  - Adding support for flags
SQL> Rem     nvishnub   04/21/98  - Support for bitmapped tablespaces.
SQL> Rem     lbarton    04/16/98  - filter system events from pre8.1 triggers
SQL> Rem     wfisher    04/15/98  - Support Dimensions
SQL> Rem     dmwong     04/15/98  - add exu81rls for fine grain access control
SQL> Rem     smuthuli   04/13/98  - bug 487555.roll forward from 805
SQL> Rem     tlee       04/13/98  - rename comppart$->tabcompart$ add indcompart$
SQL> Rem     gclaborn   04/07/98  - Fetch implementation type details in exu81doi
SQL> Rem     dmwong     04/02/98  - add support for application context
SQL> Rem     ayalaman   03/27/98  - use 2 bytes of pctthres for guess quality
SQL> Rem     sparrokk   03/18/98  - 621964: EXECUTE ANY TYPE for exp/imp roles
SQL> Rem     nvishnub   03/13/98  - Fix view exu8iov to use bitand.
SQL> Rem     nvishnub   03/11/98  - E/I of partitioned IOTs.
SQL> Rem     wfisher    03/02/98  - Save raw analyze statistics at export
SQL> Rem     lbarton    02/23/98  - changes for java
SQL> Rem     vkarra     02/12/98  - single table cluster
SQL> Rem     tlee       02/09/98  - 81 partitioned object support
SQL> Rem     nireland   02/06/98  - SYS_NC_ROWINFO$ is 0x200 in sys.col$. #606078
SQL> Rem     nvishnub   12/17/97  - Support for datetime-interval datatypes.
SQL> Rem     cfreiwal   02/24/98  - key compression : add preccnt to exu8uscu
SQL> Rem     thoang     12/11/97  - Updated views to exclude unused columns
SQL> Rem     gclaborn   12/19/97  - Filter 2ndary objects, add oper/indextype sup.
SQL> Rem     wfisher    12/02/97  - Merge from wfisher_catexp804 in 8.0.4
SQL> Rem     gclaborn   12/02/97  - Add Functional / Domain Index support
SQL> Rem     wesmith    11/21/97  - Correct grant of snapshot view
SQL> Rem     wesmith    11/20/97  - add 8.1 views to support aggregate snapshots
SQL> Rem     mdepledg   10/08/97  - add spare1 to exu8tab
SQL> Rem     wfisher    09/19/97  - Bug 547977 -- support parallel for indexes
SQL> Rem     bmoy       09/16/97  - fix imp8repcat view.
SQL> Rem     wfisher    09/16/97  - Allow export of privs and role grants to public
SQL> Rem     wfisher    08/27/97  - fix exu8opt definition
SQL> Rem     wfisher    08/26/97  - Add exu8opt
SQL> Rem     bmoy       07/03/97  - Fix imp8repcat, add check for user#.
SQL> Rem     jpearson   06/20/97  - bug 498610 - view text and trigger action sizes
SQL> Rem     jstenois   06/12/97  - distributed security domains in export
SQL> Rem     wfisher    06/12/97  - Support trusted links
SQL> Rem     jstenois   06/06/97  - recover from V$OPTIONS changes
SQL> Rem     rsarwal    05/29/97  - Remove Echo
SQL> Rem     gdoherty   05/10/97  - remove blank lines that break sqlplus
SQL> Rem     bmoy       05/05/97  - Fix bug 454318.
SQL> Rem     jstenois   04/17/97  - support trigger with different owner than table
SQL> Rem     bmoy       03/27/97  - Replication support for Imp, added imp8repcat
SQL> Rem     jpearson   04/01/97  - fix index on nested_table_id col of inner table
SQL> Rem     jpearson   03/11/97  - partitioned cache support
SQL> Rem     wfisher    03/25/97  - adding exu8csn and exu8csnu (scalar nested table
SQL> Rem     jstenois   03/21/97  - get account status from user$
SQL> Rem     jpearson   02/13/97  - fix date specifications
SQL> Rem     gdoherty   01/30/97  - Get dataobj# in exu8lob for PITR
SQL> Rem     syeung     11/14/96  - Snapshot DDL: grant exu8glob to public
SQL> Rem     adowning   10/08/96  - fix snapshot views
SQL> Rem     syeung     08/29/96  - snapshot ddl
SQL> Rem     wfisher    11/08/96  - exu8tab(u) and exu8cset are used by import too
SQL> Rem     wfisher    10/31/96  - SYS_NC_SETID$ -> NESTED_TABLE_ID
SQL> Rem     jpearson   10/29/96  - bitmap indexes on inner nested tables
SQL> Rem     gdoherty   10/22/96  - add dobjid to exu8tbp and exu8ixp
SQL> Rem     jpearson   10/22/96  - export views in dependency order
SQL> Rem     syeung     10/07/96  - bug 374657: merge bitmap index fix from 7.3
SQL> Rem     syeung     10/03/96  - bump up EXPORT_VIEWS_VERSION for 8.0.2
SQL> Rem     syeung     09/25/96  - nchar support
SQL> Rem     echong     09/26/96  - modify exu8ink to handle ADTs
SQL> Rem     echong     09/17/96  - define exu8ink for iots
SQL> Rem     jpearson   09/17/96  - fix exu8tabi modified flag
SQL> Rem     jpearson   09/13/96  - fix exu8lob view
SQL> Rem     syeung     09/11/96  - password management
SQL> Rem     ixhu       07/31/96  - dataobj# and tabno for point-in-time recovery
SQL> Rem     jpearson   09/11/96  - modify ref scope handling
SQL> Rem     jpearson   08/30/96  - fix column comments on extent tables and views
SQL> Rem     jpearson   08/28/96  - fix cache flag in exu8tab and exu8clu
SQL> Rem     jpearson   08/21/96  - nested table column names
SQL> Rem     asurpur    07/31/96  - Granting *_catalog_roles to *_full_database
SQL> Rem     jpearson   08/19/96  - modify nested table support
SQL> Rem     wfisher    08/14/96  - LOB clauses on CREATE TABLE for attributes
SQL> Rem     jpearson   08/08/96  - support REF SCOPE
SQL> Rem     jpearson   08/06/96  - extent views fix for dropped types
SQL> Rem     syeung     07/19/96  - purified
SQL> Rem     jpearson   07/29/96  - handle INSTEAD OF triggers
SQL> Rem     jpearson   07/24/96  - simplify incremental export
SQL> Rem     jpearson   07/11/96  - fix merge errors
SQL> Rem     syeung     07/01/96  - system generated name changed
SQL> Rem     jpearson   07/10/96  - add catalog roles
SQL> Rem     syeung     06/24/96  - clu.spare4->avgchn in exu8clu
SQL> Rem     syeung     06/19/96  - fix snapshot views
SQL> Rem     echong     07/08/96  - define exu8iovu for iots
SQL> Rem     echong     06/24/96  - add iot comments
SQL> Rem     echong     06/17/96  - add defer to exu8con
SQL> Rem     jpearson   06/27/96  - support for librarys and execute any type priv
SQL> Rem     wfisher    06/25/96  - Don't get lob descriptions for lob attributes
SQL> Rem     jpearson   06/14/96  - change views for indices to support objects
SQL> Rem     jpearson   06/13/96  - support constraints on adt columns
SQL> Rem     wfisher    06/13/96  - Add SYS_NC_ to system generated column names
SQL> Rem     jpearson   06/12/96  - fix type body audit information
SQL> Rem     jpearson   06/11/96  - support for objects in incremental export
SQL> Rem     jpearson   06/11/96  - fix type body views
SQL> Rem     jpearson   06/10/96  - add views for types, librarys and directory alia
SQL> Rem     wfisher    06/07/96  - Add in more object views
SQL> Rem     wfisher    06/06/96  - Adding object views
SQL> Rem     jpearson   06/05/96  - modify exugrn[u] for directorys
SQL> Rem     asurpur    05/29/96  - Removing select on private views from select_cat
SQL> Rem     wfisher    05/23/96  - Adding object support for columns
SQL> Rem     mmonajje   05/22/96  - Replace action col name with action#
SQL> Rem     wfisher    05/16/96  - Return property and type information for tables
SQL> Rem     echong     05/24/96  - Modify exu8tab to include iots
SQL> Rem     syeung     05/16/96  - fix merge problem
SQL> Rem     asurpur    05/15/96  - Dictionary Protection: Granting privileges
SQL> Rem     syeung     05/14/96  - modified for replication changes
SQL> Rem     ixhu       05/13/96  - export v7 tables, clusters, p'd tables in Beta1
SQL> Rem     ccchang    05/10/96  - add nologging support
SQL> Rem     ixhu       05/08/96  - support ts$ online$ and contents$ changes
SQL> Rem     asurpur    04/08/96  - Dictionary Protection Implementation
SQL> Rem     ajasuja    05/02/96  - merge OBJ to BIG
SQL> Rem     ixhu       04/11/96  - AQ support: new expact$ columns
SQL> Rem     syeung     04/24/96  - Add property to exu8uscu
SQL> Rem     syeung     04/12/96  - fix header conflict
SQL> Rem     ccchang    03/15/96  - Support for PTI
SQL> Rem     syeung     04/10/96  - change unique$ to property in exu8ind
SQL> Rem     ixhu       04/03/96  - increment export view version number for 8.0
SQL> Rem     ixhu       02/28/96  - tablespace point-in-time recovery: exu8tsn
SQL> Rem     syeung     02/28/96  - add support deferred constraints and
SQL> Rem                            temporary tables
SQL> Rem     ixhu       02/26/96  - fix exu8fil view
SQL> Rem     ixhu       02/24/96  - fix exu8clu tsno
SQL> Rem     atsukerm   02/09/96  - fix file$ references.
SQL> Rem     ixhu       01/16/96  - ind$ spare8 to type in exu8ind* for bitmap index
SQL> Rem     ixhu       01/03/96  - ts-rel DBA: exu8sto, exu8stou, exu8tne,
SQL> Rem                            exu8tab, exu8clu, exu8ind, exu8rsg, exu8uscu,
SQL> Rem     achaudhr   10/25/95  - PTI: fix parallel, cache
SQL> Rem                          - PTI: global replace {imp, exu}7* -> {imp, exu}8*
SQL> Rem     aho        11/13/95  - iot
SQL> Rem     achaudhr   10/25/95  - PTI: fix parallel, cache
SQL> Rem     achaudhr   08/22/95  - PTI: t$.modified -> t$.flags
SQL> Rem     gdoherty   08/31/95  - mergetrans fix_pti_merge_bugs
SQL> Rem     achaudhr   07/20/95  - PTI: t.modified -> t.flags
SQL> Rem     ccchang    10/10/95  - add bitmap to exu7ind view for bitmap index
SQL> Rem     ixhu       09/18/95  - bug 250819 - misspelt RECORD, referential
SQL> Rem     ixhu       09/11/95  - bug 110894 - add exu7ordu to speed up exu7vewu
SQL> Rem     bhimatsi   07/11/95  - merge changes from branch 1.37.720.2
SQL> Rem     ssamu      06/15/95  - change views on tab$
SQL> Rem     ixhu       05/25/95  - add content to exu7tbs
SQL> Rem     ixhu       05/15/95  - bug 274629 - export ts quota even for dropped ts
SQL> Rem     lcprice    05/08/95  - merge changes from branch 1.37.720.1
SQL> Rem     ixhu       04/18/95  - add imp7uec for unlimited extent compatibility
SQL> Rem     jcchou     04/17/95  - (258186) fix
SQL> Rem     ixhu       04/04/95  - temporary/permanent tablespace in exu7tbs
SQL> Rem     ixhu       03/09/95  - add segcol# in exu7col & exu7colu, exu7cset
SQL> Rem     lcprice    04/18/95  - Fix bug #267737 - default roles processing
SQL> Rem     vraghuna   08/19/94  - move views reqd by both imp and exp to the top
SQL> Rem     vraghuna   08/18/94  - move compatibility checks from sql.bsq
SQL> Rem     vraghuna   08/15/94  - bug 227714 - add exu7cpo
SQL> Rem     jloaiza    07/08/94  - bitand modified column
SQL> Rem     vraghuna   06/20/94  - add support for hash cluster functions
SQL> Rem     vraghuna   06/10/94  - bug 218372 - speed up exu7del
SQL> Rem     vraghuna   06/09/94  - bug 219654 - add NVLs for ||l and cache params
SQL> Rem     vraghuna   05/16/94  - bug 215597 - change exu7snaplu also
SQL> Rem     vraghuna   05/12/94  - bug 215597 - change exu7snapl to exclude slog
SQL> Rem     vraghuna   04/24/94  - bug 211989 - add create roles but not drop
SQL> Rem     ltung      03/02/94  - merge changes from branch 1.15.710.1
SQL> Rem     vraghuna   02/09/94  - add exu7ver for version control
SQL> Rem     vraghuna   02/02/94  - bug 190236 - add outer join to exu7ord in exu7ve
SQL> Rem     vraghuna   01/17/94  - bug 191751 - add support for deferred RPC/RepCat
SQL> Rem     vraghuna   01/12/94  - bug 191750 - add support for refresh groups
SQL> Rem     vraghuna   01/11/94  - bug 191749 - add support for job queues exu7jbq
SQL> Rem     vraghuna   01/11/94  - bug 193733 - use basename in incr trigger views
SQL> Rem     vraghuna   01/11/94  - bug 193732 - fix exu7del for trigs, pkg bodies
SQL> Rem     vraghuna   01/10/94  - bug 192781 - add basetable name for trigger view
SQL> Rem     vraghuna   12/30/93  - bug 192652 - change MM to MI for exu7spr
SQL> Rem     vraghuna   12/21/93  - bug 191879 - grants issued twice
SQL> Rem     vraghuna   12/06/93  - bug 186073 - add read only tablespaces
SQL> Rem     vraghuna   08/18/93  - bug 174029 - moving role creation to sql.bsq
SQL> Rem     vraghuna   07/07/93  - add support for updatable snapshots
SQL> Rem     vraghuna   06/17/93  - bug 166480 - add exu7erc for resource costs
SQL> Rem     vraghuna   06/17/93  - bug 168261 - imp_full_database needs insert priv
SQL> Rem     vraghuna   06/17/93  - bug 166482 - export role passwords
SQL> Rem     vraghuna   05/27/93  - bug 166484 - add audt to exu7spr
SQL> Rem     ltung      05/16/93  - export parallel/cache parameters
SQL> Rem     vraghuna   03/15/93  - bug 140485 - incrementals on tables with constra
SQL> Rem     vraghuna   03/12/93  - bug 152906 - add tspname to exu7uscu
SQL> Rem     vraghuna   01/27/93  - bug 146283 - add exu7usc
SQL> Rem     vraghuna   12/18/92  - bug 143375 - break up exu7col
SQL> Rem     vraghuna   12/02/92  - bug 139302 - speed up exu7colnn
SQL> Rem     tpystyne   11/07/92  - use create or replace view
SQL> Rem     vraghuna   10/28/92  - bug 130560 - add exu7ful
SQL> Rem     vraghuna   10/23/92  - bug 135594 - remove exu7inv and exu7invu
SQL> Rem     glumpkin   10/20/92  - Renamed from EXPVEW.SQL
SQL> Rem     vraghuna   10/14/92  - bug 131957 - add field to exu7sto and exu7stou
SQL> Rem     vraghuna   07/14/92  - bug 115048 - support for analyze statement
SQL> Rem     cheigham   06/24/92  - add exu7colnn view
SQL> Rem     cheigham   06/22/92  - fix cdef$, col$ joins to accommodate changes for
SQL> Rem     jbellemo   06/12/92  - add mapping for MLSLABEL
SQL> Rem     vraghuna   06/03/92  - bug 39511 - add exu7grs
SQL> Rem     cheigham   05/27/92  - speed up exu7vew
SQL> Rem     cheigham   02/13/92  - add select any to imp_full_database
SQL> Rem     cheigham   02/13/92  - grant alter any table to imp_full_database
SQL> Rem     cheigham   01/29/92  - export altered clusters in inc. exports
SQL> Rem     cheigham   01/09/92  - add more privs to imp_full_database
SQL> Rem     cheigham   11/15/91  - fix object codes
SQL> Rem     cheigham   11/06/91  - fix inc. trigger views
SQL> Rem     cheigham   11/02/91  - merge in hash changes
SQL> Rem     cheigham   10/11/91  - view names: exu -> exu7
SQL> Rem     cheigham   09/27/91  - add snapshot views
SQL> Rem     sksingh    09/30/91  - merge changes from branch 1.13.50.1
SQL> Rem     sksingh    09/23/91  - replace spare1, 2, 3 with match, refact, enabled
SQL> Rem     agupta     09/20/91  - add support for lists/groups storage params
SQL> Rem     agupta     08/16/91  - enable|disable constraints
SQL> Rem     agupta     07/30/91  - 7037 - views not created in dependency or
SQL> Rem     agupta     07/02/91  - timestamp syntax for procedures
SQL> Rem     agupta     06/21/91  - fix errors in exurlg
SQL> Rem     agupta     06/14/91  - user$ column name changes
SQL> Rem     agupta     05/31/91  - add userid to tablespace quota view
SQL> Rem     agupta     05/04/91  - fix unique constraints bug
SQL> Rem     agupta     04/16/91  - fix auditing views
SQL> Rem     jwijaya    04/12/91  - remove LINKNAME IS NULL
SQL> Rem     rkooi      04/01/91  - add 'o.linkname IS NULL' clause
SQL> Rem     Gupta      02/26/90  - Lots of modifications for V7
SQL> Rem     Hong       10/31/88  - don't export quotas of 0
SQL> Rem     Hong       09/21/88  - allow null precision/scale
SQL> Rem     Hong       09/10/88  - fix outer joins
SQL> Rem     Hong       08/10/88  - get default/temp tablespace in exuusr
SQL> Rem     Hong       07/01/88  - get obj id in some views
SQL> Rem     Hong       06/10/88  - remove userid != 0 from views
SQL> Rem     Hong       04/28/88  - comment$ moved to com$
SQL> Rem     Hong       03/24/88  - add audit field to exu7seq
SQL> Rem     Hong       03/07/88  - deal with initrans, maxtrans
SQL> Rem                            add views for constraints, sequence #
SQL> Rem     Hong       02/01/88  - add exuico and exuicou
SQL> Rem                            temporary commented out col$.default$
SQL> Rem     Hong       02/01/88  - fix exufil to use v$dbfile directly
SQL> Rem     Hong       12/12/87  - fix exutbs
SQL> Rem     Hong       12/07/87  - handle min extents
SQL> Rem
SQL> 
SQL> WHENEVER SQLERROR EXIT;
SQL> DOC
DOC>######################################################################
DOC>######################################################################
DOC>    The following PL/SQL block will cause an ORA-20000 error and
DOC>    terminate the current SQLPLUS session if the user is not SYS.
DOC>    Disconnect and reconnect with AS SYSDBA.
DOC>######################################################################
DOC>######################################################################
DOC>#
SQL> 
SQL> DECLARE
  2    p_user VARCHAR2(30);
  3  BEGIN
  4      SELECT USER INTO p_user FROM DUAL;
  5      IF p_user != 'SYS' THEN
  6          RAISE_APPLICATION_ERROR (-20000,
  7             'This script must be run AS SYSDBA');
  8      END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> WHENEVER SQLERROR CONTINUE;
SQL> 
SQL> REM
SQL> REM This role allows the grantee to perform full database exports including
SQL> REM incremental exports
SQL> REM
SQL> REM Expect ORA-1921 for CREATE ROLE exp_full_database if this file is run
SQL> REM as part of the migration script and the role existed in the previous
SQL> REM release. Dropping will require DBA to regrant the role.
SQL> REM
SQL> CREATE ROLE exp_full_database;
CREATE ROLE exp_full_database
            *
ERROR at line 1:
ORA-01921: role name 'EXP_FULL_DATABASE' conflicts with another user or role name


SQL> GRANT SELECT ANY TABLE TO exp_full_database;

Grant succeeded.

SQL> GRANT BACKUP ANY TABLE TO exp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE ANY PROCEDURE TO exp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE ANY TYPE TO exp_full_database;

Grant succeeded.

SQL> GRANT SELECT ANY SEQUENCE to exp_full_database;

Grant succeeded.

SQL> GRANT RESUMABLE to exp_full_database;

Grant succeeded.

SQL> GRANT INSERT, UPDATE, DELETE ON sys.incexp TO exp_full_database;

Grant succeeded.

SQL> GRANT INSERT, UPDATE, DELETE ON sys.incvid TO exp_full_database;

Grant succeeded.

SQL> GRANT INSERT, UPDATE, DELETE ON sys.incfil TO exp_full_database;

Grant succeeded.

SQL> GRANT ADMINISTER SQL MANAGEMENT OBJECT TO exp_full_database;

Grant succeeded.

SQL> GRANT exp_full_database TO DBA;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM This role allows the grantee to perform full database imports
SQL> REM
SQL> REM Expect ORA-1921 for CREATE ROLE imp_full_database if this file is run
SQL> REM as part of the migration script and the role existed in the previous
SQL> REM release. Dropping will require DBA to regrant the role.
SQL> REM
SQL> CREATE ROLE imp_full_database;
CREATE ROLE imp_full_database
            *
ERROR at line 1:
ORA-01921: role name 'IMP_FULL_DATABASE' conflicts with another user or role name


SQL> GRANT BECOME USER TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY CLUSTER TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY INDEX TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY PROCEDURE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY SEQUENCE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY SNAPSHOT TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY SYNONYM TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY TRIGGER TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY VIEW TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE PROFILE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE PUBLIC DATABASE LINK TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE DATABASE LINK TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE PUBLIC SYNONYM TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ROLLBACK SEGMENT TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ROLE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE TABLESPACE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE USER TO imp_full_database;

Grant succeeded.

SQL> GRANT AUDIT ANY TO imp_full_database;

Grant succeeded.

SQL> GRANT COMMENT ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT ALTER ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT SELECT ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE ANY PROCEDURE TO imp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE ANY TYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT INSERT ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT UPDATE ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY DIRECTORY TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY TYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY LIBRARY TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY CONTEXT TO imp_full_database;

Grant succeeded.

SQL> GRANT ADMINISTER DATABASE TRIGGER TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY OPERATOR TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY INDEXTYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY DIMENSION TO imp_full_database;

Grant succeeded.

SQL> GRANT GLOBAL QUERY REWRITE TO imp_full_database;

Grant succeeded.

SQL> GRANT CREATE ANY SQL PROFILE TO imp_full_database;

Grant succeeded.

SQL> GRANT ADMINISTER SQL MANAGEMENT OBJECT TO imp_full_database;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Privileges needed to execute PL/SQL blocks
SQL> REM
SQL> REM NOTE:  privileges that need to be granted via packages (e.g.,
SQL> REM        MANAGE_ANY_QUEUE) will be granted in the relevant package (e.g.,
SQL> REM        catqueue.sql) rather than here.  These privileges are identified in
SQL> REM        the SYSTEM_PRIVILEGE_MAP with PROPERTY!= 0
SQL> REM
SQL> GRANT DROP ANY OUTLINE TO imp_full_database;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Granting the roles access views/packages from the dictionary;
SQL> REM
SQL> GRANT SELECT_CATALOG_ROLE TO exp_full_database;

Grant succeeded.

SQL> GRANT SELECT_CATALOG_ROLE TO imp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE_CATALOG_ROLE TO imp_full_database;

Grant succeeded.

SQL> GRANT EXECUTE_CATALOG_ROLE TO exp_full_database;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For import of incremental export files
SQL> REM
SQL> GRANT DROP ANY CLUSTER TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY INDEX TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY TABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY PROCEDURE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY SEQUENCE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY SNAPSHOT TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY SYNONYM TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY TRIGGER TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY VIEW TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP PROFILE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP PUBLIC DATABASE LINK TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP PUBLIC SYNONYM TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ROLLBACK SEGMENT TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY ROLE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP TABLESPACE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP USER TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY DIRECTORY TO imp_full_database;

Grant succeeded.

SQL> GRANT ALTER ANY TYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY TYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY LIBRARY TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY CONTEXT TO imp_full_database;

Grant succeeded.

SQL> GRANT ALTER ANY PROCEDURE TO  imp_full_database;

Grant succeeded.

SQL> GRANT ALTER ANY TRIGGER TO  imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY OPERATOR TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY INDEXTYPE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY DIMENSION TO imp_full_database;

Grant succeeded.

SQL> GRANT ANALYZE ANY TO imp_full_database;

Grant succeeded.

SQL> GRANT RESUMABLE TO imp_full_database;

Grant succeeded.

SQL> GRANT DROP ANY SQL PROFILE TO imp_full_database;

Grant succeeded.

SQL> 
SQL> GRANT imp_full_database TO DBA;

Grant succeeded.

SQL> 
SQL> REM **********  I M P O R T A N T  **********  I M P O R T A N T  **********
SQL> REM This first view selects all rows from sys.obj$ that are NOT secondary
SQL> REM objects as created by Domain Indexes. Secondary objects are not normally
SQL> REM exported because the domain index's CREATE INDEX at import time will create
SQL> REM them. However, when doing domain index 'fast rebuild' we do place certain
SQL> REM classes of secondary objects (tables & their types, indexes) in the
SQL> REM export file.
SQL> REM
SQL> REM exu81obj should be used as a substitute for obj$ in all top level views
SQL> REM of object classes whose secondary objects will NEVER be exported; i.e, are
SQL> REM not exported during DI 'fast rebuild'.  Those object classes that can be
SQL> REM exp. in DI fast rebuild (tables/indexes) should continue to use obj$ and
SQL> REM filtering (or not) of 2ndary objects will be done at run time via a bind
SQL> REM var. on the WHERE clauses of the appropriate SELECT statements in exuiss.c.
SQL> REM
SQL> REM When and if Pt. In Time Recovery ever supports domain indexes, it will have
SQL> REM to allow export of secondary objects because these comprise the storage for
SQL> REM the index. At that time, all object classes that PITR exports will have to
SQL> REM switch from using exu81obj (static filtering) back to obj$ and dynamically
SQL> REM filter off secondary objects as appropriate.
SQL> REM **********  I M P O R T A N T  **********  I M P O R T A N T  **********
SQL> 
SQL> CREATE OR REPLACE VIEW exu81obj AS
  2          SELECT  o$.*
  3          FROM    sys.obj$ o$, sys.user$ u$
  4          WHERE   BITAND(o$.flags, 16) != 16 AND
  5                  /* Ignore recycle bin objects */
  6                  BITAND(o$.flags, 128) != 128 AND
  7                  o$.owner# = u$.user# AND
  8                  u$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
  9                                  'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
 10                                  'DIP', 'DBSNMP', 'EXFSYS', 'WMSYS','ORACLE_OCM',
 11                                  'ANONYMOUS', 'XS$NULL')
 12  /

View created.

SQL> GRANT SELECT ON sys.exu81obj TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get SQL Version information -- this version needs to be hardcoded as 8.1.6
SQL> REM when new versions of sql are generated.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816maxsqv (
  2                  version#, sql_version) AS
  3          SELECT  sv.version#, sv.sql_version
  4          FROM    sys.sql_version$ sv
  5          WHERE   sv.version# = (
  6                      SELECT  MAX(sv2.version#)
  7                      FROM    sys.sql_version$ sv2)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu816maxsqv TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM The following helper view identifies interesting older sql versions in
SQL> REM the database. Only sql versions other than the database sql version are
SQL> REM identified.  Versions later than the export view's version are down-graded
SQL> REM to the version of the export views being used.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816sqv AS
  2          SELECT  sv.*
  3          FROM    sys.sql_version$ sv
  4          WHERE   sv.version# < (
  5                      SELECT  m.version#
  6                      FROM    sys.exu816maxsqv m)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu816sqv TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM ***************************************************
SQL> REM Section 1: Views required by BOTH export and import
SQL> REM ***************************************************
SQL> REM
SQL> 
SQL> REM
SQL> REM 'Database' (SYSTEM tablespace) block size - used only in pre 9.0 Exports
SQL> REM for db blocksize and Imports that need to support V5 CREATE/ALTER SPACE
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8bsz (
  2                  blocksize) AS
  3          SELECT  ts$.blocksize
  4          FROM    sys.ts$ ts$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8bsz TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all users
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8usr (
  2                  name, userid, passwd, defrole, datats, tempts, profile#,
  3                  profname, astatus, ext_username) AS
  4          SELECT  u.name, u.user#, DECODE(u.password, 'N', '', u.password),
  5                  DECODE(u.defrole, 0, 'N', 1, 'A', 2, 'L', 3, 'E', 'X'),
  6                  ts1.name, DECODE(BITAND(ts2.flags,2048),2048,'SYSTEM',ts2.name),
  7                  u.resource$, p.name, u.astatus,
  8                  u.ext_username
  9          FROM    sys.user$ u, sys.ts$ ts1, sys.ts$ ts2, sys.profname$ p
 10          WHERE   u.datats# = ts1.ts# AND
 11                  u.tempts# = ts2.ts# AND
 12                  u.type# = 1 AND
 13                  u.resource$ = p.profile# AND
 14                  u.name NOT IN ( 'ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 15                                  'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
 16                                  'DIP',  'DBSNMP', 'EXFSYS', 'WMSYS',
 17                                  'ORACLE_OCM', 'ANONYMOUS', 'XS$NULL')
 18  /

View created.

SQL> GRANT SELECT ON sys.exu8usr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8usru AS
  2          SELECT  *
  3          FROM    sys.exu8usr
  4          WHERE   userid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8usru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM check if user has priv to do a full db export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ful(
  2                  role) AS
  3          SELECT  u.name
  4          FROM    sys.x$kzsro, sys.user$ u
  5          WHERE   kzsrorol != UID AND
  6                  kzsrorol != 1 AND
  7                  u.user# = kzsrorol
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8ful TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM ---------------------------------------------------------------------
> REM                        General and User Table Views
SQL> REM ---------------------------------------------------------------------
> REM
SQL> REM  Notes:
SQL> REM      The 'latest' release view will return all supportable
SQL> REM      tables while views used by prior releases should exclude
SQL> REM      (if at all possible) tables which contain items
SQL> REM      (such as data types) that are not supported on the specific
SQL> REM      version's platform.
SQL> REM
SQL> REM ---------------------------------------------------------------------
> 
SQL> REM
SQL> REM V10.0 Table view
SQL> REM
SQL> REM Notes:
SQL> REM    Includes tables with columns we don't deal with so we can
SQL> REM    produce a better error to the 10i user.
SQL> REM
SQL> REM  xdbool added for 10i and out-of-line ordering
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10tabs (
  2                  objid, dobjid, name, owner, ownerid, tablespace, tsno, fileno,
  3                  blockno, audit$, comment$, clusterflag, mtime, modified, tabno,
  4                  pctfree$, pctused$, initrans, maxtrans, degree, instances,
  5                  cache, tempflags, property, deflog, tsdeflog, roid, recpblk,
  6                  secondaryobj, rowcnt, blkcnt, avgrlen, tflags, trigflag,
  7                  objstatus, xdbool)
  8        AS                                                      /* Heap tables */
  9          SELECT
 10                  o$.obj#, o$.dataobj#, o$.name, u$.name, o$.owner#, ts$.name,
 11                  t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
 12                  NVL(t$.bobj#, 0), o$.mtime,
 13                  DECODE(BITAND(t$.flags, 1), 1, 1, 0), NVL(t$.tab#, 0),
 14                  MOD(t$.pctfree$, 100), t$.pctused$, t$.initrans, t$.maxtrans,
 15                  NVL(t$.degree, 1), NVL(t$.instances, 1),
 16                  DECODE(BITAND(t$.flags, 8), 8, 1, 0),
 17                  MOD(TRUNC(o$.flags / 2), 2), t$.property,
 18                  DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
 19                  t$.spare1, DECODE(BITAND(o$.flags, 16), 16, 1, 0),
 20                  NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
 21                  t$.flags, t$.trigflag, o$.status,
 22                  (SELECT COUNT(*)
 23                      FROM sys.opqtype$ opq$
 24                      WHERE opq$.obj# = o$.obj# AND
 25                            BITAND(opq$.flags, 32) = 32 )
 26          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
 27                  sys.com$ c$
 28          WHERE   t$.obj# = o$.obj# AND
 29                  t$.ts# = ts$.ts# AND
 30                  u$.user# = o$.owner# AND
 31                  o$.obj# = c$.obj#(+) AND
 32                  c$.col#(+) IS NULL AND
 33                  BITAND(o$.flags,128) != 128 AND      /* Skip recycle bin */
 34                  BITAND(t$.property, 64+512) = 0 AND /*skip IOT and ovflw segs*/
 35                  BITAND(t$.flags, 536870912) = 0    /* skip IOT mapping table */
 36        UNION ALL                                         /* Index-only tables */
 37          SELECT  o$.obj#, o$.dataobj#, o$.name, u$.name, o$.owner#, ts$.name,
 38                  i$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
 39                  NVL(t$.bobj#, 0), o$.mtime,
 40                  DECODE(BITAND(t$.flags, 1), 1, 1, 0),
 41                  NVL(t$.tab#, 0), 0, 0, 0, 0,
 42                  NVL(t$.degree, 1), NVL(t$.instances, 1),
 43                  DECODE(BITAND(t$.flags, 8), 8, 1, 0),
 44                  MOD(TRUNC(o$.flags / 2), 2), t$.property,
 45                  DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
 46                  t$.spare1, DECODE(BITAND(o$.flags, 16), 16, 1, 0),
 47                  NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
 48                  t$.flags, t$.trigflag, o$.status,
 49                  (SELECT COUNT(*)
 50                      FROM sys.opqtype$ opq$
 51                      WHERE opq$.obj# = o$.obj# AND
 52                            BITAND(opq$.flags, 32) = 32 )
 53          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
 54                  sys.com$ c$, sys.ind$ i$
 55          WHERE   t$.obj# = o$.obj# AND
 56                  u$.user# = o$.owner# AND
 57                  o$.obj# = c$.obj#(+) AND
 58                  c$.col#(+) IS NULL AND
 59                  BITAND(o$.flags,128) != 128 AND      /* Skip recycle bin */
 60                  BITAND(t$.property, 64+512) = 64 AND /* IOT, but not overflow*/
 61                  t$.pctused$ = i$.obj# AND/* For IOTs, pctused has index obj# */
 62                  i$.ts# = ts$.ts#
 63  /

View created.

SQL> GRANT SELECT ON sys.exu10tabs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V10.0 Table views
SQL> REM
SQL> 
SQL> REM
SQL> REM V10.0 current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10tabsu AS
  2          SELECT  *
  3          FROM    sys.exu10tabs
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10tabsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu10tab
SQL> REM
SQL> REM Notes: filtered for secondaryobjs from above
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10tab AS
  2          SELECT  *
  3          FROM    sys.exu10tabs t$
  4          WHERE   t$.secondaryobj = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10tab TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10tabu AS
  2          SELECT  *
  3          FROM    sys.exu10tab
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10tabu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM End V10.0 Table views
SQL> REM
SQL> 
SQL> REM
SQL> REM V9.0 Table views
SQL> REM
SQL> REM Notes:
SQL> REM    Exclude tables with:
SQL> REM        columns of type BINARY_FLOAT (100) or BINARY_DOUBLE (101)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabs AS
  2          SELECT  *
  3          FROM    sys.exu10tabs
  4          WHERE  NOT EXISTS (
  5                     SELECT *
  6                     FROM   sys.col$ c$
  7                     WHERE  (c$.obj# = objid AND
  8                             (c$.type# = 100 OR
  9                             c$.type# = 101 )))
 10  /

View created.

SQL> GRANT SELECT ON sys.exu9tabs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V9.0 current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabsu AS
  2          SELECT  *
  3          FROM    sys.exu9tabs
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9tabsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu9tab
SQL> REM
SQL> REM Notes: filtered for secondaryobjs from above
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tab AS
  2          SELECT  *
  3          FROM    sys.exu9tabs t$
  4          WHERE   t$.secondaryobj = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9tab TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabu AS
  2          SELECT  *
  3          FROM    sys.exu9tab
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9tabu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM List of all tables with unused columns - taken directly from
SQL> REM catalog.sql's all_unused_col_tabs
SQL> REM Notes:
SQL> REM    Modifications to this view to filter out specific new datatypes
SQL> REM    are not required.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tab_unused_cols (
  2                  OBJID ) AS
  3          SELECT  o.obj#
  4          FROM    sys.user$ u, sys.obj$ o, sys.col$ c
  5          WHERE   o.owner# = u.user#
  6             AND  o.obj# = c.obj#
  7             AND BITAND(c.property,32768) = 32768            -- is unused column
  8             AND BITAND(c.property, 1) != 1              -- not ADT attribute col
  9             AND BITAND(c.property, 1024) != 1024         -- not NTAB's setid col
 10             AND (o.owner# = userenv('SCHEMAID')
 11                  OR o.obj# IN
 12                     (SELECT oa.obj#
 13                       FROM sys.objauth$ oa
 14                       WHERE grantee# IN ( select kzsrorol
 15                                   FROM x$kzsro
 16                                 )
 17                      )
 18                  OR EXISTS (SELECT NULL FROM v$enabledprivs
 19                              WHERE priv_number IN (-45 /* LOCK ANY TABLE */,
 20                                                    -47 /* SELECT ANY TABLE */,
 21                                                    -48 /* INSERT ANY TABLE */,
 22                                                    -49 /* UPDATE ANY TABLE */,
 23                                                    -50 /* DELETE ANY TABLE */)
 24                            )
 25                  )
 26  /

View created.

SQL> GRANT SELECT ON sys.exu9tab_unused_cols to PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V8.1 table views
SQL> REM
SQL> REM Notes: - exu81tabs is subseted off exu9tabs to filter out tables with
SQL> REM          non-null values in trigflag<30:5>
SQL> REM        - tempflags is now deprecated
SQL> REM
SQL> REM 2654811 row_movement_enabled (2097152) flag added in 9.2
SQL> REM          2097152 + 31 = 2097183
SQL> CREATE OR REPLACE VIEW exu81tabs AS
  2          SELECT  *
  3          FROM    sys.exu9tabs
  4          WHERE   BITAND(trigflag, 2097183) = trigflag
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tabsu AS
  2          SELECT  *
  3          FROM    sys.exu81tabs
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu81tab
SQL> REM
SQL> REM Notes: filtered for secondaryobjs from above
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tab AS
  2          SELECT  *
  3          FROM    sys.exu81tabs
  4          WHERE   secondaryobj = 0 AND
  5                  ( NOT EXISTS (
  6                           SELECT  *
  7                           FROM    sys.col$ c$, sys.coltype$ ct$, sys.type$ t$
  8                           WHERE   c$.obj# = objid AND
  9                                   ct$.toid = t$.toid AND
 10                                   c$.obj# = ct$.obj# AND
 11                                   c$.col# = ct$.col# AND
 12                                   ((BITAND(t$.PROPERTIES, 8) = 8) OR
 13                                   (BITAND(t$.PROPERTIES, 8192) = 8192))))
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81tab TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tabu AS
  2          SELECT  *
  3          FROM    sys.exu81tab
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V8.0 table view
SQL> REM
SQL> REM Notes: exu8tab is subseted off exu81tab to filter out tables with:
SQL> REM        columns of type UROWID (208)
SQL> REM        datetime interval types : (178 <= type <= 183)
SQL> REM        varying width character LOBs :
SQL> REM        - (type = 112 & ((800 < charsetid < 1000) or (charsetid > 2000)))
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tab AS
  2          SELECT  *
  3          FROM    sys.exu81tab
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.col$ c$
  7                      WHERE   c$.obj# = objid AND
  8                              (c$.type# = 208 OR
  9                               (c$.type# >= 178 AND
 10                                c$.type# <= 183) OR
 11                               (c$.type# = 112 AND
 12                                ((c$.charsetid > 800 AND
 13                                  c$.charsetid < 1000) OR
 14                                 c$.charsetid > 2000))))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu8tab TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V8.0 User's tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tabu AS
  2          SELECT  *
  3          FROM    sys.exu8tab
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8tabu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Database Character Set and NCHAR Character Set
SQL> REM
SQL> REM Notes: For import and old versions of export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cset (
  2                  name, value) AS
  3          SELECT  name, DECODE (value$,'AL16UTF16','UTF8', value$)
  4          FROM    sys.props$
  5          WHERE   name IN ('NLS_CHARACTERSET',
  6                           'NLS_NCHAR_CHARACTERSET')
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8cset TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Database NLS settings
SQL> REM
SQL> REM Notes: for current version of export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9nls (
  2                  name, value) AS
  3          SELECT  name, value$
  4          FROM    sys.props$
  5          WHERE   name IN ('NLS_CHARACTERSET',
  6                           'NLS_NCHAR_CHARACTERSET',
  7                           'NLS_LENGTH_SEMANTICS')
  8  /

View created.

SQL> GRANT SELECT ON sys.exu9nls TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Check for Database Options
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8opt (
  2                  parameter, value) AS
  3          SELECT  parameter, DECODE(value, 'TRUE', 1, 'FALSE', 0, 2)
  4          FROM    sys.v$option
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8opt TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM ****************************************
SQL> REM Section 2: Views required by import ONLY
SQL> REM ****************************************
SQL> REM
SQL> 
SQL> REM
SQL> REM build replication procedures view
SQL> REM
SQL> CREATE OR REPLACE VIEW imp8repcat (
  2                  name, type) AS
  3          SELECT  name, type#
  4          FROM    sys.obj$
  5          WHERE   name IN ('DBMS_SNAPSHOT_UTL', 'DBMS_REPCAT_MIG') AND
  6                  type# = 11 AND
  7                  owner# = 0
  8  /

View created.

SQL> GRANT SELECT ON sys.imp8repcat TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Unlimited Extent Compatibility Information
SQL> REM
SQL> REM 8.0.6 import references this view which never returned any rows
SQL> REM so WHERE 1=0 will make sure that continues.
SQL> REM
SQL> CREATE OR REPLACE VIEW imp8uec (
  2                  release) AS
  3          SELECT  *
  4          FROM    DUAL
  5          WHERE   1=0
  6  /

View created.

SQL> GRANT SELECT ON sys.imp8uec TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain the TOID of an existing type
SQL> REM
SQL> CREATE OR REPLACE VIEW imp8ttd (
  2                  tname, towner, toid) AS
  3          SELECT  o$.name, u$.name, o$.oid$
  4          FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
  5          WHERE   o$.type# = 13 AND
  6                  o$.owner# = u$.user# AND
  7                  o$.oid$   = t$.toid  AND
  8                  t$.toid   = t$.tvoid                          /* Only latest */
  9  /

View created.

SQL> GRANT SELECT ON sys.imp8ttd TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp8ttdu (
  2                  tname, towner, toid) AS
  3          SELECT  o$.name, u$.name, o$.oid$
  4          FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
  5          WHERE   o$.type# = 13 AND
  6                  o$.owner# = u$.user# AND
  7                  o$.oid$   = t$.toid  AND
  8                  t$.toid  = t$.tvoid AND                  /* Only the latest */
  9                  (o$.owner# = UID OR                 /* owned by current user */
 10                  /* current user or public role have execute access to type */
 11                   o$.obj# IN (
 12                      SELECT  oa.obj#
 13                      FROM    sys.objauth$ oa
 14                      WHERE   oa.obj# = o$.obj# AND
 15                              oa.privilege# = 12 AND                /* execute */
 16                              oa.grantee# IN (UID, 1)) OR
 17                   /* current user or public role can execute any type */
 18                   EXISTS (
 19                      SELECT  NULL
 20                      FROM    sys.sysauth$ sa
 21                      WHERE   sa.grantee# IN (UID, 1) AND
 22                              sa.privilege# = -184))
 23  /

View created.

SQL> GRANT SELECT ON sys.imp8ttdu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp8cdt (
  2                  ownerid, bad) AS
  3          SELECT  co$.owner#, DECODE(BITAND(c$.defer, 16), 16, 1, 0)
  4          FROM    sys.cdef$ c$, sys.con$ co$
  5          WHERE   c$.defer IS NOT NULL AND
  6                  BITAND(c$.defer, 16) = 16 AND
  7                  c$.con# = co$.con#
  8  /

View created.

SQL> GRANT SELECT ON sys.imp8cdt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp8cdtu  AS
  2          SELECT  *
  3          FROM    sys.imp8cdt
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.imp8cdtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp8con (
  2                  ctname, tbname, username, intcol) AS
  3          SELECT  c.name, o.name, u.name, cc.intcol#
  4          FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.ccol$ cc,
  5                  sys.cdef$ cd
  6          WHERE   o.obj# = cc.obj# AND
  7                  c.con# = cc.con# AND
  8                  o.obj# = cd.obj# AND
  9                  u.user# = c.owner# AND
 10                  cd.con# = c.con# AND
 11                  cd.type# = 3 AND
 12                  BITAND(cd.defer, 8) = 8
 13  /

View created.

SQL> GRANT SELECT ON sys.imp8con TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW imp9con (
  2                  ctname, tbname, username, intcol, type) AS
  3          SELECT  c.name, o.name, u.name, cc.intcol#, cd.type#
  4          FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.ccol$ cc,
  5                  sys.cdef$ cd
  6          WHERE   o.obj# = cc.obj# AND
  7                  c.con# = cc.con# AND
  8                  o.obj# = cd.obj# AND
  9                  u.user# = c.owner# AND
 10                  cd.con# = c.con# AND
 11                  BITAND(cd.defer, 8) = 8
 12  /

View created.

SQL> GRANT SELECT ON sys.imp9con TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain the tvoid/hash of an existing type ("only latest" check is not
SQL> REM required here)
SQL> REM
SQL> CREATE OR REPLACE VIEW imp9tvoid (
  2                  tname, towner, hash, tvoid, status, typeid, roottoid) AS
  3          SELECT  o$.name, u$.name, t$.hashcode, t$.tvoid, o$.status, t$.typeid,
  4                  t$.roottoid
  5          FROM    sys.obj$ o$, sys.user$ u$, sys.type$ t$
  6          WHERE   o$.type# = 13 AND
  7                  o$.owner# = u$.user# AND
  8                  t$.toid   = o$.oid$ AND
  9                  t$.toid   = t$.tvoid AND                  /* only the latest */
 10                  (UID  IN (o$.owner#, 0) OR                /* System or owner */
 11                     EXISTS (                          /* user has select role */
 12                       SELECT  role
 13                       FROM    sys.session_roles
 14                       WHERE   role = 'SELECT_CATALOG_ROLE') OR
 15                    (o$.obj# IN                       /* user has execute priv */
 16                     (SELECT oa$.obj#
 17                      FROM   sys.objauth$ oa$
 18                      WHERE o$.obj# = oa$.obj# AND
 19                            oa$.grantee# IN  /* granted to current user/public */
 20                                  (SELECT kzsrorol from x$kzsro)  AND
 21                            privilege# = 12)))                 /* Execute priv */
 22  /

View created.

SQL> GRANT SELECT ON sys.imp9tvoid TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM all users for IMPORT
SQL> REM
SQL> CREATE OR REPLACE VIEW imp9usr (name, userid) AS
  2          SELECT  u.name, u.user#
  3          FROM    sys.user$ u
  4          WHERE   u.user# = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.imp9usr TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get compatible parameter of target database.
SQL> REM
SQL> CREATE OR REPLACE VIEW imp9compat (compatible) AS
  2          SELECT  value
  3          FROM    v$parameter
  4          WHERE   name = 'compatible'
  5  /

View created.

SQL> GRANT SELECT ON sys.imp9compat TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get SYNONYMs for TYPEs.
SQL> REM This view is used by import in order to verify that a pre-existing
SQL> REM object is a SYNonym for (4) a TYPe.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp9syn4 (
  2                  synname, synowner, typename, typeowner) AS
  3          SELECT  o.name, u.name, s.name, s.owner
  4          FROM    sys.obj$ o, sys.user$ u, sys.syn$ s
  5          WHERE   s.obj# = o.obj# AND
  6                  u.user# = o.owner# AND
  7                  /* user is sys, or owner, or synonym is PUBLIC */
  8                  (UID IN (o.owner#, 0) OR o.owner# = 1 OR
  9                     EXISTS (                         /* user has select role */
 10                       SELECT  role
 11                       FROM    sys.session_roles
 12                       WHERE   role = 'SELECT_CATALOG_ROLE')) AND
 13                  EXISTS (
 14                    SELECT ot.obj#
 15                    FROM sys.obj$ ot
 16                    WHERE ot.name = s.name AND
 17                          ot.type# = 13 AND
 18                          ot.owner# = (
 19                              SELECT ut.user#
 20                              FROM sys.user$ ut
 21                              WHERE ut.name = s.owner))
 22  /

View created.

SQL> GRANT SELECT ON sys.imp9syn4 TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get the CHUNK size and Endian for a LOB column.
SQL> REM This view is used to get the CHUNK size and Endian property bit of an
SQL> REM existing LOB column in a table
SQL> REM (table may have been pre-created or different than Export size).
SQL> REM
SQL> create or replace view sys.imp_lob_info
  2      (OWNER, TABLE_NAME, COLUMN_NAME, CHUNK, LITTLE_ENDIAN)
  3  as
  4  select u.name, o.name, c.name, l.chunk * ts.blocksize,
  5          DECODE(BITAND(l.property, 512), 512, 1, 0)
  6  from sys.obj$ o, sys.col$ c, sys.tab$ ta, sys.lob$ l, sys.user$ u, sys.ts$ ts
  7  where o.owner# = u.user#
  8    and o.obj# = c.obj#
  9    and c.obj# = l.obj#
 10    and c.intcol# = l.intcol#
 11    and l.ts# = ts.ts#(+)
 12    and (o.owner# = userenv('SCHEMAID')
 13         or o.obj# in
 14              (select oa.obj#
 15               from sys.objauth$ oa
 16               where grantee# in ( select kzsrorol
 17                                   from x$kzsro
 18                                 )
 19              )
 20         or exists (select null from v$enabledprivs
 21                    where priv_number in (-45 /* LOCK ANY TABLE */,
 22                                          -47 /* SELECT ANY TABLE */,
 23                                          -48 /* INSERT ANY TABLE */,
 24                                          -49 /* UPDATE ANY TABLE */,
 25                                          -50 /* DELETE ANY TABLE */)
 26                   )
 27        )
 28    and o.obj# = ta.obj#
 29    and bitand(ta.property, 32) != 32    /* not partitioned table */
 30  union all
 31  select u.name, o.name, c.name,
 32         plob.defchunk * NVL(ts1.blocksize, NVL(
 33          (select ts2.blocksize
 34          from   sys.ts$ ts2, sys.lobfrag$ lf
 35          where  l.lobj# = lf.parentobj# and
 36                 lf.ts# = ts2.ts# and rownum < 2),
 37          (select ts2.blocksize
 38          from   sys.ts$ ts2, sys.lobcomppart$ lcp, sys.lobfrag$ lf
 39          where  l.lobj# = lcp.lobj# and lcp.partobj# = lf.parentobj# and
 40                 lf.ts# = ts2.ts# and rownum < 2))),
 41          DECODE(BITAND(l.property, 512), 512, 1, 0)
 42  from sys.obj$ o, sys.col$ c, sys.partlob$ plob,
 43       sys.lob$ l, sys.ts$ ts1, sys.tab$ ta,
 44       sys.user$ u
 45  where o.owner# = u.user#
 46    and o.obj# = c.obj#
 47    and c.obj# = l.obj#
 48    and c.intcol# = l.intcol#
 49    and l.lobj# = plob.lobj#
 50    and plob.defts# = ts1.ts# (+)
 51    and bitand(c.property,32768) != 32768           /* not unused column */
 52    and (o.owner# = userenv('SCHEMAID')
 53         or o.obj# in
 54              (select oa.obj#
 55               from sys.objauth$ oa
 56               where grantee# in ( select kzsrorol
 57                                   from x$kzsro
 58                                 )
 59              )
 60         or exists (select null from v$enabledprivs
 61                    where priv_number in (-45 /* LOCK ANY TABLE */,
 62                                          -47 /* SELECT ANY TABLE */,
 63                                          -48 /* INSERT ANY TABLE */,
 64                                          -49 /* UPDATE ANY TABLE */,
 65                                          -50 /* DELETE ANY TABLE */)
 66                   )
 67        )
 68    and o.obj# = ta.obj#
 69    and bitand(ta.property, 32) = 32         /* partitioned table */
 70  /

View created.

SQL> GRANT SELECT ON sys.imp_lob_info TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM View to see if a TYPE is used by any table in the database.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp10typused
  2      (OWNER, NAME, OID$) AS
  3          SELECT u.name, o_tab.name, o_typ.oid$
  4          FROM   sys.obj$ o_tab, sys.user$ u, sys.obj$ o_typ, sys.dependency$ d
  5          WHERE d.p_obj# = o_typ.obj#
  6          AND d.d_obj# = o_tab.obj#
  7          AND o_tab.type# = 2
  8          AND o_tab.owner# = u.user#
  9  /

View created.

SQL> GRANT SELECT ON sys.imp10typused TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM View to see if a TYPEID is used by another type in a type hierarchy.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp10typidused
  2      (TYPEID, TOID, ROOTTOID) AS
  3          SELECT typeid, toid, roottoid
  4          FROM sys.type$
  5  /

View created.

SQL> GRANT SELECT ON sys.imp10typidused TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM View to see if a table has a BEFORE ROW trigger defined on it.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp_tab_trig
  2      (TNAME, OWNER, TYPE) AS
  3          SELECT o.name, u.name, o.type#
  4          FROM sys.trigger$ tr, sys.obj$ o, sys.user$ u
  5          WHERE tr.baseobject = o.obj#
  6          AND    u.user#      = o.owner#
  7          AND   tr.type#      = 1             /* BEFORE ROW */
  8          AND   tr.insert$    = 1             /* for INSERT */
  9          AND   tr.enabled    = 1
 10          AND    o.owner#     = UID
 11  /

View created.

SQL> GRANT SELECT ON sys.imp_tab_trig TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM View to see if any LOB columns for a table have NOT NULL constraints.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.imp_lob_notnull
  2      (TNAME, OWNER, TYPE, ISNULL) AS
  3          SELECT o.name, u.name, c.type#, c.null$
  4          FROM sys.col$ c, sys.obj$ o, sys.user$ u
  5          WHERE c.obj#   = o.obj#
  6          AND   u.user#  = o.owner#
  7          AND   o.owner# = UID
  8  /

View created.

SQL> GRANT SELECT ON sys.imp_lob_notnull TO PUBLIC;

Grant succeeded.

SQL> 
SQL> -------------------------
SQL> 
SQL> 
SQL> REM
SQL> REM ****************************************
SQL> REM Section 3: Views required by export ONLY
SQL> REM ****************************************
SQL> REM
SQL> 
SQL> REM
SQL> REM IOT overflow segments
SQL> REM
SQL> REM Note tempflags now deprecated
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8iov (
  2                  objid, dobjid, name, bobjid, owner, ownerid, tablespace, tsno,
  3                  fileno, blockno, audit$, comment$, clusterflag, mtime,
  4                  modified, pctfree$, pctused$, initrans, maxtrans, degree,
  5                  instances, cache, tempflags, property, deflog, tsdeflog) AS
  6          SELECT  o$.obj#, o$.dataobj#, o$.name, t$.bobj#, u$.name, o$.owner#,
  7                  ts$.name, t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
  8                  NVL(t$.bobj#, 0), o$.mtime,
  9                  DECODE(BITAND(t$.flags, 1), 1, 1, 0), MOD(t$.pctfree$, 100),
 10                  t$.pctused$, t$.initrans, t$.maxtrans, NVL(t$.degree, 1),
 11                  NVL(t$.instances, 1), DECODE(BITAND(t$.flags, 128), 128, 1, 0),
 12                  MOD(TRUNC(o$.flags / 2), 2), t$.property,
 13                  DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging
 14          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
 15                  sys.com$ c$
 16          WHERE   t$.obj# = o$.obj# AND
 17                  t$.ts# = ts$.ts# AND
 18                  u$.user# = o$.owner# AND
 19                  o$.obj# = c$.obj#(+) AND
 20                  c$.col#(+) IS NULL AND
 21                  BITAND(t$.property, 512) = 512
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8iov TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's overflow segments
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8iovu AS
  2          SELECT  *
  3          FROM    sys.exu8iov
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8iovu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM iot INCLUDING key columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ink (
  2                  objid, ownerid, intcolid, name) AS
  3          SELECT  o$.obj#, o$.owner#, c$.intcol#, c$.name
  4          FROM    sys.obj$ o$, sys.ind$ i$, sys.col$ c$
  5          WHERE   i$.bo# = o$.obj# AND
  6                  c$.obj# = o$.obj# AND
  7                  c$.col# = i$.trunccnt AND
  8                  i$.trunccnt != 0
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8ink TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's INCLUDING key columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8inku AS
  2          SELECT  *
  3          FROM    sys.exu8ink
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8inku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.0 tables for incremental export
SQL> REM
SQL> REM Notes: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabi AS
  2          SELECT  t.*
  3          FROM    sys.exu9tab t, sys.incexp i, sys.incvid v
  4          WHERE   t.name = i.name(+) AND
  5                  t.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 2) = 2 AND
  7                  BITAND(t.property, 8192) = 0 AND          /* not inner table */
  8                  (BITAND(t.modified, 1) = 1 OR
  9                   t.mtime > i.itime OR
 10                   NVL(i.expid, 9999) > v.expid OR
 11                   /* determine if it has inner tables that have been
 12                   ** changed since last incremental export */
 13                   (BITAND(t.property, 4) = 4 AND          /* has inner tables */
 14                    EXISTS (
 15                      SELECT  0
 16                      FROM    sys.obj$ o2, sys.tab$ t2
 17                      WHERE   o2.obj# = t2.obj# AND
 18                              BITAND(t2.property, 8192) = 8192 AND
 19                              (o2.mtime > i.itime OR
 20                               BITAND(t2.flags, 1) = 1) AND
 21                              o2.obj# IN (
 22                                  SELECT  nt.ntab#
 23                                  FROM    sys.ntab$ nt
 24                                  START WITH nt.obj# = t.objid
 25                                  CONNECT BY PRIOR nt.ntab# = nt.obj#))))
 26  /

View created.

SQL> GRANT SELECT ON sys.exu9tabi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.0 tables for cumulative export:
SQL> REM
SQL> REM Notes: modified, last export was inc, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tabc AS
  2          SELECT  t.*
  3          FROM    sys.exu9tab t, sys.incexp i, sys.incvid v
  4          WHERE   t.name = i.name(+) AND
  5                  t.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 2) = 2 AND
  7                  BITAND(t.property, 8192) = 0 AND          /* not inner table */
  8                  (BITAND(t.modified, 1) = 1 OR
  9                   i.itime > NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) OR
 10                   t.mtime > i.itime OR
 11                   NVL(i.expid, 9999) > v.expid OR
 12                   /* determine if it has inner tables that have been
 13                   ** changed since last incremental export */
 14                   (BITAND(t.property, 4) = 4 AND          /* has inner tables */
 15                    EXISTS (
 16                      SELECT  0
 17                      FROM    sys.obj$ o2, sys.tab$ t2
 18                      WHERE   o2.obj# = t2.obj# AND
 19                              BITAND(t2.property, 8192) = 8192 AND
 20                              (o2.mtime > i.itime OR
 21                               BITAND(t2.flags, 1) = 1) AND
 22                              o2.obj# IN (
 23                                  SELECT  nt.ntab#
 24                                  FROM    sys.ntab$ nt
 25                                  START WITH nt.obj# = t.objid
 26                                  CONNECT BY PRIOR nt.ntab# = nt.obj#))))
 27  /

View created.

SQL> GRANT SELECT ON sys.exu9tabc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.1 tables for incremental export
SQL> REM
SQL> REM Notes: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tabi AS
  2          SELECT  *
  3          FROM    sys.exu9tabi
  4          WHERE   BITAND(trigflag, 31) = trigflag
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.1 tables for cumulative export
SQL> REM
SQL> REM Notes: modified, last export was inc, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tabc AS
  2          SELECT  *
  3          FROM    sys.exu9tabc
  4          WHERE   BITAND(trigflag, 31) = trigflag
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tabc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 tables for incremental export
SQL> REM
SQL> REM Notes: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tabi AS
  2          SELECT  *
  3          FROM    sys.exu81tabi
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.col$ c$
  7                      WHERE   c$.obj# = objid AND
  8                              c$.type# = 208)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tabi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 tables for cumulative export:
SQL> REM
SQL> REM Notes: modified, last export was inc, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tabc AS
  2          SELECT  *
  3          FROM    sys.exu81tabc
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.col$ c$
  7                      WHERE   c$.obj# = objid AND
  8                              c$.type# = 208)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tabc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for all non-composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tbp (
  2                  objid, dobjid, bobjid, ownerid, pname, prowcnt, pblkcnt,
  3                  pavgrlen, pflags, partno, hiboundlen, hiboundval, tsname, tsno,
  4                  fileno, blockno, pctfree$, pctused$, initrans, maxtrans,
  5                  deflog, tsdeflog, blevel, leafcnt, distkey, lblkkey, dblkkey,
  6                  clufac, iflags) AS
  7          SELECT  o$.obj#, o$.dataobj#, tp$.bo#, o$.owner#, o$.subname,
  8                  NVL(tp$.rowcnt, -1), NVL(tp$.blkcnt, -1), NVL(tp$.avgrln, -1),
  9                  tp$.flags, tp$.part#, tp$.hiboundlen, tp$.hiboundval, ts$.name,
 10                  tp$.ts#, tp$.file#, tp$.block#, MOD(tp$.pctfree$, 100),
 11                  tp$.pctused$, tp$.initrans, tp$.maxtrans,
 12                  DECODE(BITAND(tp$.flags, 4), 4, 1, 0), ts$.dflogging, -1, -1,
 13                  -1, -1, -1, -1, -1
 14          FROM    sys.obj$ o$, sys.tabpart$ tp$, sys.ts$ ts$
 15          WHERE   o$.type# = 19 AND
 16                  tp$.obj# = o$.obj# AND
 17                  ts$.ts# = tp$.ts#
 18  /

View created.

SQL> GRANT SELECT ON sys.exu8tbp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for current user's non_composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tbpu AS
  2          SELECT  *
  3          FROM    sys.exu8tbp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8tbpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartition description for all composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbsp (
  2                  objid, dobjid, pobjid, ownerid, subpartno, subpname, tsname,
  3                  fileno, blockno, tsno, prowcnt, pblkcnt, pavgrlen, blevel,
  4                  leafcnt, distkey, lblkkey, dblkkey, clufac, hiboundlen,
  5                  hiboundval, dummyflag) AS
  6          SELECT  o.obj#, o.dataobj#, sp.pobj#, o.owner#, sp.subpart#, o.subname,
  7                  ts.name, sp.file#, sp.block#, sp.ts#, NVL(sp.rowcnt, -1),
  8                  NVL(sp.blkcnt, -1), NVL(sp.avgrln, -1), -1, -1, -1, -1, -1, -1,
  9                  sp.hiboundlen, sp.hiboundval, 0
 10          FROM    sys.obj$ o, sys.tabsubpart$ sp, sys.ts$ ts
 11          WHERE   o.type# = 34 AND
 12                  sp.obj# = o.obj# AND
 13                  ts.ts# = sp.ts#
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81tbsp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartition description for current user's composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbspu AS
  2          SELECT  *
  3          FROM    sys.exu81tbsp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tbspu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM composite partition description for all composite partitioned tables
SQL> REM
SQL> REM Notes: blocksize should always be non null
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tbcp (
  2                  objid, dobjid, bobjid, ownerid, compname, partno, hiboundlen,
  3                  hiboundval, prowcnt, pblkcnt, pavgrlen, tsname, pctfree$,
  4                  pctused$, initrans, maxtrans, iniexts, extsize, minexts,
  5                  maxexts, extpct, flists, freegrp, pcache, deflog, tsdeflog,
  6                  blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, blocksize,
  7                  hscompress, maxsize) AS
  8          SELECT  o.obj#, o.dataobj#, cp.bo#, o.owner#, o.subname, cp.part#,
  9                  cp.hiboundlen, cp.hiboundval, NVL(cp.rowcnt, -1),
 10                  NVL(cp.blkcnt, -1), NVL(cp.avgrln, -1), ts.name,
 11                  MOD(cp.defpctfree, 100), cp.defpctused, cp.definitrans,
 12                  cp.defmaxtrans, NVL(cp.definiexts, 0), NVL(cp.defextsize, 0),
 13                  NVL(cp.defminexts, 0), NVL(cp.defmaxexts, 0),
 14                  NVL(cp.defextpct, -1), NVL(cp.deflists, 0),
 15                  NVL(cp.defgroups, 0),
 16                  DECODE(cp.defbufpool, 1, 'KEEP', 2, 'RECYCLE', NULL),
 17                  cp.deflogging, ts.dflogging, -1, -1, -1, -1, -1, -1,
 18                  NVL(ts.blocksize, 2048), cp.spare2, NVL(cp.defmaxsize, 0)
 19          FROM    sys.obj$ o, sys.tabcompart$ cp, sys.ts$ ts
 20          WHERE   cp.obj# = o.obj# AND
 21                  cp.defts# = ts.ts# (+)
 22  /

View created.

SQL> GRANT SELECT ON sys.exu9tbcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for current user's composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tbcpu AS
  2          SELECT  *
  3          FROM    sys.exu9tbcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9tbcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Pre V9.0 composite partition desc. adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbcp (
  2                  objid, dobjid, bobjid, ownerid, compname, partno, hiboundlen,
  3                  hiboundval, prowcnt, pblkcnt, pavgrlen, tsname, pctfree$,
  4                  pctused$, initrans, maxtrans, iniexts, extsize, minexts,
  5                  maxexts, extpct, flists, freegrp, pcache, deflog, tsdeflog,
  6                  blevel, leafcnt, distkey, lblkkey, dblkkey, clufac) AS
  7          SELECT  p.objid, p.dobjid, p.bobjid, p.ownerid, p.compname, p.partno,
  8                  p.hiboundlen, p.hiboundval, p.prowcnt, p.pblkcnt, p.pavgrlen,
  9                  p.tsname, p.pctfree$, p.pctused$, p.initrans, p.maxtrans,
 10                  CEIL(p.iniexts * (p.blocksize / (
 11                      SELECT  t$.blocksize
 12                      FROM    sys.ts$ t$
 13                      WHERE   t$.ts# = 0))),
 14                  CEIL(p.extsize * (p.blocksize / (
 15                      SELECT  t$.blocksize
 16                      FROM    sys.ts$ t$
 17                      WHERE   t$.ts# = 0))),
 18                  p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.pcache,
 19                  p.deflog, p.tsdeflog, p.blevel, p.leafcnt, p.distkey,
 20                  p.lblkkey, p.dblkkey, p.clufac
 21          FROM    sys.exu9tbcp p
 22  /

View created.

SQL> GRANT SELECT ON sys.exu81tbcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 cur user's comp. part. desc. adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbcpu AS
  2          SELECT  *
  3          FROM    sys.exu81tbcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tbcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.2 view for getting template subpartition information
SQL> REM
SQL> 
SQL> CREATE OR REPLACE VIEW exu92tsp (
  2                  objid, ownerid, spart_position, subpname, tsname, tsno,
  3                  flags, hiboundlen, hiboundval) AS
  4          SELECT  dsp.bo#, o.owner#, dsp.spart_position, dsp.spart_name,
  5                  ts.name, dsp.ts#, dsp.flags, dsp.hiboundlen,
  6                  dsp.hiboundval
  7          FROM    sys.defsubpart$ dsp, sys.obj$ o, sys.ts$ ts
  8          WHERE   dsp.bo# = o.obj# AND
  9                  dsp.ts# = ts.ts# (+) AND
 10                  (UID IN (0, o.owner#) OR
 11                   EXISTS (
 12                      SELECT  role
 13                      FROM    sys.session_roles
 14                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu92tsp TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.2 view for getting template subpartition information for lob columns
SQL> REM
SQL> 
SQL> CREATE OR REPLACE VIEW exu92tspl (
  2                  objid, ownerid, cname, spart_position, intcol#, lobspname,
  3                  tsname, tsno) AS
  4          SELECT  dspl.bo#, o.owner#, '"'||c.name||'"', dspl.spart_position,
  5                  dspl.intcol#, dspl.lob_spart_name, ts.name,
  6                  dspl.lob_spart_ts#
  7          FROM    sys.defsubpartlob$ dspl, sys.obj$ o, sys.ts$ ts, sys.col$ c
  8          WHERE   dspl.bo# = o.obj# AND
  9                  dspl.lob_spart_ts# = ts.ts# (+) AND
 10                  o.obj# = c.obj# AND
 11                  dspl.intcol# = c.col# AND
 12                  (UID IN (0, o.owner#) OR
 13                   EXISTS (
 14                      SELECT  role
 15                      FROM    sys.session_roles
 16                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 17  /

View created.

SQL> GRANT SELECT ON sys.exu92tspl TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get information about a nested table
SQL> REM
SQL> REM Note tempflags now deprecated
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ntb (
  2                  pobjid, objid, name, dobjid, owner, ownerid, tablespace, tsno,
  3                  fileno, blockno, audit$, comment$, clusterflag, mtime,
  4                  modified, pctfree$, pctused$, initrans, maxtrans, degree,
  5                  instances, cache, tempflags, property, deflog, tsdeflog, roid,
  6                  colprop, expname, rowcnt, blkcnt, avgrlen, tflags, ntcolflgs,
  7                  intcolid, objstatus, coltype)
  8        AS
  9          SELECT  nt$.obj#, o$.obj#, o$.name, o$.dataobj#, u$.name, o$.owner#,
 10                  ts$.name, t$.ts#, t$.file#, t$.block#, t$.audit$, c$.comment$,
 11                  NVL(t$.bobj#, 0), o$.mtime,
 12                  DECODE(BITAND(t$.flags, 1), 1, 1, 0), MOD(t$.pctfree$, 100),
 13                  t$.pctused$, t$.initrans, t$.maxtrans, NVL(t$.degree, 1),
 14                  NVL(t$.instances, 1), DECODE(BITAND(t$.flags, 128), 128, 1, 0),
 15                  MOD(TRUNC(o$.flags/2), 2), t$.property,
 16                  DECODE(BITAND(t$.flags, 32), 32, 1, 0), ts$.dflogging, o$.oid$,
 17                  cl$.property,
 18                  DECODE(BITAND(cl$.property, 1), 1, a$.name, cl$.name),
 19                  NVL(t$.rowcnt, -1), NVL(t$.blkcnt, -1), NVL(t$.avgrln, -1),
 20                  t$.flags, NVL(ct$.flags, 0), cl$.intcol#, o$.status,
 21                  cl$.type#
 22          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.user$ u$,
 23                  sys.com$ c$, sys.ntab$ nt$, sys.col$ cl$, sys.attrcol$ a$,
 24                  sys.coltype$ ct$
 25          WHERE   t$.obj# = o$.obj# AND
 26                  t$.ts# = ts$.ts# AND
 27                  u$.user# = o$.owner# AND
 28                  o$.obj# = c$.obj#(+) AND
 29                  c$.col#(+) IS NULL AND
 30                  nt$.ntab# = o$.obj# AND
 31                  cl$.obj# = ct$.obj# (+) AND
 32                  cl$.intcol# = ct$.intcol# (+)  AND
 33                  nt$.obj# = cl$.obj# AND
 34                  nt$.intcol# = cl$.intcol# AND
 35                  cl$.obj# = a$.obj# (+) AND
 36                  cl$.intcol# = a$.intcol# (+) AND
 37                  BITAND(cl$.property, 32768) != 32768    /* not unused column */
 38  /

View created.

SQL> GRANT SELECT ON sys.exu8ntb TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8ntbu AS
  2          SELECT  *
  3          FROM    sys.exu8ntb
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ntbu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get tables that were included in an incremental/cumulative export that
SQL> REM have inner nested tables
SQL> REM
SQL> REM use for inc/cum when record = yes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tntic (
  2                  objid, ownerid, tname) AS
  3          SELECT  o$.obj#, o$.owner#, o$.name
  4          FROM    sys.obj$ o$, sys.tab$ t$
  5          WHERE   (o$.owner#, o$.name) IN (
  6                      SELECT  i$.owner#, i$.name      /* tables in this export */
  7                      FROM    sys.incexp i$, sys.incvid v$
  8                      WHERE   i$.expid > v$.expid AND
  9                              i$.type# = 2) AND
 10                  t$.obj# = o$.obj# AND
 11                  BITAND(t$.property, 4) = 4              /* has nested tables */
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8tntic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM use for inc when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tnti (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu9tabi                        /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9tnti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM use for cum when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tntc (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu9tabc                        /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9tntc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM use for inc when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tnti (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu81tabi                       /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu81tnti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM use for cum when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tntc (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu81tabc                       /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu81tntc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 use for inc when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tnti (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu8tabi                        /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8tnti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 use for cum when record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tntc (
  2                  objid, ownerid, tname) AS
  3          SELECT  objid, ownerid, name
  4          FROM    sys.exu8tabc                        /* tables in this export */
  5          WHERE   BITAND(property, 4) = 4           /* table has nested tables */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8tntc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for all non_composite partitioned indexes
SQL> REM and index organized tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ixp (
  2                  objid, dobjid, bobjid, ownerid, pname, prowcnt, pblkcnt,
  3                  pavgrlen, pflags, partno, hiboundlen, hiboundval, tsname, tsno,
  4                  fileno, blockno, pctfree$, pctused$, initrans, maxtrans,
  5                  deflog, tsdeflog, blevel, leafcnt, distkey, lblkkey, dblkkey,
  6                  clufac, iflags) AS
  7          SELECT  o$.obj#, o$.dataobj#, ip$.bo#, o$.owner#, o$.subname,
  8                  NVL(ip$.rowcnt, -1),
  9                  NVL2((
 10                      SELECT  i$.bo#
 11                      FROM    sys.ind$ i$
 12                      WHERE   i$.type# = 4 AND
 13                              i$.obj# = ip$.bo#),
 14                      NVL(ip$.leafcnt, -1), -1),  /* leafcnt (blkcnt) if table */
 15                  NVL((
 16                      SELECT  tp$.avgrln
 17                      FROM    sys.tabpart$ tp$              /* avglen if table */
 18                      WHERE   tp$.part# = ip$.part# AND
 19                              tp$.bo# = (
 20                                  SELECT  i$.bo#
 21                                  FROM    sys.ind$ i$
 22                                  WHERE   i$.type# = 4 AND        /* iot - top */
 23                                          i$.obj# = ip$.bo#)), -1),
 24                  NVL2((
 25                      SELECT  i$.bo#
 26                      FROM    sys.ind$ i$              /* stats flags if table */
 27                      WHERE   i$.type# = 4 AND
 28                              i$.obj# = ip$.bo#),
 29                      ip$.flags, -1),
 30                  ip$.part#, ip$.hiboundlen, ip$.hiboundval, ts$.name, ip$.ts#,
 31                  ip$.file#, ip$.block#, MOD(ip$.pctfree$, 100), 0, ip$.initrans,
 32                  ip$.maxtrans, DECODE(BITAND(ip$.flags, 4), 4, 1, 0),
 33                  ts$.dflogging, NVL(ip$.blevel, -1), NVL(ip$.leafcnt, -1),
 34                  NVL(ip$.distkey, -1), NVL(ip$.lblkkey, -1),
 35                  NVL(ip$.dblkkey, -1), NVL(ip$.clufac, -1), ip$.flags
 36          FROM    sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$
 37          WHERE   o$.type# = 20 AND
 38                  ip$.obj# = o$.obj# AND
 39                  ts$.ts# = ip$.ts#
 40  /

View created.

SQL> GRANT SELECT ON sys.exu8ixp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for current user's non_composite partitioned indexes.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ixpu AS
  2          SELECT  *
  3          FROM    sys.exu8ixp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ixpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for all composite partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ixcp (
  2                  objid, dobjid, bobjid, ownerid, compname, partno, hiboundlen,
  3                  hiboundval, prowcnt, pblkcnt, pavgrlen, tsname, pctfree$,
  4                  pctused$, initrans, maxtrans, iniexts, extsize, minexts,
  5                  maxexts, extpct, flists, freegrp, pcache, deflog, tsdeflog,
  6                  blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, blocksize,
  7                  hscompress, maxsize) AS
  8          SELECT  o.obj#, o.dataobj#, icp.bo#, o.owner#, o.subname, icp.part#,
  9                  icp.hiboundlen, icp.hiboundval, NVL(icp.rowcnt, -1), -1, -1,
 10                  ts.name, MOD(icp.defpctfree, 100), 0, icp.definitrans,
 11                  icp.defmaxtrans, NVL(icp.definiexts, 0),
 12                  NVL(icp.defextsize, 0), NVL(icp.defminexts, 0),
 13                  NVL(icp.defmaxexts, 0), NVL(icp.defextpct, -1),
 14                  NVL(icp.deflists, 0), NVL(icp.defgroups, 0),
 15                  DECODE(icp.defbufpool, 1, 'KEEP', 2, 'RECYCLE', NULL),
 16                  icp.deflogging, ts.dflogging, NVL(icp.blevel, -1),
 17                  NVL(icp.leafcnt, -1), NVL(icp.distkey, -1),
 18                  NVL(icp.lblkkey, -1), NVL(icp.dblkkey, -1),
 19                  NVL(icp.clufac, -1),
 20                  NVL(ts.blocksize, (
 21                      SELECT  t$.blocksize
 22                      FROM    sys.ts$ t$
 23                      WHERE   t$.ts# = (NVL((
 24                                  SELECT  i$.ts#
 25                                  FROM    sys.ind$ i$
 26                                  WHERE   i$.obj# = icp.bo# AND
 27                                          i$.type# != 8 AND
 28                                          i$.type# != 4 AND
 29                                          BITAND(i$.flags, 4096) = 0),
 30                                             0)))),
 31                  0, NVL(icp.defmaxsize, 0)
 32          FROM    sys.obj$ o, sys.indcompart$ icp, sys.ts$ ts
 33          WHERE   icp.obj# = o.obj# AND
 34                  icp.defts# = ts.ts# (+)
 35  /

View created.

SQL> GRANT SELECT ON sys.exu9ixcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partition description for current user's composite partitioned indexes.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ixcpu AS
  2          SELECT  *
  3          FROM    sys.exu9ixcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9ixcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 composite partition desc. adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ixcp (
  2                  objid, dobjid, bobjid, ownerid, compname, partno, hiboundlen,
  3                  hiboundval, prowcnt, pblkcnt, pavgrlen, tsname, pctfree$,
  4                  pctused$, initrans, maxtrans, iniexts, extsize, minexts,
  5                  maxexts, extpct, flists, freegrp, pcache, deflog, tsdeflog,
  6                  blevel, leafcnt, distkey, lblkkey, dblkkey, clufac) AS
  7          SELECT  p.objid, p.dobjid, p.bobjid, p.ownerid, p.compname, p.partno,
  8                  p.hiboundlen, p.hiboundval, p.prowcnt, p.pblkcnt, p.pavgrlen,
  9                  p.tsname, p.pctfree$, p.pctused$, p.initrans, p.maxtrans,
 10                  CEIL(p.iniexts * (p.blocksize / (
 11                      SELECT  t$.blocksize
 12                      FROM    sys.ts$ t$
 13                      WHERE   t$.ts# = 0))),
 14                  CEIL(p.extsize * (p.blocksize / (
 15                      SELECT  t$.blocksize
 16                      FROM    sys.ts$ t$
 17                      WHERE   t$.ts# = 0))),
 18                  p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.pcache,
 19                  p.deflog, p.tsdeflog, p.blevel, p.leafcnt, p.distkey,
 20                  p.lblkkey, p.dblkkey, p.clufac
 21          FROM    sys.exu9ixcp p
 22  /

View created.

SQL> GRANT SELECT ON sys.exu81ixcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's comp. part. desc. adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ixcpu AS
  2          SELECT  *
  3          FROM    sys.exu81ixcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81ixcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartition description for all composite partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ixsp (
  2                  objid, dobjid, pobjid, ownerid, subpartno, subpname, tsname,
  3                  fileno, blockno, tsno, prowcnt, pblkcnt, pavgrlen, blevel,
  4                  leafcnt, distkey, lblkkey, dblkkey, clufac, hiboundlen,
  5                  hiboundval, flags) AS
  6          SELECT  o.obj#, o.dataobj#, isp.pobj#, o.owner#, isp.subpart#,
  7                  o.subname, ts.name, isp.file#, isp.block#, isp.ts#,
  8                  NVL(isp.rowcnt, -1), -1, -1, NVL(isp.blevel, -1),
  9                  NVL(isp.leafcnt, -1), NVL(isp.distkey, -1),
 10                  NVL(isp.lblkkey, -1), NVL(isp.dblkkey, -1),
 11                  NVL(isp.clufac, -1), isp.hiboundlen, isp.hiboundval, isp.flags
 12          FROM    sys.obj$ o, sys.indsubpart$ isp, sys.ts$ ts
 13          WHERE   o.type# = 35 AND
 14                  isp.obj# = o.obj# AND
 15                  ts.ts# = isp.ts#
 16  /

View created.

SQL> GRANT SELECT ON sys.exu81ixsp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartition description for current user's composite partitioned indexes.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ixspu AS
  2          SELECT  *
  3          FROM    sys.exu81ixsp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81ixspu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partitioning key columns for all partitioned tables. NOTE: property,
SQL> REM function, funclen added in anticipation of support for virtual cols. as
SQL> REM partitioning keys and to keep table and index part. views in synch.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pok (
  2                  objid, ownerid, posno, name, property, function, funclen) AS
  3          SELECT  o$.obj#, o$.owner#, p$.pos#,
  4                  DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
  5                  c$.property, c$.default$, c$.deflength
  6          FROM    sys.obj$ o$, sys.partcol$ p$, sys.col$ c$, sys.attrcol$ a$
  7          WHERE   o$.obj# = c$.obj# AND
  8                  o$.obj# = p$.obj# AND
  9                  p$.intcol# = c$.intcol# AND
 10                  p$.obj# = a$.obj# (+) AND
 11                  p$.intcol# = a$.intcol# (+)
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8pok TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partitioning key columns for current user's partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8poku AS
  2          SELECT  *
  3          FROM    sys.exu8pok
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8poku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartitioning key columns for all composite partitioned (R+H) tables.
SQL> REM NOTE: property, function, funclen added in anticipation of support for
SQL> REM function, funclen added in anticipation of support for virtual cols. as
SQL> REM partitioning keys and to keep table and index part. views in synch.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81spok (
  2                  objid, ownerid, posno, name, property, function, funclen) AS
  3          SELECT  o.obj#, o.owner#, spc.pos#,
  4                  DECODE(BITAND(c.property, 1), 1, a.name, c.name),
  5                  c.property, c.default$, c.deflength
  6          FROM    sys.obj$ o, sys.subpartcol$ spc, sys.col$ c, sys.attrcol$ a
  7          WHERE   o.obj# = c.obj# AND
  8                  o.obj# = spc.obj# AND
  9                  spc.intcol# = c.intcol# AND
 10                  spc.obj# = a.obj# (+) AND
 11                  spc.intcol# = a.intcol# (+)
 12  /

View created.

SQL> GRANT SELECT ON sys.exu81spok TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartitioning key columns for current user's composite partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81spoku AS
  2          SELECT  *
  3          FROM    sys.exu81spok
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81spoku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partitioning key columns for all partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8poki (
  2                  objid, ownerid, posno, name, property, function, funclen) AS
  3          SELECT  o.obj#, o.owner#, p.pos#,
  4                  DECODE(BITAND(c.property, 1), 1, a.name, c.name),
  5                  c.property, c.default$, c.deflength
  6          FROM    sys.obj$ o, sys.partcol$ p, sys.ind$ i, sys.col$ c,
  7                  sys.attrcol$ a
  8          WHERE   o.obj# = p.obj# AND
  9                  i.obj# = o.obj# AND
 10                  i.bo# = c.obj# AND
 11                  p.intcol# = c.intcol# AND
 12                  c.obj# = a.obj# (+) AND
 13                  c.intcol# = a.intcol# (+)
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8poki TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM partitioning key columns for current user's partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pokiu AS
  2          SELECT  *
  3          FROM    sys.exu8poki
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8pokiu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartitioning key columns for all composite partitioned indexes
SQL> REM not used in 81
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81spoki (
  2                  objid, ownerid, posno, name, property, function, funclen) AS
  3          SELECT  o.obj#, o.owner#, sp.pos#, c.name, c.property, c.default$,
  4                  c.deflength
  5          FROM    sys.obj$ o, sys.subpartcol$ sp, sys.ind$ i, sys.col$ c
  6          WHERE   o.obj# = sp.obj# AND
  7                  i.obj# = o.obj# AND
  8                  i.bo# = c.obj# AND
  9                  sp.intcol# = c.intcol#
 10  /

View created.

SQL> GRANT SELECT ON sys.exu81spoki TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM subpartitioning key columns for current user's composite
SQL> REM partitioned indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81spokiu AS
  2          SELECT  *
  3          FROM    sys.exu81spoki
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81spokiu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM table/index level storage definition for all partitioned tables/indexes
SQL> REM description on partitioned object
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pds (
  2                  objid, type, ownerid, ptype, subptype, pflag, pcnt, pkcnt,
  3                  pctfree$, pctused$, initrans, maxtrans, iniexts, extsize,
  4                  minexts, maxexts, extpct, flists, freegrp, tsname, deflog,
  5                  pcache, blocksize, hscompress, defsubpcnt, maxsize) AS
  6          SELECT  o$.obj#, o$.type#, o$.owner#, po$.parttype,
  7                  MOD(po$.spare2, 256), NVL(po$.flags, 0), po$.partcnt,
  8                  po$.partkeycols, MOD(po$.defpctfree, 100), po$.defpctused,
  9                  po$.definitrans, po$.defmaxtrans, po$.deftiniexts,
 10                  po$.defextsize, po$.defminexts, po$.defmaxexts, po$.defextpct,
 11                  po$.deflists, po$.defgroups, ts$.name, po$.deflogging,
 12                  DECODE(po$.spare1, 1, 'KEEP', 2, 'RECYCLE', NULL),
 13                  NVL(ts$.blocksize, 2048),      /* non null for table/indexes */
 14                  (po$.spare2/4294967296),  /* divide by ^x80000000 for byte 4 */
 15                  MOD(TRUNC(po$.spare2/65536), 65536), po$.defmaxsize
 16          FROM    sys.partobj$ po$, sys.obj$ o$, sys.ts$ ts$
 17          WHERE   po$.defts# = ts$.ts# (+) AND
 18                  po$.obj# = o$.obj#
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9pds TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's table/index level storage definition partitioned tables/indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pdsu AS
  2          SELECT  *
  3          FROM    sys.exu9pds
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9pdsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 part. table/index level storage def. adjusted for TS specific
SQL> REM blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pds (
  2                  objid, type, ownerid, ptype, subptype, pflag, pcnt, pkcnt,
  3                  pctfree$, pctused$, initrans, maxtrans, iniexts, extsize,
  4                  minexts, maxexts, extpct, flists, freegrp, tsname, deflog,
  5                  pcache) AS
  6          SELECT  p.objid, p.type, p.ownerid, p.ptype, p.subptype, p.pflag,
  7                  p.pcnt, p.pkcnt, p.pctfree$, p.pctused$, p.initrans,
  8                  p.maxtrans,
  9                  NVL(CEIL(p.iniexts * (p.blocksize / (
 10                      SELECT  t$.blocksize
 11                      FROM    sys.ts$ t$
 12                      WHERE   t$.ts# = 0))),
 13                      NULL),
 14                  NVL(CEIL(p.extsize * (p.blocksize / (
 15                      SELECT  t$.blocksize
 16                      FROM    sys.ts$ t$
 17                      WHERE   t$.ts# = 0))),
 18                      NULL),
 19                  p.minexts, p.maxexts, p.extpct, p.flists, p.freegrp, p.tsname,
 20                  p.deflog, p.pcache
 21          FROM    sys.exu9pds p
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8pds TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's part. table/index level storage def. adjusted for
SQL> REM TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pdsu AS
  2          SELECT  *
  3          FROM    sys.exu8pds
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8pdsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM not null constraints on columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8colnn (
  2                  tobjid, intcolid, conname, isnull, enabled, defer) AS
  3          SELECT  cc$.obj#, cc$.intcol#, con$.name, 1, NVL(cd$.enabled, 0),
  4                  NVL(cd$.defer, 0)
  5          FROM    sys.con$ con$, sys.cdef$ cd$, sys.ccol$ cc$
  6          WHERE   cc$.con# = cd$.con# AND
  7                  cd$.con# = con$.con# AND
  8                  cd$.type# IN (7, 11)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8colnn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8col_temp (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  colprop, comment$, dfltlen, enabled, defer, flags, charsetid,
  5                  charsetform, fsprecision, lfprecision, charlen) AS
  6          SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
  7                  c$.precision#, c$.scale, c$.type#, NVL(cn.isnull, 0),
  8                  cn.conname, c$.col#, c$.intcol#, c$.segcol#, c$.property,
  9                  com$.comment$, NVL(c$.deflength, 0), cn.enabled, cn.defer,
 10                  NVL(o$.flags, 0), NVL(c$.charsetid, 0), NVL(c$.charsetform, 0),
 11                  c$.scale, c$.precision#, c$.spare3
 12          FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$,
 13                  sys.exu8colnn cn
 14          WHERE   c$.obj# = o$.obj# AND
 15                  o$.owner# = u$.user# AND
 16                  c$.obj# = com$.obj#(+) AND
 17                  c$.intcol# = com$.col#(+) AND
 18                  c$.obj# = cn.tobjid AND
 19                  c$.intcol# = cn.intcolid
 20        UNION ALL
 21          SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
 22                  c$.precision#, c$.scale, c$.type#, 0, NULL, c$.col#,
 23                  c$.intcol#, c$.segcol#, c$.property, com$.comment$,
 24                  NVL(c$.deflength, 0), 0, 0, NVL(o$.flags, 0),
 25                  NVL(c$.charsetid, 0), NVL(c$.charsetform, 0), c$.scale,
 26                  c$.precision#, c$.spare3
 27          FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$
 28          WHERE   c$.obj# = o$.obj# AND
 29                  o$.owner# = u$.user# AND
 30                  c$.obj# = com$.obj#(+) AND
 31                  c$.intcol# = com$.col#(+) AND
 32                  BITAND(c$.property, 32768) != 32768 AND /* not unused column */
 33                  NOT EXISTS (
 34                      SELECT  NULL
 35                      FROM    sys.exu8colnn cn
 36                      WHERE   c$.obj# = cn.tobjid AND
 37                              c$.intcol# = cn.intcolid)
 38  /

View created.

SQL> GRANT SELECT ON sys.exu8col_temp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8col (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, type, isnull, conname, colid, intcolid,
  9                  segcolid, comment$, default$, dfltlen, enabled, defer,
 10                  v$.flags, colprop, '', '', v$.charsetid, v$.charsetform,
 11                  v$.fsprecision, v$.lfprecision, v$.charlen,  NVL(ct$.flags, 0)
 12          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$
 13          WHERE   c$.obj# = v$.tobjid AND
 14                  c$.intcol# = v$.intcolid AND
 15                  v$.tobjid = ct$.obj# (+) AND
 16                  (BITAND(v$.colprop, 32) != 32 OR      /* not a hidden column */
 17                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 18                   BITAND(v$.colprop, 4194304) = 4194304) /* RLS hidden column */
 19  /

View created.

SQL> GRANT SELECT ON sys.exu8col TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8colu AS
  2          SELECT  *
  3          FROM    sys.exu8col
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8colu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8col_temp_tts_unused_col (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  colprop, comment$, dfltlen, enabled, defer, flags, charsetid,
  5                  charsetform, fsprecision, lfprecision, charlen) AS
  6          SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
  7                  c$.precision#, c$.scale, c$.type#, NVL(cn.isnull, 0),
  8                  cn.conname, c$.col#, c$.intcol#, c$.segcol#, c$.property,
  9                  com$.comment$, NVL(c$.deflength, 0), cn.enabled, cn.defer,
 10                  NVL(o$.flags, 0), NVL(c$.charsetid, 0), NVL(c$.charsetform, 0),
 11                  c$.scale, c$.precision#, c$.spare3
 12          FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$,
 13                  sys.exu8colnn cn
 14          WHERE   c$.obj# = o$.obj# AND
 15                  o$.owner# = u$.user# AND
 16                  c$.obj# = com$.obj#(+) AND
 17                  c$.segcol# = com$.col#(+) AND
 18                  c$.obj# = cn.tobjid AND
 19                  c$.intcol# = cn.intcolid
 20        UNION ALL
 21          SELECT  o$.obj#, u$.name, o$.owner#, o$.name, c$.name, c$.length,
 22                  c$.precision#, c$.scale, c$.type#, 0, NULL, c$.col#,
 23                  c$.intcol#, c$.segcol#, c$.property, com$.comment$,
 24                  NVL(c$.deflength, 0), 0, 0, NVL(o$.flags, 0),
 25                  NVL(c$.charsetid, 0), NVL(c$.charsetform, 0), c$.scale,
 26                  c$.precision#, c$.spare3
 27          FROM    sys.col$ c$, sys.obj$ o$, sys.user$ u$, sys.com$ com$
 28          WHERE   c$.obj# = o$.obj# AND
 29                  o$.owner# = u$.user# AND
 30                  c$.obj# = com$.obj#(+) AND
 31                  c$.segcol# = com$.col#(+) AND
 32                  NOT EXISTS (
 33                      SELECT  NULL
 34                      FROM    sys.exu8colnn cn
 35                      WHERE   c$.obj# = cn.tobjid AND
 36                              c$.intcol# = cn.intcolid)
 37  /

View created.

SQL> GRANT SELECT ON sys.exu8col_temp_tts_unused_col TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8col_tts_unused_col (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, type, isnull, conname, colid, intcolid,
  9                  segcolid, comment$, default$, dfltlen, enabled, defer,
 10                  v$.flags, colprop, '', '', v$.charsetid, v$.charsetform,
 11                  v$.fsprecision, v$.lfprecision, v$.charlen,  NVL(ct$.flags, 0)
 12          FROM    sys.exu8col_temp_tts_unused_col v$, sys.col$ c$,
 13                  sys.coltype$ ct$
 14          WHERE   c$.obj# = v$.tobjid AND
 15                  c$.intcol# = v$.intcolid AND
 16                  v$.tobjid = ct$.obj# (+)  AND
 17                  (BITAND(v$.colprop,32768) = 32768 OR        /* unused column */
 18                   BITAND(v$.colprop, 32) != 32 OR      /* not a hidden column */
 19                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 20                   BITAND(v$.colprop, 4194304) = 4194304) /* RLS hidden column */
 21  /

View created.

SQL> GRANT SELECT ON sys.exu8col_tts_unused_col TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access columns in tables containing object oriented columns
SQL> REM in normal tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8coo (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name, v$.charsetid, v$.charsetform, v$.fsprecision,
 12                  v$.lfprecision, v$.charlen, NVL(ct$.flags,0)
 13          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 14                  sys.obj$ o$, sys.user$ u$
 15          WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
 16                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 17                   BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
 18                  v$.tobjid = c$.obj# (+) AND
 19                  v$.intcolid = c$.intcol# (+) AND
 20                  v$.tobjid = ct$.obj# (+) AND
 21                  v$.intcolid = ct$.intcol# (+) AND
 22                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 23                  NVL(o$.owner#, -1) = u$.user# (+) AND
 24                  NVL(o$.type#,13) = 13
 25  /

View created.

SQL> GRANT SELECT ON sys.exu8coo TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8coou AS
  2          SELECT  *
  3          FROM    sys.exu8coo
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8coou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access columns in extent tables, extent views and inner nested
SQL> REM tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8coe (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, colclass, charsetid, charsetform,
  6                  fsprecision, lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name,
 12                  DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
 13                          'SYS_NC_ROWINFO$', 3, 100),
 14                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 15                  v$.charlen, NVL(ct$.flags, 0)
 16          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 17                  sys.obj$ o$, sys.user$ u$
 18          WHERE   c$.obj# = v$.tobjid AND
 19                  c$.intcol# = v$.intcolid AND
 20                  (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
 21                   BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
 22                   BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
 23                  c$.obj# = ct$.obj# (+) AND
 24                  c$.intcol# = ct$.intcol# (+) AND
 25                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 26                  NVL(o$.owner#, -1) = u$.user# (+) AND
 27                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 28  /

View created.

SQL> GRANT SELECT ON sys.exu8coe TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8coeu AS
  2          SELECT  *
  3          FROM    sys.exu8coe
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8coeu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access columns in extent tables, extent views and inner nested
SQL> REM tables (v9.2+ with optional type synonyms)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coe (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, colclass, charsetid, charsetform,
  6                  fsprecision, lfprecision, charlen, tflags, typesyn) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name,
 12                  DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
 13                          'SYS_NC_ROWINFO$', 3, 100),
 14                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 15                  v$.charlen, NVL(ct$.flags, 0), s$.name
 16          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 17                  sys.obj$ o$, sys.user$ u$, sys.obj$ s$
 18          WHERE   c$.obj# = v$.tobjid AND
 19                  c$.intcol# = v$.intcolid AND
 20                  (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
 21                   BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
 22                   BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
 23                  c$.obj# = ct$.obj# (+) AND
 24                  c$.intcol# = ct$.intcol# (+) AND
 25                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 26                  NVL(o$.owner#, -1) = u$.user# (+) AND
 27                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 28                  AND ct$.synobj# IS NOT NULL AND /* has type synonym */
 29                  ct$.synobj# = s$.obj#
 30        UNION ALL
 31          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
 32                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
 33                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 34                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 35                  o$.name, u$.name,
 36                  DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
 37                          'SYS_NC_ROWINFO$', 3, 100),
 38                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 39                  v$.charlen, NVL(ct$.flags, 0), NULL
 40          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 41                  sys.obj$ o$, sys.user$ u$
 42          WHERE   c$.obj# = v$.tobjid AND
 43                  c$.intcol# = v$.intcolid AND
 44                  (BITAND(v$.colprop, 2) = 2 OR                 /* SYS_NC_OID$ */
 45                   BITAND(v$.colprop, 16) = 16 OR           /* NESTED_TABLE_ID */
 46                   BITAND(v$.colprop, 512) = 512) AND       /* SYS_NC_ROWINFO$ */
 47                  c$.obj# = ct$.obj# (+) AND
 48                  c$.intcol# = ct$.intcol# (+) AND
 49                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 50                  NVL(o$.owner#, -1) = u$.user# (+) AND
 51                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 52                  AND ct$.synobj# IS NULL /* does not have type synonym */
 53  /

View created.

SQL> GRANT SELECT ON sys.exu9coe TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coeu AS
  2          SELECT  *
  3          FROM    sys.exu9coe
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9coeu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Extention of exu9coe to include 'normal' columns that may have
SQL> REM default values.  The corrisponding code in exp only uses that column
SQL> REM information when generating default statements for the object table.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10coe (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, colclass, charsetid, charsetform,
  6                  fsprecision, lfprecision, charlen, tflags, typesyn) AS
  7          SELECT  *
  8          FROM    sys.exu9coe
  9        UNION ALL
 10          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
 11                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
 12                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 13                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 14                  o$.name, u$.name,
 15                  DECODE (v$.name, 'SYS_NC_OID$', 1, 'NESTED_TABLE_ID', 2,
 16                          'SYS_NC_ROWINFO$', 3, 100),
 17                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 18                  v$.charlen, NVL(ct$.flags, 0), NULL
 19          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 20                  sys.obj$ o$, sys.user$ u$
 21          WHERE   c$.obj# = v$.tobjid AND
 22                  c$.intcol# = v$.intcolid AND
 23                  c$.intcol# = ct$.intcol# (+) AND
 24                  (BITAND(v$.colprop, 32)      != 32 OR          /* not hidden */
 25                   BITAND(v$.colprop, 1048608) = 1048608 OR  /* snapsht hidden */
 26                   BITAND(v$.colprop, 4194304) = 4194304) AND    /* RLS Hidden */
 27                  c$.obj# = ct$.obj# (+) AND
 28                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 29                  NVL(o$.owner#, -1) = u$.user# (+) AND
 30                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 31  /

View created.

SQL> GRANT SELECT ON sys.exu10coe TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10coeu AS
  2          SELECT  *
  3          FROM    sys.exu10coe
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10coeu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access columns in scalar inner nested tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8csn (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, colclass, charsetid, charsetform,
  6                  fsprecision, lfprecision, charlen, tflags) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name,
 12                  DECODE (v$.name, 'NESTED_TABLE_ID', 2, 'COLUMN_VALUE', 3, 100),
 13                  v$.charsetid, v$.charsetform, v$.fsprecision, v$.lfprecision,
 14                  v$.charlen, NVL(ct$.flags, 0)
 15          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 16                  sys.obj$ o$, sys.user$ u$
 17          WHERE   c$.obj# = v$.tobjid AND
 18                  c$.intcol# = v$.intcolid AND
 19                  c$.obj# = ct$.obj# (+) AND
 20                  c$.intcol# = ct$.intcol# (+) AND
 21                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 22                  NVL(o$.owner#, -1) = u$.user# (+) AND
 23                  NVL(o$.type#, -1) != 10 /* bug 882543: no non-existent types */
 24  /

View created.

SQL> GRANT SELECT ON sys.exu8csn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8csnu AS
  2          SELECT  *
  3          FROM    sys.exu8csn
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8csnu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.0+ version of column views for TYPE SYNONYM support
SQL> REM
SQL> REM view to access columns in tables containing object oriented columns
SQL> REM in normal tables returning synonym of type if any was used
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coo (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags, typesyn) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name, v$.charsetid, v$.charsetform, v$.fsprecision,
 12                  v$.lfprecision, v$.charlen, NVL(ct$.flags,0), NULL
 13          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 14                  sys.obj$ o$, sys.user$ u$
 15          WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
 16                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 17                   BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
 18                  v$.tobjid = c$.obj# (+) AND
 19                  v$.intcolid = c$.intcol# (+) AND
 20                  v$.tobjid = ct$.obj# (+) AND
 21                  v$.intcolid = ct$.intcol# (+) AND
 22                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 23                  NVL(o$.owner#, -1) = u$.user# (+) AND
 24                  NVL(o$.type#,13) = 13 AND
 25                  ct$.synobj# IS NULL
 26        UNION ALL
 27          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
 28                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
 29                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 30                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 31                  o$.name, u$.name, v$.charsetid, v$.charsetform,
 32                  v$.fsprecision, v$.lfprecision, v$.charlen, NVL(ct$.flags,0),
 33                  so$.name
 34          FROM    sys.exu8col_temp v$, sys.col$ c$, sys.coltype$ ct$,
 35                  sys.obj$ o$, sys.user$ u$, sys.obj$ so$
 36          WHERE   (BITAND (v$.colprop, 32) != 32 OR     /* not a hidden column */
 37                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 38                   BITAND (v$.colprop, 4194304) = 4194304) AND/* RLS hidden col*/
 39                  v$.tobjid = c$.obj# (+) AND
 40                  v$.intcolid = c$.intcol# (+) AND
 41                  v$.tobjid = ct$.obj# (+) AND
 42                  v$.intcolid = ct$.intcol# (+) AND
 43                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 44                  NVL(o$.owner#, -1) = u$.user# (+) AND
 45                  NVL(o$.type#,13) = 13 AND so$.obj# = ct$.synobj#
 46  /

View created.

SQL> GRANT SELECT ON sys.exu9coo TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 10.2+ version of column views for TTS mode
SQL> REM
SQL> REM view to include unused columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coo_tts_unused_col (
  2                  tobjid, towner, townerid, tname, name, length, precision,
  3                  scale, type, isnull, conname, colid, intcolid, segcolid,
  4                  comment$, default$, dfltlen, enabled, defer, flags, colprop,
  5                  adtname, adtowner, charsetid, charsetform, fsprecision,
  6                  lfprecision, charlen, tflags, typesyn) AS
  7          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
  8                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
  9                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 10                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 11                  o$.name, u$.name, v$.charsetid, v$.charsetform, v$.fsprecision,
 12                  v$.lfprecision, v$.charlen, NVL(ct$.flags,0), NULL
 13          FROM    sys.exu8col_temp_tts_unused_col v$, sys.col$ c$, sys.coltype$ ct$,
 14                  sys.obj$ o$, sys.user$ u$
 15          WHERE   ((BITAND(v$.colprop, 32768) = 32768 AND /* unused col */
 16                    BITAND(v$.colprop, 1) != 1) OR        /* NOT ADT attr column */
 17                   (BITAND(v$.colprop, 32) != 32 OR       /* not a hidden column */
 18                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 19                   BITAND (v$.colprop, 4194304) = 4194304)) AND/* RLS hidden col*/
 20                  v$.tobjid = c$.obj# (+) AND
 21                  v$.intcolid = c$.intcol# (+) AND
 22                  v$.tobjid = ct$.obj# (+) AND
 23                  v$.intcolid = ct$.intcol# (+) AND
 24                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 25                  NVL(o$.owner#, -1) = u$.user# (+) AND
 26                  NVL(o$.type#,13) = 13 AND
 27                  ct$.synobj# IS NULL
 28        UNION ALL
 29          SELECT  tobjid, towner, townerid, v$.tname, v$.name, v$.length,
 30                  v$.precision, v$.scale, v$.type, v$.isnull, v$.conname,
 31                  v$.colid, v$.intcolid, v$.segcolid, v$.comment$, default$,
 32                  v$.dfltlen, v$.enabled, v$.defer, v$.flags, v$.colprop,
 33                  o$.name, u$.name, v$.charsetid, v$.charsetform,
 34                  v$.fsprecision, v$.lfprecision, v$.charlen, NVL(ct$.flags,0),
 35                  so$.name
 36          FROM    sys.exu8col_temp_tts_unused_col v$, sys.col$ c$, sys.coltype$ ct$,
 37                  sys.obj$ o$, sys.user$ u$, sys.obj$ so$
 38          WHERE   ((BITAND(v$.colprop, 32768) = 32768 AND /* unused col */
 39                    BITAND(v$.colprop, 1) != 1) OR        /* NOT ADT attr column */
 40                  (BITAND(v$.colprop, 32) != 32 OR        /* not a hidden column */
 41                   BITAND(v$.colprop, 1048608)= 1048608 OR/*snapshot hidden col*/
 42                   BITAND (v$.colprop, 4194304) = 4194304)) AND/* RLS hidden col*/
 43                  v$.tobjid = c$.obj# (+) AND
 44                  v$.intcolid = c$.intcol# (+) AND
 45                  v$.tobjid = ct$.obj# (+) AND
 46                  v$.intcolid = ct$.intcol# (+) AND
 47                  NVL(ct$.toid, HEXTORAW('00')) = o$.oid$ (+) AND
 48                  NVL(o$.owner#, -1) = u$.user# (+) AND
 49                  NVL(o$.type#,13) = 13 AND so$.obj# = ct$.synobj#
 50  /

View created.

SQL> GRANT SELECT ON sys.exu9coo_tts_unused_col TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9coou AS
  2          SELECT  *
  3          FROM    sys.exu9coo
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9coou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM view to access column comments for extent table, inner nested tables
SQL> REM and extent views
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cmt (
  2                  userid, objid, colno, colname, cmnt) AS
  3          SELECT  o$.owner#, cm$.obj#, cm$.col#, c$.name, cm$.comment$
  4          FROM    sys.com$ cm$, sys.obj$ o$, sys.col$ c$
  5          WHERE   o$.obj# = cm$.obj# AND
  6                  c$.obj# = cm$.obj# AND
  7                  c$.intcol# = cm$.col#
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8cmt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8cmtu AS
  2          SELECT  *
  3          FROM    sys.exu8cmt
  4          WHERE   userid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8cmtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM analyze statistics for columns (except for samples)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8asc (
  2                  tobjid, pobjid, townerid, colname, intcol, distcount, lowval,
  3                  hival, density, nullcount, avgcln, cflags) AS
  4          SELECT  c$.obj#, hh$.obj#, o$.owner#, c$.name, hh$.intcol#,
  5                  hh$.distcnt, hh$.lowval, hh$.hival, hh$.density, hh$.null_cnt,
  6                  hh$.avgcln, hh$.spare2
  7          FROM    sys.hist_head$ hh$, sys.obj$ o$, sys.obj$ ot$, sys.col$ c$
  8          WHERE   hh$.obj# = o$.obj# AND
  9                  c$.obj# = ot$.obj# AND
 10                  o$.owner# = ot$.owner# AND
 11                  hh$.intcol# = c$.intcol#
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8asc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8ascu AS
  2          SELECT  *
  3          FROM    sys.exu8asc
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ascu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM analyze statistics for columns (except for samples) v10
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10asc (
  2                  tobjid, pobjid, townerid, colname, intcol, distcount, lowval,
  3                  hival, density, nullcount, avgcln, cflags, property) AS
  4          SELECT  c$.obj#, hh$.obj#, o$.owner#, REPLACE(c$.name, '''', ''''''),
  5                  hh$.intcol#,
  6                  hh$.distcnt, hh$.lowval, hh$.hival, hh$.density, hh$.null_cnt,
  7                  hh$.avgcln, hh$.spare2, c$.property
  8          FROM    sys.hist_head$ hh$, sys.obj$ o$, sys.obj$ ot$, sys.col$ c$
  9          WHERE   hh$.obj# = o$.obj# AND
 10                  c$.obj# = ot$.obj# AND
 11                  o$.owner# = ot$.owner# AND
 12                  hh$.intcol# = c$.intcol#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu10asc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10ascu AS
  2          SELECT  *
  3          FROM    sys.exu10asc
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10ascu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM histogram samples for analyze statistics
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8hst (
  2                  pobjid, townerid, intcol, bucket, endpthash, endptval) AS
  3          SELECT  h$.obj#, o$.owner#, h$.intcol#, h$.bucket, h$.endpoint,
  4                  h$.epvalue
  5          FROM    sys.histgrm$ h$, sys.obj$ o$
  6          WHERE   h$.obj# = o$.obj#
  7        UNION ALL
  8          SELECT  h$.obj#, o$.owner#, h$.intcol#, 0, h$.minimum, NULL
  9          FROM    sys.hist_head$ h$, sys.obj$ o$
 10          WHERE   h$.obj# = o$.obj# AND
 11                  h$.bucket_cnt = 1
 12        UNION ALL
 13          SELECT  h$.obj#, o$.owner#, h$.intcol#, 1, h$.maximum, NULL
 14          FROM    sys.hist_head$ h$, sys.obj$ o$
 15          WHERE   h$.obj# = o$.obj# AND
 16                  h$.bucket_cnt = 1
 17  /

View created.

SQL> GRANT SELECT ON sys.exu8hst TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8hstu AS
  2          SELECT  *
  3          FROM    sys.exu8hst
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8hstu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all columns for index
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ico (
  2                  tobjid, towner, townerid, tname, name, btname, colid, colnum,
  3                  property, bobjid, function, funclen) AS
  4          SELECT  io$.obj#, u$.name, io$.owner#, io$.name,
  5                  DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name), to$.name,
  6                  ic$.pos#,
  7                  DECODE(BITAND(i$.property, 1024), 0, i$.cols, i$.intcols),
  8                  c$.property, ic$.bo#, c$.default$, c$.deflength
  9          FROM    sys.col$ c$, sys.icol$ ic$, sys.obj$ io$, sys.user$ u$,
 10                  sys.attrcol$ a$, sys.obj$ to$, sys.ind$ i$
 11          WHERE   c$.obj# = ic$.bo# AND
 12                  ((BITAND(i$.property, 1024) = 1024 AND
 13                    c$.intcol# = ic$.spare2) OR
 14                   ((NOT (BITAND(i$.property, 1024) = 1024)) AND
 15                   c$.intcol# = ic$.intcol#)) AND
 16                  ic$.obj# = io$.obj# AND
 17                  io$.owner# = u$.user# AND
 18                  i$.bo# = to$.obj# AND
 19                  i$.obj# = io$.obj# AND
 20                  c$.obj# = a$.obj# (+) AND
 21                  c$.intcol# = a$.intcol# (+) AND
 22                  (UID = 0 OR (UID = io$.owner# AND UID = to$.owner#) OR
 23                   EXISTS (
 24                      SELECT  role
 25                      FROM    sys.session_roles
 26                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 27  /

View created.

SQL> GRANT SELECT ON sys.exu8ico TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's index columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8icou AS
  2          SELECT  *
  3          FROM    sys.exu8ico
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8icou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM FROM tables for bitmap join index
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9bjf (
  2                  iobjid, tabname, towner, tobjid) AS
  3          SELECT  io$.obj#, to$.name, u$.name, to$.obj#
  4          FROM    sys.jijoin$ ji$, sys.obj$ to$, sys.user$ u$, sys.obj$ io$
  5          WHERE   to$.obj# IN (ji$.tab1obj#, ji$.tab2obj#) AND
  6                  to$.owner# = u$.user# AND
  7                  ji$.obj# = io$.obj# AND
  8                  (UID IN (0, io$.owner#) OR
  9                   EXISTS (
 10                      SELECT  role
 11                      FROM    sys.session_roles
 12                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 13          GROUP BY io$.obj#, to$.name, u$.name, to$.obj#
 14  /

View created.

SQL> GRANT SELECT ON sys.exu9bjf TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Equijoin list for bitmap join index
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9bjw (
  2                  iobjid, col1name, t1objid, col2name, t2objid) AS
  3          SELECT  ji$.obj#, c1$.name, ji$.tab1obj#, c2$.name, ji$.tab2obj#
  4          FROM    sys.jijoin$ ji$, sys.col$ c1$, sys.col$ c2$, sys.obj$ io$
  5          WHERE   ji$.tab1col# = c1$.intcol# AND
  6                  ji$.tab1obj# = c1$.obj# AND
  7                  ji$.tab2col# = c2$.intcol# AND
  8                  ji$.tab2obj# = c2$.obj# AND
  9                  ji$.obj# = io$.obj# AND
 10                  (UID IN (0, io$.owner#) OR
 11                   EXISTS (
 12                      SELECT  role
 13                      FROM    sys.session_roles
 14                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9bjw TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all users' default roles
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dfr (
  2                  name, userid, role, roleid) AS
  3          SELECT  u$.name, u$.user#, u1$.name, u1$.user#
  4          FROM    sys.user$ u$, sys.user$ u1$, sys.defrole$ d$
  5          WHERE   u$.user# = d$.user# AND
  6                  u1$.user# = d$.role#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8dfr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all roles - enumerate all roles
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rol (
  2                  role, password) AS
  3          SELECT  name, password
  4          FROM    sys.user$
  5          WHERE   type# = 0 AND
  6                  name NOT IN ('CONNECT', 'RESOURCE', 'DBA', 'PUBLIC',
  7                               '_NEXT_USER', 'EXP_FULL_DATABASE',
  8                               'IMP_FULL_DATABASE')
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8rol TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all role grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rlg (
  2                  grantee, granteeid, role, roleid, admin, sequence) AS
  3          SELECT  u1$.name, u1$.user#, u2$.name, u2$.user#, NVL(g$.option$, 0),
  4                  g$.sequence#
  5          FROM    sys.user$ u1$, sys.user$ u2$, sys.sysauth$ g$
  6          WHERE   u1$.user# = g$.grantee# AND
  7                  u2$.user# = g$.privilege# AND
  8                  g$.privilege# > 0 AND
  9                  u1$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 10                                  'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
 11                                  'DIP',  'DBSNMP', 'EXFSYS', 'WMSYS',
 12                                  'ORACLE_OCM', 'ANONYMOUS', 'XS$NULL')
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8rlg TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all system privs, type is 1 for user, 0 for role
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8spv (
  2                  grantee, granteeid, priv, wgo, sequence) AS
  3          SELECT  u1$.name, u1$.user#, m$.name, NVL(a$.option$, 0), a$.sequence#
  4          FROM    sys.sysauth$ a$, sys.system_privilege_map m$, sys.user$ u1$
  5          WHERE   a$.grantee# = u1$.user# AND
  6                  a$.privilege# = m$.privilege AND
  7                  BITAND(m$.property, 1) != 1 AND
  8                  u1$.name NOT IN ('CONNECT', 'RESOURCE', 'DBA', '_NEXT_USER',
  9                                   'EXP_FULL_DATABASE', 'IMP_FULL_DATABASE',
 10                                   'ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 11                                   'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA',
 12                                   'DIP', 'DBSNMP', 'EXFSYS', 'WMSYS',
 13                                   'ORACLE_OCM', 'ANONYMOUS', 'XS$NULL')
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8spv TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8grn (
  2                  objid, grantor, grantorid, grantee, priv, who, wgo, creatorid,
  3                  sequence, isdir, type) AS
  4          SELECT  t$.obj#, ur$.name, t$.grantor#, ue$.name, m$.name,
  5                  MOD(NVL(t$.option$/2, 0), 2), MOD(NVL(t$.option$, 0), 2),
  6                  o$.owner#, t$.sequence#,
  7                  DECODE ((o$.type#), 23, 1, 0), o$.type#
  8          FROM    sys.objauth$ t$, sys.obj$ o$, sys.user$ ur$,
  9                  sys.table_privilege_map m$, sys.user$ ue$
 10          WHERE   o$.obj# = t$.obj# AND
 11                  t$.privilege# = m$.privilege AND
 12                  t$.col# IS NULL AND
 13                  t$.grantor# = ur$.user# AND
 14                  t$.grantee# = ue$.user# AND
 15                  ue$.name NOT IN ('ORDSYS',  'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 16                                   'LBACSYS', 'XDB',   'SI_INFORMTN_SCHEMA',
 17                                   'DIP',   'DBSNMP', 'EXFSYS', 'WMSYS',
 18                                   'ORACLE_OCM', 'ANONYMOUS', 'XS$NULL')
 19  /

View created.

SQL> GRANT SELECT ON sys.exu8grn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM just SYS's grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8grs (
  2                  objid, name) AS
  3          SELECT  t$.obj#, o$.name
  4          FROM    sys.objauth$ t$, sys.obj$ o$
  5          WHERE   o$.obj# = t$.obj# AND
  6                  t$.col# IS NULL AND
  7                  t$.grantor# = 0 AND
  8                  o$.type# NOT IN (
  9                      SELECT  type#
 10                      FROM    sys.exppkgobj$)
 11  /

View created.

SQL> GRANT SELECT ON sys.exu8grs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM first level grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8grnu AS
  2          SELECT  *
  3          FROM    sys.exu8grn
  4          WHERE   grantorid = UID AND
  5                  creatorid = UID
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8grnu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all column grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cgr (
  2                  objid, grantor, grantorid, grantee, creatorid, cname, priv,
  3                  sequence, wgo) AS
  4          SELECT  c$.obj#, ur$.name, c$.grantor#, ue$.name, o$.owner#, cl$.name,
  5                  m$.name, c$.sequence#, MOD(NVL(c$.option$, 0), 2)
  6          FROM    sys.objauth$ c$, sys.obj$ o$, sys.user$ ur$, sys.user$ ue$,
  7                  sys.table_privilege_map m$, sys.col$ cl$
  8          WHERE   c$.grantor# = ur$.user# AND
  9                  c$.grantee# = ue$.user# AND
 10                  c$.obj# = o$.obj# AND
 11                  c$.privilege# = m$.privilege AND
 12                  c$.obj# = cl$.obj# AND
 13                  c$.col# = cl$.col#
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8cgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM first level grants
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cgru AS
  2          SELECT  *
  3          FROM    sys.exu8cgr
  4          WHERE   grantorid = UID AND
  5                  creatorid = UID
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8cgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all indexes. This view is used for TRANSPORTABLE TABLESPACEs,
SQL> REM V11.0 and higher
SQL> REM
SQL> CREATE OR REPLACE VIEW exu11ind_base (
  2                  iobjid, idobjid, iname, iowner, iownerid, ispace, itsno,
  3                  ifileno, iblockno, btname, btobjid, btowner, btownerid,
  4                  btproperty, btclusterflag, property, cluster$, pctfree$,
  5                  initrans, maxtrans, blevel, bitmap, deflog, tsdeflog, degree,
  6                  instances, type, rowcnt, leafcnt, distkey, lblkkey, dblkkey,
  7                  clufac, preccnt, iflags, sysgenconst) AS
  8          SELECT  i$.obj#, i$.dataobj#, i$.name, ui$.name, i$.owner#, ts$.name,
  9                  ind$.ts#, ind$.file#, ind$.block#, t$.name, t$.obj#, ut$.name,
 10                  t$.owner#, NVL(tb$.property, 0), NVL(tb$.bobj#, 0),
 11                  ind$.property, DECODE(t$.type#, 3, 1, 0), ind$.pctfree$,
 12                  ind$.initrans, ind$.maxtrans, NVL(ind$.blevel, -1),
 13                  DECODE(ind$.type#, 2, 1, 0),
 14                  DECODE(BITAND(ind$.flags, 4), 4, 1, 0), ts$.dflogging,
 15                  NVL(ind$.degree, 1), NVL(ind$.instances, 1), ind$.type#,
 16                  NVL(ind$.rowcnt, -1), NVL(ind$.leafcnt, -1),
 17                  NVL(ind$.distkey, -1), NVL(ind$.lblkkey, -1),
 18                  NVL(ind$.dblkkey, -1), NVL(ind$.clufac, -1),
 19                  NVL(ind$.spare2, 0), ind$.flags,
 20                  DECODE(BITAND(i$.flags, 4), 4, 1, 0)
 21          FROM    sys.obj$ t$, sys.obj$ i$, sys.ind$ ind$, sys.user$ ui$,
 22                  sys.user$ ut$, sys.ts$ ts$, sys.tab$ tb$
 23          WHERE   ind$.bo# = t$.obj# AND
 24                  ind$.obj# = i$.obj# AND
 25                  ind$.bo# = tb$.obj# (+) AND
 26                  ts$.ts# = ind$.ts# AND
 27                  i$.owner# = ui$.user# AND
 28                  t$.owner# = ut$.user# AND
 29                  BITAND(ind$.flags, 4096) = 0 AND          /* skip fake index */
 30                  (UID = 0 OR (UID = i$.owner# AND UID = t$.owner#) OR
 31                   EXISTS (
 32                      SELECT  role
 33                      FROM    sys.session_roles
 34                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 35  /

View created.

SQL> GRANT SELECT ON sys.exu11ind_base TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10ind_base (
  2                  iobjid, idobjid, iname, iowner, iownerid, ispace, itsno,
  3                  ifileno, iblockno, btname, btobjid, btowner, btownerid,
  4                  btproperty, btclusterflag, property, cluster$, pctfree$,
  5                  initrans, maxtrans, blevel, bitmap, deflog, tsdeflog, degree,
  6                  instances, type, rowcnt, leafcnt, distkey, lblkkey, dblkkey,
  7                  clufac, preccnt, iflags, sysgenconst) AS
  8          SELECT iobjid, idobjid, iname, iowner, iownerid, ispace, itsno,
  9                  ifileno, iblockno, btname, btobjid, btowner, btownerid,
 10                  btproperty, btclusterflag, property, cluster$, pctfree$,
 11                  initrans, maxtrans, blevel, bitmap, deflog, tsdeflog, degree,
 12                  instances, type, rowcnt, leafcnt, distkey, lblkkey, dblkkey,
 13                  clufac, preccnt, iflags, sysgenconst
 14          FROM sys.exu11ind_base e$
 15          WHERE  BITAND(e$.property, 8208) != 8208       /* skip Fn Ind on MV */
 16  /

View created.

SQL> GRANT SELECT ON sys.exu10ind_base TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all indexes. This view is the base view used by V9.0 and higher
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ind_base AS
  2          SELECT  *
  3          FROM    sys.exu10ind_base
  4          WHERE   type != 8 AND                        /* skip LOB index */
  5                  type != 4                            /* skip IOT top */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9ind_base TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ind_base AS
  2          SELECT  *
  3          FROM    sys.exu9ind_base
  4          WHERE   sysgenconst = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81ind_base TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM exu11ind is defined in the same manner as exu9ind; please
SQL> REM refer to that for comments.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu11ind AS
  2          SELECT  *
  3          FROM    sys.exu11ind_base
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.con$ c$, sys.cdef$ cd$
  7                      WHERE   c$.name = iname AND   /* same name as constraint */
  8                              c$.owner# = iownerid AND
  9                              c$.con# = cd$.con# AND
 10                              NVL(cd$.enabled, 0) = iobjid AND  /* cons enable */
 11                              (cd$.intcols = 1 AND           /* single column */
 12                               EXISTS (
 13                                  SELECT  *
 14                                  FROM    sys.ccol$ cc$, sys.col$ co$
 15                                  WHERE   cc$.con# = c$.con# AND
 16                                          co$.obj# = cc$.obj# AND
 17                                          co$.intcol# = cc$.intcol# AND
 18                                          BITAND(co$.property, 2) = 2)))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu11ind TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu9ind is derived from base view to eliminate indexes completely
SQL> REM defined by constraint or OIDINDEX declarations.
SQL> REM Selects any indices which do NOT correspond to constraints (same name)
SQL> REM which are enabled -and- represent an OID INDEX constraint
SQL> REM                               (single constr. col is OID).
SQL> REM  (allows non-system-defined indices due to constraints,
SQL> REM   except when the base table is IOT??).
SQL> REM Reference bugs: 686272, 735699
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ind AS
  2          SELECT  *
  3          FROM    sys.exu9ind_base
  4          WHERE   NOT EXISTS (
  5                      SELECT  *
  6                      FROM    sys.con$ c$, sys.cdef$ cd$
  7                      WHERE   c$.name = iname AND   /* same name as constraint */
  8                              c$.owner# = iownerid AND
  9                              c$.con# = cd$.con# AND
 10                              NVL(cd$.enabled, 0) = iobjid AND  /* cons enable */
 11                              (cd$.intcols = 1 AND           /* single column */
 12                               EXISTS (
 13                                  SELECT  *
 14                                  FROM    sys.ccol$ cc$, sys.col$ co$
 15                                  WHERE   cc$.con# = c$.con# AND
 16                                          co$.obj# = cc$.obj# AND
 17                                          co$.intcol# = cc$.intcol# AND
 18                                          BITAND(co$.property, 2) = 2)))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9ind TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all indexes. This view is used by V8.1 and higher since it retrieves
SQL> REM functional and domain indexes which are unknown in V8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ind AS
  2          SELECT  *
  3          FROM    sys.exu9ind
  4          WHERE   sysgenconst = 0 AND
  5                  BITAND(property, 1) = 0 OR                     /* not unique */
  6                  NOT EXISTS (
  7                      SELECT  *
  8                      FROM    sys.con$ c$, sys.cdef$ cd$
  9                      WHERE   c$.name = iname AND   /* same name as constraint */
 10                              c$.owner# = iownerid AND
 11                              c$.con# = cd$.con# AND
 12                              NVL(cd$.enabled, 0) = iobjid AND  /* cons enable */
 13                              ((BITAND(cd$.defer, 8) = 8)))       /* sys gen'd */
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81ind TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all indexes for V8.0. This view filters out V8.1 and later index types not
SQL> REM supported in V8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ind AS
  2          SELECT  *
  3          FROM    sys.exu81ind
  4          WHERE   BITAND(property, 16) != 16 AND      /* skip functional index */
  5                  type != 9                               /* skip domain index */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8ind TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user indexes for V8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8indu AS
  2          SELECT  *
  3          FROM    sys.exu8ind
  4  /

View created.

SQL> GRANT SELECT ON sys.exu8indu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Additional information required for domain indexes:
SQL> REM indextype name & owner, implementation type name & owner, and params
SQL> REM (params are spare4 in idx$)
SQL> REM "1" connections are for the index itself, "2" connections are for the
SQL> REM assoc. indextype, and  "3" for the assoc. implementation type.
SQL> REM iversion = domain index version (added in 9.0)
SQL> REM iproperty = the properties of domain index
SQL> REM gmflags = number (flags) passed to getindexmetadata, setup based on def.
SQL> REM           of flags argument in catodci.sql.
SQL> REM           Export may set transportable bit but otherwise does not
SQL> REM           view the composed value.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9doi (
  2                  iobjid, iownerid, iparams, itname, itowner, implname,
  3                  implowner, diversion, iproperty, gmflags)
  4        AS
  5          SELECT  ind$.obj#, indo$.owner#, ind$.spare4, o2$.name, u2$.name,
  6                  o3$.name, u3$.name, it$.interface_version#, it$.property, 0
  7          FROM    sys.ind$ ind$, sys.obj$ indo$, sys.obj$ o2$, sys.obj$ o3$,
  8                  sys.user$ u2$, sys.user$ u3$, sys.indtypes$ it$
  9          WHERE   ind$.type# = 9 AND                           /* Domain Index */
 10                  ind$.indmethod# = it$.obj#  AND
 11                  ind$.obj# = indo$.obj# AND
 12                  it$.obj# = o2$.obj# AND
 13                  it$.implobj# = o3$.obj# AND
 14                  o2$.owner# = u2$.user# AND
 15                  o3$.owner# = u3$.user# AND
 16                  BITAND(ind$.property, 2) != 2                 /* partitioned */
 17        UNION ALL         /* Grab domain indexes that have partition info also */
 18          SELECT  ind$.obj#, indo$.owner#, ind$.spare4, o2$.name, u2$.name,
 19                  o3$.name, u3$.name, it$.interface_version#, it$.property,
 20                  DECODE(BITAND (ind$.property, 512), 512, 64,0)+/*0x200=iot di*/
 21                  DECODE(BITAND(po$.flags, 1), 1, 1, 0) +         /* 1 = local */
 22                  DECODE(po$.parttype, 1, 2, 2, 4, 0)   /* 1 = range, 2 = hash */
 23          FROM    sys.ind$ ind$, sys.obj$ indo$, sys.obj$ o2$, sys.obj$ o3$,
 24                  sys.user$ u2$, sys.user$ u3$, sys.indtypes$ it$,
 25                  sys.partobj$ po$
 26          WHERE   ind$.type# = 9 AND
 27                  ind$.indmethod# = it$.obj# AND
 28                  ind$.obj# = indo$.obj# AND
 29                  it$.obj# = o2$.obj# AND
 30                  it$.implobj# = o3$.obj# AND
 31                  o2$.owner# = u2$.user# AND
 32                  o3$.owner# = u3$.user# AND
 33                  BITAND(po$.flags, 8) = 8 AND
 34                  po$.obj# = ind$.obj# AND
 35                  BITAND(ind$.property, 2) = 2                  /* partitioned */
 36  /

View created.

SQL> GRANT SELECT ON sys.exu9doi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Domain index info for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9doiu AS
  2          SELECT  *
  3          FROM    sys.exu9doi
  4          WHERE   iownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9doiu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM The 81 view uses the 9.0 view and returns everything but the new
SQL> REM interface version
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81doi AS
  2          SELECT  *
  3          FROM    sys.exu9doi
  4          WHERE   diversion = 1
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81doi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Domain index info for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81doiu AS
  2          SELECT  *
  3          FROM    sys.exu81doi
  4          WHERE   iownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81doiu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V9.0 Get Domain Index secondary objects
SQL> REM
SQL> REM pi_obj = parent index object
SQL> REM c_obj = child secondary object
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9doso (
  2                  obj#, tablename, ownerid) AS
  3          SELECT  pi_obj.obj#, c_obj.name, c_obj.owner#
  4          FROM    sys.obj$ pi_obj, sys.obj$ c_obj, sys.user$ us2,
  5                  sys.secobj$ secobj
  6          WHERE   pi_obj.obj# = secobj.obj# AND       /* has secondary objects */
  7                  c_obj.obj# = secobj.secobj# AND /*object is secondary object */
  8                  c_obj.owner# = us2.user#  AND /* secondary obj is same owner */
  9                  c_obj.type# = 2 AND             /* Secondary Object is TABLE */
 10                  BITAND(c_obj.flags, 128) != 128 AND
 11                  (UID = 0 OR (UID = pi_obj.owner# AND UID = us2.user#) OR
 12                   EXISTS (
 13                      SELECT  role
 14                      FROM    sys.session_roles
 15                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 16  /

View created.

SQL> GRANT SELECT ON sys.exu9doso TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V10.0 Get Domain Index secondary objects (including tablespace)
SQL> REM
SQL> REM pi_obj = parent index object
SQL> REM c_obj = child secondary object
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10doso (
  2                  obj#, tablename, ownerid, tablespace) AS
  3          SELECT  pi_obj.obj#, c_obj.name, c_obj.owner#,
  4                  /* decode below needed for ConText IOTs - copied from */
  5                  /* USER_TABLES in catalog.sql */
  6                  decode(bitand(tab.property, 2151678048), 0, ts.name, null)
  7          FROM    sys.obj$ pi_obj, sys.obj$ c_obj, sys.user$ us2,
  8                  sys.secobj$ secobj, sys.tab$ tab, sys.ts$ ts
  9          WHERE   pi_obj.obj# = secobj.obj# AND       /* has secondary objects */
 10                  c_obj.obj# = secobj.secobj# AND /*object is secondary object */
 11                  c_obj.owner# = us2.user#  AND /* secondary obj is same owner */
 12                  c_obj.type# = 2 AND             /* Secondary Object is TABLE */
 13                  BITAND(c_obj.flags, 128) != 128 AND
 14                  secobj.secobj# = tab.obj# AND
 15                  tab.ts# = ts.ts# AND
 16                  (UID = 0 OR (UID = pi_obj.owner# AND UID = us2.user#) OR
 17                   EXISTS (
 18                      SELECT  role
 19                      FROM    sys.session_roles
 20                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 21  /

View created.

SQL> GRANT SELECT ON sys.exu10doso TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Domain index Partition Info
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9eip (
  2                  objid, bobjid, ownerid, pname, partno, parameters) AS
  3          SELECT  o$.obj#, ip$.bo#, o$.owner#, o$.subname, ip$.part#,
  4                  idpp$.parameters
  5          FROM    sys.obj$ o$, sys.indpart$ ip$, sys.indpart_param$ idpp$
  6          WHERE   o$.type# = 20 AND                       /* Partitioned Index */
  7                  ip$.obj# = o$.obj# AND
  8                  idpp$.obj# = o$.obj# AND
  9                  (UID IN (0, o$.owner#) OR
 10                   EXISTS (
 11                      SELECT  role
 12                      FROM    sys.session_roles
 13                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 14  /

View created.

SQL> GRANT SELECT ON sys.exu9eip TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Obtain all context binding info
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ctx (
  2                  ctxname, shmname, pkgname, objno) AS
  3          SELECT  o$.name, c$.schema, c$.package, o$.obj#
  4          FROM    sys.exu81obj o$, sys.context$ c$
  5          WHERE   o$.type# = 44 AND                                 /* context */
  6                  o$.obj# = c$.obj#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81ctx TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Obtain all application role binding info
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81approle (
  2                  role, schema, package) AS
  3          SELECT  u$.name, r$.schema, r$.package
  4          FROM    sys.user$ u$, sys.approle$ r$
  5          WHERE   u$.user# = r$.role#
  6  /

View created.

SQL> GRANT SELECT ON sys.exu81approle TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM TEST FOR TRUSTED ORACLE
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816tctx (
  2                  cols) AS
  3          SELECT  cols
  4          FROM    sys.tab$ t, sys.obj$ o
  5          WHERE   t.obj# = o.obj# AND
  6                  o.name = 'CONTEXT$' AND
  7                  o.type# = 2 AND
  8                  o.owner# = 0
  9  /

View created.

SQL> GRANT SELECT ON sys.exu816tctx TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM CREATE EXPORT VIEW
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816ctx (
  2                  ctxname, shmname, pkgname, flags) AS
  3          SELECT  o$.name, c$.schema, c$.package, c$.flags
  4          FROM    sys.exu81obj o$, sys.context$ c$
  5          WHERE   o$.type# = 44 AND
  6                  o$.obj# = c$.obj#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu816ctx TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM dependency order -- only used for ordering operators
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ordop (
  2                  dlevel, obj#, d_owner#) AS
  3          SELECT                                              /*+ no_filtering */
  4                  MAX(level), d1.d_obj#, d1.owner#
  5          FROM    (
  6                      SELECT                                      /*+ no_merge */
  7                              d.d_obj#, d.p_obj#, v.owner#
  8                      FROM    sys.dependency$ d,
  9                      (select obj#, owner# from sys.obj$ where type#=33) v
 10                      WHERE   v.obj# = d.d_obj#) d1
 11          CONNECT BY PRIOR d1.d_obj# = d1.p_obj#
 12          GROUP BY d1.d_obj#, d1.owner#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8ordop TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM dependency order -- only used for ordering views
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ord (
  2                  dlevel, obj#, d_owner#) AS
  3          SELECT                                              /*+ no_filtering */
  4                  MAX(level), d1.d_obj#, d1.owner#
  5          FROM    (
  6                      SELECT                                      /*+ no_merge */
  7                              d.d_obj#, d.p_obj#, v.owner#
  8                      FROM    sys.dependency$ d,
  9                      (select obj#, owner# from sys.obj$ where type#=4) v
 10                      WHERE   v.obj# = d.d_obj#) d1
 11          CONNECT BY PRIOR d1.d_obj# = d1.p_obj#
 12          GROUP BY d1.d_obj#, d1.owner#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8ord TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's dependency order of views
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ordu AS
  2          SELECT  *
  3          FROM    sys.exu8ord
  4          WHERE   d_owner# = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ordu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all views
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vew (
  2                  vobjid, vname, vtext, vowner, vownerid, vaudit, vcomment,
  3                  vcname, vlevel, property, defer, flags, oidlen, oidclause,
  4                  typeowner, typename, vlen, sqlver, underlen, underclause) AS
  5          SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
  6                  com$.comment$, c$.name, d$.dlevel, v$.property,
  7                  NVL(cd$.defer, 0), NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0),
  8                  vt$.oidtext, vt$.typeowner, vt$.typename, v$.textlength,
  9                  sv$.sql_version, NVL(vt$.undertextlength, 0), vt$.undertext
 10          FROM    sys.exu81obj o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
 11                  sys.con$ c$, sys.com$ com$, sys.exu8ord d$,
 12                  sys.typed_view$ vt$, sys.exu816sqv sv$
 13          WHERE   v$.obj# = o$.obj# AND
 14                  o$.owner# = u$.user# AND
 15                  o$.obj# = cd$.obj#(+) AND
 16                  cd$.con# = c$.con#(+) AND
 17                  o$.obj# = com$.obj#(+) AND
 18                  com$.col#(+) IS NULL AND
 19                  o$.obj# = d$.obj#(+) AND
 20                  v$.obj# = vt$.obj# (+) AND
 21                  o$.spare1 = sv$.version# (+)
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8vew TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views for incremental export: new or last export not valid
SQL> REM cannot use union as in exutabi because of long field
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vewi AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vew vw, sys.incexp i, sys.incvid v
  4          WHERE   i.name(+) = vw.vname AND
  5                  i.owner#(+) = vw.vownerid AND
  6                  v.expid < NVL(i.expid, 9999) AND
  7                  NVL(i.type#, 4) = 4
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vewi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vewc AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vew vw, sys.incexp i, sys.incvid v
  4          WHERE   vw.vname = i.name(+) AND
  5                  vw.vownerid = i.owner#(+) AND
  6                  NVL(i.type#, 4) = 4 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8vewc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vewu (
  2                  vobjid, vname, vtext, vowner, vownerid, vaudit, vcomment,
  3                  vcname, vlevel, property, defer, flags, oidlen, oidclause,
  4                  typeowner, typename, vlen, sqlver, underlen, underclause) AS
  5          SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
  6                  com$.comment$, c$.name, d$.dlevel, v$.property,
  7                  NVL(cd$.defer, 0), NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0),
  8                  vt$.oidtext, vt$.typeowner, vt$.typename, v$.textlength,
  9                  sv$.sql_version, NVL(vt$.undertextlength, 0), vt$.undertext
 10          FROM    sys.exu81obj o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
 11                  sys.con$ c$, sys.com$ com$, sys.exu8ordu d$,
 12                  sys.typed_view$ vt$, sys.exu816sqv sv$
 13          WHERE   v$.obj# = o$.obj# AND
 14                  o$.owner# = u$.user# AND
 15                  o$.obj# = cd$.obj#(+) AND
 16                  cd$.con# = c$.con#(+) AND
 17                  o$.obj# = com$.obj#(+) AND
 18                  com$.col#(+) IS NULL AND
 19                  o$.obj# = d$.obj#(+) AND
 20                  v$.obj# = vt$.obj#(+) AND
 21                  u$.user# = UID AND
 22                  o$.spare1 = sv$.version# (+)
 23  /

View created.

SQL> GRANT SELECT ON sys.exu8vewu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get dependency info for views that depend on other views
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vdpt (
  2                  parent, child, powner, cowner) AS
  3          SELECT  d$.p_obj#, d$.d_obj#, o1$.owner#, o2$.owner#
  4          FROM    sys.dependency$ d$, sys.obj$ o1$, sys.obj$ o2$, sys.view$ v1$,
  5                  sys.view$ v2$
  6          WHERE   d$.p_obj# = v1$.obj# AND
  7                  v1$.obj# = o1$.obj# AND
  8                  d$.d_obj# = v2$.obj# AND
  9                  v2$.obj# = o2$.obj#
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8vdpt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get dependency info for views that depend on other views
SQL> REM for current user
SQL> REM note, that even if user does not have privs, we need to
SQL> REM include views of other other users, to get the proper ordering.
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vdptu AS
  2          SELECT  *
  3          FROM    sys.exu8vdpt
  4  /

View created.

SQL> GRANT SELECT ON sys.exu8vdptu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get all information about a given view
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vinf (
  2                  vobjid, vname, vtext, vowner, vownerid, vaudit, vcomment,
  3                  vcname, property, defer, flags, oidlen, oidclause, typeowner,
  4                  typename, vlen) AS
  5          SELECT  o$.obj#, o$.name, v$.text, u$.name, o$.owner#, v$.audit$,
  6                  com$.comment$, c$.name, v$.property, NVL(cd$.defer, 0),
  7                  NVL(o$.flags, 0), NVL(vt$.oidtextlength, 0), vt$.oidtext,
  8                  vt$.typeowner, vt$.typename, v$.textlength
  9          FROM    sys.obj$ o$, sys.view$ v$, sys.user$ u$, sys.cdef$ cd$,
 10                  sys.con$ c$, sys.com$ com$, sys.typed_view$ vt$
 11          WHERE   v$.obj# = o$.obj# AND
 12                  o$.owner# = u$.user# AND
 13                  o$.obj# = cd$.obj#(+) AND
 14                  cd$.con# = c$.con#(+) AND
 15                  o$.obj# = com$.obj#(+) AND
 16                  com$.col#(+) IS NULL AND
 17                  v$.obj# = vt$.obj# (+)
 18  /

View created.

SQL> GRANT SELECT ON sys.exu8vinf TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views for incremental export: new or last export not valid
SQL> REM cannot use union as in exutabi because of long field
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vinfi AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vinf vw, sys.incexp i, sys.incvid v
  4          WHERE   i.name(+) = vw.vname AND
  5                  i.owner#(+) = vw.vownerid AND
  6                  v.expid < NVL(i.expid, 9999) AND
  7                  NVL(i.type#, 4) = 4
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vinfi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views for cumulative export: new, last export was inc or not valid
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vinfc AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vinf vw, sys.incexp i, sys.incvid v
  4          WHERE   vw.vname = i.name(+) AND
  5                  vw.vownerid = i.owner#(+) AND
  6                  NVL(i.type#, 4) = 4 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                  v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8vinfc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's view
SQL> REM
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vinfu AS
  2          SELECT  *
  3          FROM    sys.exu8vinf
  4          WHERE   vownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8vinfu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM get all information about views with no dependent views
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vnc AS
  2          SELECT  *
  3          FROM    sys.exu8vinf vf$
  4          WHERE   NOT EXISTS (
  5                      SELECT  0
  6                      FROM    sys.exu8vdpt vd$
  7                      WHERE   vd$.parent = vf$.vobjid)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vnc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views without dependent views for incremental export:
SQL> REM new or last export not valid
SQL> REM cannot use union as in exutabi because of long field
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vnci AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vnc vw, sys.incexp i, sys.incvid v
  4          WHERE   i.name(+) = vw.vname AND
  5                  i.owner#(+) = vw.vownerid AND
  6                  v.expid < NVL(i.expid, 9999) AND
  7                  NVL(i.type#, 4) = 4
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vnci TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM views without dependent views for cumulative export:
SQL> REM new, last export was inc or not valid
SQL> REM
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vncc AS
  2          SELECT  vw.*
  3          FROM    sys.exu8vnc vw, sys.incexp i, sys.incvid v
  4          WHERE   vw.vname = i.name(+) AND
  5                  vw.vownerid = i.owner#(+) AND
  6                  NVL(i.type#, 4) = 4 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                  v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8vncc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's views without dependent views
SQL> REM *** obsolete in 8.1.6 ***
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8vncu AS
  2          SELECT  *
  3          FROM    sys.exu8vinfu vf$
  4          WHERE   NOT EXISTS (
  5                      SELECT  0
  6                      FROM    sys.exu8vdptu vd$
  7                      WHERE   vd$.parent = vf$.vobjid)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8vncu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all synonyms (except those for TYPEs)
SQL> REM
SQL> REM Note: there can be synonyms for non existant objects
SQL> 
SQL> CREATE OR REPLACE VIEW exu9syn (
  2                  synnam, synnam2, syntab, tabown, tabnode, public$, synown,
  3                  synownid, tabownid, synobjno, syntime) AS
  4          SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
  5                  DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
  6                  s$.obj#, o$.ctime
  7          FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
  8          WHERE   s$.obj# = o$.obj# AND
  9                  o$.owner# = uo$.user# AND
 10                  s$.owner = us$.name(+) AND
 11                  NVL(s$.owner, 'SYS') NOT IN
 12                     ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
 13                      'XDB', 'SI_INFORMTN_SCHEMA', 'DIP',  'DBSNMP', 'EXFSYS',
 14                      'WMSYS','ORACLE_OCM', 'ANONYMOUS', 'XS$NULL') AND
 15                  NOT EXISTS (
 16                      SELECT obj#
 17                      FROM sys.obj$ ne
 18                      WHERE ne.name = s$.name AND
 19                            ne.owner# = us$.user# AND
 20                            ne.type# = 13 )
 21  /

View created.

SQL> GRANT SELECT ON sys.exu9syn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all PUBLIC TYPE Synonyms
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pts (
  2                  synnam, synnam2, syntab, tabown, tabnode, public$, synown,
  3                  synownid, tabownid, synobjno, syntime) AS
  4          SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
  5                  DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
  6                  s$.obj#, o$.ctime
  7          FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
  8          WHERE   s$.obj# = o$.obj# AND
  9                  o$.owner# = uo$.user# AND
 10                  s$.owner = us$.name(+) AND
 11                  NVL(s$.owner, 'SYS') NOT IN
 12                     ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
 13                      'XDB', 'SI_INFORMTN_SCHEMA', 'DIP',  'DBSNMP', 'EXFSYS',
 14                      'WMSYS','ORACLE_OCM', 'ANONYMOUS', 'XS$NULL') AND
 15                  o$.owner# = 1 AND
 16                  EXISTS (
 17                      SELECT obj#
 18                      FROM sys.obj$ e
 19                      WHERE e.name = s$.name AND
 20                            e.owner# = us$.user# AND
 21                            e.type# = 13 )
 22  /

View created.

SQL> GRANT SELECT ON sys.exu9pts TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's TYPE Synonyms (non PUBLIC)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9uts (
  2                  synnam, synnam2, syntab, tabown, tabnode, public$, synown,
  3                  synownid, tabownid, synobjno, syntime) AS
  4          SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
  5                  DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, us$.user#,
  6                  s$.obj#, o$.ctime
  7          FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
  8          WHERE   s$.obj# = o$.obj# AND
  9                  o$.owner# = uo$.user# AND
 10                  s$.owner = us$.name(+) AND
 11                  NVL(s$.owner, 'SYS') NOT IN
 12                     ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
 13                      'XDB', 'SI_INFORMTN_SCHEMA', 'DIP',  'DBSNMP', 'EXFSYS',
 14                      'WMSYS','ORACLE_OCM', 'ANONYMOUS', 'XS$NULL') AND
 15                  o$.owner# <> 1 AND
 16                  EXISTS (
 17                      SELECT obj#
 18                      FROM sys.obj$ e
 19                      WHERE e.name = s$.name AND
 20                            e.owner# = us$.user# AND
 21                            e.type# = 13 )
 22  /

View created.

SQL> GRANT SELECT ON sys.exu9uts TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all synonyms (pre 9.2 only)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8syn (
  2                  synnam, synnam2, syntab, tabown, tabnode, public$, synown,
  3                  synownid, syntime) AS
  4          SELECT  o$.name, o$.name, s$.name, s$.owner, s$.node,
  5                  DECODE(o$.owner#, 1, 1, 0), uo$.name, o$.owner#, o$.ctime
  6          FROM    sys.exu81obj o$, sys.syn$ s$, sys.user$ us$, sys.user$ uo$
  7          WHERE   s$.obj# = o$.obj# AND
  8                  o$.owner# = uo$.user# AND
  9                  s$.owner = us$.name(+) AND
 10                  NVL(s$.owner, 'SYS') NOT IN
 11                     ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS', 'LBACSYS',
 12                      'XDB', 'SI_INFORMTN_SCHEMA', 'DIP', 'DBSNMP', 'EXFSYS',
 13                      'WMSYS','ORACLE_OCM', 'ANONYMOUS', 'XS$NULL')
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8syn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM synonyms for incremental export: new or last export not valid
SQL> REM
SQL> REM obsolete in 9.2
SQL> CREATE OR REPLACE VIEW exu8syni AS
  2          SELECT  s.*
  3          FROM    sys.exu8syn s, sys.incexp i, sys.incvid v
  4          WHERE   s.synnam = i.name(+) AND
  5                  s.synownid = i.owner#(+) AND
  6                  NVL(i.type#, 5) = 5 AND
  7                  NVL(i.expid, 9999) > v.expid
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8syni TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM synonyms for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> REM obsolete in 9.2
SQL> CREATE OR REPLACE VIEW exu8sync AS
  2          SELECT  s.*
  3          FROM    sys.exu8syn s, sys.incexp i, sys.incvid v
  4          WHERE   s.synnam = i.name(+) AND
  5                  s.synownid = i.owner#(+) AND
  6                  NVL(i.type#, 5) = 5 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8sync TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM user's synnonyms (pre 9.2 only)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8synu AS
  2          SELECT  *
  3          FROM    sys.exu8syn
  4          WHERE   synownid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8synu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM user's synonyms (except those for TYPEs)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9synu AS
  2          SELECT  *
  3          FROM    sys.exu9syn
  4          WHERE   synownid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9synu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM user's synonyms (for TYPEs)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9utsu AS
  2          SELECT  *
  3          FROM    sys.exu9uts
  4          WHERE   synownid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9utsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM clustered tables' columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cco (
  2                  tname, towner, townerid, cluster$, tcolnam, seq, property) AS
  3          SELECT  t$.name, u$.name, t$.owner#, c$.name,
  4                  DECODE(BITAND(tc$.property, 1), 1, a$.name, tc$.name),
  5                  cc$.col#, tc$.property
  6          FROM    sys.obj$ t$, sys.tab$ tab$, sys.obj$ c$, sys.col$ tc$,
  7                  sys.col$ cc$, sys.user$ u$, sys.attrcol$ a$
  8          WHERE   t$.type# = 2 AND
  9                  t$.obj# = tab$.obj# AND
 10                  tab$.bobj# = cc$.obj# AND
 11                  tab$.obj# = tc$.obj# AND
 12                  tab$.bobj# = c$.obj# AND
 13                  cc$.segcol# = tc$.segcol# AND
 14                  t$.owner# = u$.user# AND
 15                  tc$.obj# = a$.obj# (+) AND
 16                  tc$.intcol# = a$.intcol# (+)
 17  /

View created.

SQL> GRANT SELECT ON sys.exu8cco TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's clustered tables' columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ccou AS
  2          SELECT  *
  3          FROM    sys.exu8cco
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8ccou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all clusters
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8clu (
  2                  objid, dobjid, owner, ownerid, name, tblspace, size$, tsno,
  3                  fileno, blockno, mtime, pctfree$, pctused$, initrans, maxtrans,
  4                  hashkeys, function, avgchn, degree, instances, cache, functxt,
  5                  funclen, single_table, sqlver, tflags) AS
  6          SELECT  o$.obj#, o$.dataobj#, u$.name, o$.owner#, o$.name, ts$.name,
  7                  NVL(c$.size$, -1), ts$.ts#, c$.file#, c$.block#, o$.mtime,
  8                  MOD(c$.pctfree$, 100), c$.pctused$, c$.initrans, c$.maxtrans,
  9                  NVL(c$.hashkeys, 0), NVL(c$.func, 1), NVL(c$.avgchn, -1),
 10                  NVL(c$.degree, 1), NVL(c$.instances, 1),
 11                  DECODE(BITAND(c$.flags, 8), 8, 1, 0), cd$.condition,
 12                  cd$.condlength, DECODE(BITAND(c$.flags, 65536), 65536, 1, 0),
 13                  sv$.sql_version, c$.flags
 14          FROM    sys.obj$ o$, sys.clu$ c$, sys.ts$ ts$, sys.user$ u$,
 15                  sys.cdef$ cd$, sys.exu816sqv sv$
 16          WHERE   o$.obj# = c$.obj# AND
 17                  c$.ts# = ts$.ts# AND
 18                  o$.owner# = u$.user# AND
 19                  cd$.obj#(+) = c$.obj# AND
 20                  o$.spare1 = sv$.version# (+)
 21  /

View created.

SQL> GRANT SELECT ON sys.exu8clu TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM clusters for incremental export: new or last export invalid
SQL> REM altered cluster is now exported because its tables are also exported
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8clui AS
  2          SELECT  c.*
  3          FROM    sys.exu8clu c, sys.incexp i, sys.incvid v
  4          WHERE   c.name = i.name(+) AND
  5                  c.ownerid = i.owner#(+) AND
  6                  (c.mtime > i.itime OR
  7                   NVL(i.expid, 9999) > v.expid)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8clui TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM clusters for cumulative export: last export was inc or new
SQL> REM altered cluster is now exported because its tables are also exported
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cluc AS
  2          SELECT  c.*
  3          FROM    sys.exu8clu c, sys.incexp i, sys.incvid v
  4          WHERE   c.name = i.name(+) AND
  5                  c.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 3) = 3 AND
  7                  (i.itime > NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) OR
  8                   c.mtime > i.itime OR
  9                   NVL(i.expid, 9999) > v.expid)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8cluc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's clusters
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cluu AS
  2          SELECT  *
  3          FROM    sys.exu8clu
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8cluu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all storage parameters
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9sto (
  2                  ownerid, tsno, fileno, blockno, iniext, sext, minext, maxext,
  3                  pctinc, blocks, lists, groups, extents, pcache, ts_type,
  4                  tsname, isonline, blocksize, hscompress, maxsize) AS
  5          SELECT  s$.user#, s$.ts#, s$.file#, s$.block#, s$.iniexts, s$.extsize,
  6                  s$.minexts, s$.maxexts, s$.extpct, s$.blocks,
  7                  DECODE(BITAND(s$.spare1, 2097152), 2097152, NVL(s$.lists, 0),
  8                         DECODE(s$.lists, NULL, 1, 65535, 1, lists)),
  9                  DECODE(BITAND(s$.spare1, 2097152), 2097152, NVL(s$.groups, 0),
 10                         DECODE(s$.groups, NULL, 1, 65535, 1, groups)),
 11                  extents,
 12                  DECODE(s$.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE'),
 13                  DECODE(BITAND(s$.spare1, 1), 1,
 14                         DECODE(BITAND(ts$.flags, 3), 0, 0, 1, 1, 2, 2, -1),
 15                         0, -1, -1),
 16                  ts$.name, DECODE(ts$.online$, 1, 1, 4, 1, 0),
 17                  NVL(ts$.blocksize, 2048), s$.spare1,
 18                  DECODE(BITAND(s$.spare1,4194304), 4194304, s$.bitmapranges, 0)
 19          FROM    sys.seg$ s$, sys.ts$ ts$
 20          WHERE   s$.ts# = ts$.ts#(+)
 21  /

View created.

SQL> GRANT SELECT ON sys.exu9sto TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM storage parameters for current user's segments
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9stou AS
  2          SELECT  *
  3          FROM    sys.exu9sto
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9stou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 storage parameter info adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8sto (
  2                  ownerid, tsno, fileno, blockno, iniext, sext, minext, maxext,
  3                  pctinc, blocks, lists, groups, extents, pcache, ts_type,
  4                  tsname, isonline) AS
  5          SELECT  s.ownerid, s.tsno, s.fileno, s.blockno,
  6                  CEIL(s.iniext * (s.blocksize / (
  7                      SELECT  t$.blocksize
  8                      FROM    sys.ts$ t$
  9                      WHERE   t$.ts# = 0))),
 10                  CEIL(s.sext * (s.blocksize / (
 11                      SELECT  t$.blocksize
 12                      FROM    sys.ts$ t$
 13                      WHERE   t$.ts# = 0))),
 14                  s.minext, s.maxext, s.pctinc,
 15                  CEIL(s.blocks * (s.blocksize / (
 16                      SELECT  t$.blocksize
 17                      FROM    sys.ts$ t$
 18                      WHERE   t$.ts# = 0))),
 19                  s.lists, s.groups, s.extents, s.pcache, s.ts_type, s.tsname,
 20                  s.isonline
 21          FROM    sys.exu9sto s
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8sto TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 curr user's storage param info adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8stou AS
  2          SELECT  *
  3          FROM    sys.exu8sto
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8stou TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM find out correct size of second extent using uet$
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tne (
  2                  tsno, fileno, blockno, length) AS
  3          SELECT  ts#, segfile#, segblock#, length
  4          FROM    sys.uet$
  5          WHERE   ext# = 1
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9tne TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 2nd extent info adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tne (
  2                  tsno, fileno, blockno, length) AS
  3          SELECT  e.tsno, e.fileno, e.blockno,
  4                  CEIL(e.length * ((
  5                      SELECT  t1$.blocksize
  6                      FROM    sys.ts$ t1$
  7                      WHERE   t1$.ts# = e.tsno) / (
  8                      SELECT  t0$.blocksize
  9                      FROM    sys.ts$ t0$
 10                      WHERE   t0$.ts# = 0)))
 11          FROM    sys.exu9tne e
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8tne TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM find out correct size of second extent using x$ktfbue (for bitmapped TS)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tneb (
  2                  tsno, fileno, blockno, length) AS
  3          SELECT  ktfbuesegtsn, ktfbuesegfno, ktfbuesegbno, ktfbueblks
  4          FROM    sys.x$ktfbue
  5          WHERE   ktfbueextno = 1
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9tneb TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 2nd extent info adjusted for bitmapped TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tneb (
  2                  tsno, fileno, blockno, length) AS
  3          SELECT  e.tsno, e.fileno, e.blockno,
  4                  CEIL(e.length * ((
  5                      SELECT  t1$.blocksize
  6                      FROM    sys.ts$ t1$
  7                      WHERE   t1$.ts# = e.tsno) / (
  8                      SELECT  t0$.blocksize
  9                      FROM    sys.ts$ t0$
 10                      WHERE   t0$.ts# = 0)))
 11          FROM    sys.exu9tneb e
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8tneb TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all tablespaces
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tbs (
  2                  id, owner, name, isonline, content, iniext, sext, pctinc,
  3                  minext, maxext, minlen, deflog, ext_mgt, alloc_type, blocksize,
  4                  maxsize)
  5        AS
  6          SELECT  ts$.ts#, 'SYSTEM', ts$.name,
  7                  DECODE(ts$.online$, 1, 'ONLINE', 4, 'ONLINE', 'OFFLINE'),
  8                  DECODE(ts$.contents$, 0, 'PERMANENT', 1, 'TEMPORARY'),
  9                  ts$.dflinit, ts$.dflincr, ts$.dflextpct, ts$.dflminext,
 10                  ts$.dflmaxext, NVL(ts$.dflminlen, 0), ts$.dflogging,
 11                  ts$.bitmapped, ts$.flags, ts$.blocksize,
 12                  decode(bitand(ts$.flags, 4096), 4096, ts$.affstrength, 0)
 13          FROM    sys.ts$ ts$
 14          WHERE   ts$.online$ IN (1, 2, 4) AND
 15                  ts$.ts# != 0 AND
 16                  bitand(ts$.flags,2048) !=2048
 17  /

View created.

SQL> GRANT SELECT ON sys.exu9tbs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre V9.0 tablespaces adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tbs (
  2                  id, owner, name, isonline, content, iniext, sext, pctinc,
  3                  minext, maxext, minlen, deflog, ext_mgt, alloc_type) AS
  4          SELECT  t.id, t.owner, t.name, t.isonline, t.content,
  5                  CEIL(t.iniext * (t.blocksize / (
  6                      SELECT  t$.blocksize
  7                      FROM    sys.ts$ t$
  8                      WHERE   t$.ts# = 0))),
  9                  CEIL(t.sext * (t.blocksize / (
 10                      SELECT  t$.blocksize
 11                      FROM    sys.ts$ t$
 12                      WHERE   t$.ts# = 0))),
 13                  t.pctinc, t.minext, t.maxext,
 14                  CEIL(t.minlen * (t.blocksize / (
 15                      SELECT  t$.blocksize
 16                      FROM    sys.ts$ t$
 17                      WHERE   t$.ts# = 0))),
 18                  t.deflog,
 19                  CEIL(t.ext_mgt * (t.blocksize / (
 20                      SELECT  t$.blocksize
 21                      FROM    sys.ts$ t$
 22                      WHERE   t$.ts# = 0))),
 23                  t.alloc_type
 24          FROM    sys.exu9tbs t
 25  /

View created.

SQL> GRANT SELECT ON sys.exu81tbs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all tablespaces for 8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tbs (
  2                  id, owner, name, isonline, content, iniext, sext, pctinc,
  3                  minext, maxext, deflog) AS
  4          SELECT  tbs$.id, tbs$.owner, tbs$.name, tbs$.isonline, tbs$.content,
  5                  tbs$.iniext, tbs$.sext, tbs$.pctinc, tbs$.minext, tbs$.maxext,
  6                  tbs$.deflog
  7          FROM    sys.exu81tbs tbs$
  8          WHERE   tbs$.ext_mgt = 0
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tbs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM tablespace quotas
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tsq(
  2                  tsname, tsid, uname, userid, maxblocks, blocksize) AS
  3          SELECT  t$.name, q$.ts#, u$.name, u$.user#, q$.maxblocks, t$.blocksize
  4          FROM    sys.ts$ t$, sys.tsq$ q$, sys.user$ u$
  5          WHERE   q$.user# = u$.user# AND
  6                  q$.ts# = t$.ts# AND
  7                  q$.maxblocks != 0 AND
  8                  t$.online$ IN (1, 2, 4)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu9tsq TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 tablespace quotas adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tsq(
  2                  tsname, tsid, uname, userid, maxblocks) AS
  3          SELECT  q.tsname, q.tsid, q.uname, q.userid,
  4                  CEIL(q.maxblocks * (q.blocksize / (
  5                      SELECT  t$.blocksize
  6                      FROM    sys.ts$ t$
  7                      WHERE   t$.ts# = 0)))
  8          FROM    sys.exu9tsq q
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tsq TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM tablespace names
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tsn (
  2                  tsname, tsid, tsflags) AS
  3          SELECT  t$.name, t$.ts#, t$.flags
  4          FROM    sys.ts$ t$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8tsn TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 1. files from user mapped tablespaces
SQL> REM 2. bitmapped tablespaces (derived from dba_data_files)
SQL> REM 3. bitmapped temporary tablespaces (derived from dba_temp_files)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9fil(
  2                  fname, fsize, maxextend, inc, tsid, bitmap) AS
  3          SELECT  v$.name, f$.blocks, f$.maxextend, f$.inc, f$.ts#, 0
  4          FROM    sys.file$ f$, sys.v$dbfile v$
  5          WHERE   f$.file# = v$.file# AND
  6                  f$.spare1 IS NULL
  7        UNION ALL
  8          SELECT  /* ignore hint, perf problem - ordered use_nl(f$) use_nl(hc) */
  9                  v$.name, DECODE(hc.ktfbhccval, 0, hc.ktfbhcsz, -1),
 10                  DECODE(hc.ktfbhccval, 0, hc.ktfbhcmaxsz, NULL),
 11                  DECODE(hc.ktfbhccval, 0, hc.ktfbhcinc, NULL), f$.ts#,
 12                  ts$.bitmapped
 13          FROM    sys.v$dbfile v$, sys.file$ f$, sys.x$ktfbhc hc, sys.ts$ ts$
 14          WHERE   v$.file# = f$.file# AND
 15                  f$.spare1 IS NOT NULL AND
 16                  f$.file# = hc.ktfbhcafno AND
 17                  hc.ktfbhctsn(+) = ts$.ts#
 18        UNION ALL
 19          SELECT                                       /*+ ordered use_nl(hc) +*/
 20                  v$.fnnam, DECODE(hc.ktfthccval, 0, hc.ktfthcsz, -1),
 21                  DECODE(hc.ktfthccval, 0, hc.ktfthcmaxsz, NULL),
 22                  DECODE(hc.ktfthccval, 0, hc.ktfthcinc, NULL), ts$.ts#,
 23                  ts$.bitmapped
 24          FROM    sys.x$kccfn v$, sys.x$ktfthc hc, sys.ts$ ts$
 25          WHERE   v$.fntyp = 7 AND
 26                  v$.fnnam IS NOT NULL AND
 27                  v$.fnfno = hc.ktfthctfno AND
 28                  hc.ktfthctsn(+) = ts$.ts#
 29  /

View created.

SQL> GRANT SELECT ON sys.exu9fil TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 file info adjusted for tablespace specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81fil(
  2                  fname, fsize, maxextend, inc, tsid, bitmap) AS
  3          SELECT  f.fname,
  4                  NVL2(f.fsize, DECODE(f.fsize, -1, -1,
  5                      CEIL(f.fsize * ((
  6                      SELECT  t1$.blocksize
  7                      FROM    sys.ts$ t1$
  8                      WHERE   t1$.ts# = f.tsid) / (
  9                      SELECT  t0$.blocksize
 10                      FROM    sys.ts$ t0$
 11                      WHERE   t0$.ts# = 0)))), NULL),
 12                  NVL2(f.maxextend, CEIL(f.maxextend * ((
 13                      SELECT  t1$.blocksize
 14                      FROM    sys.ts$ t1$
 15                      WHERE   t1$.ts# = f.tsid) / (
 16                      SELECT  t0$.blocksize
 17                      FROM    sys.ts$ t0$
 18                      WHERE   t0$.ts# = 0))), NULL),
 19                  NVL2(f.inc, CEIL(f.inc * ((
 20                      SELECT  t1$.blocksize
 21                      FROM    sys.ts$ t1$
 22                      WHERE   t1$.ts# = f.tsid) / (
 23                      SELECT  t0$.blocksize
 24                      FROM    sys.ts$ t0$
 25                      WHERE t0$.ts# = 0))), NULL),
 26                  f.tsid, f.bitmap
 27          FROM    sys.exu9fil f
 28  /

View created.

SQL> GRANT SELECT ON sys.exu81fil TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all files for 8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8fil (
  2                  fname, fsize, maxextend, inc, tsid) AS
  3          SELECT  fname, fsize, maxextend, inc, tsid
  4          FROM    sys.exu81fil
  5          WHERE   bitmap = 0
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8fil TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all 10.* database links (new columns passwordx and authpwdx in link$)
SQL> REM
SQL> 
SQL> -- If a user
SQL> --   (a) owns the object or
SQL> --   (b) is SYS or
SQL> --   (c) has EXP_FULL_DATABASE role
SQL> -- the user can see all metadata for the object including passwords.
SQL> CREATE OR REPLACE VIEW exu10lnk (
  2                  owner, ownerid, name, user$, passwd, host, public$,
  3                  auth_user, auth_passwd, flag, passwdx, auth_passwdx) AS
  4          SELECT  DECODE(l$.owner#, 1, 'SYSTEM', u$.name), l$.owner#, l$.name,
  5                  l$.userid, l$.password, l$.host, DECODE(l$.owner#, 1, 1, 0),
  6                  l$.authusr, l$.authpwd, l$.flag, l$.passwordx, l$.authpwdx
  7          FROM    sys.user$ u$, sys.link$ l$
  8          WHERE   u$.user# = l$.owner# AND
  9                  (SYS_CONTEXT('USERENV','CURRENT_USERID') IN (u$.user#, 0) OR
 10                   EXISTS ( SELECT *
 11                            FROM   session_roles
 12                            WHERE  role='EXP_FULL_DATABASE' ))
 13  /

View created.

SQL> GRANT SELECT ON sys.exu10lnk TO EXP_FULL_DATABASE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 10.* current user's database links'
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10lnku AS
  2          SELECT  *
  3          FROM    sys.exu10lnk
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10lnku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For 9.* the database links dont retrieve anything (1=2)
SQL> REM
SQL> REM  When they do 10.*(Exp) to 9.*(Imp), dblinks are created on 9.*
SQL> REM  They need to recreate them on the 9.* database after import
SQL> Rem
SQL> 
SQL> CREATE OR REPLACE VIEW exu9lnk (
  2                  owner, ownerid, name, user$, passwd, host, public$,
  3                  auth_user, auth_passwd, flag) AS
  4          SELECT  owner, ownerid, name, user$, passwd, host, public$,
  5                  auth_user, auth_passwd, flag
  6          FROM    sys.exu10lnk
  7          WHERE 1 = 2;

View created.

SQL> /

View created.

SQL> GRANT SELECT ON sys.exu9lnk TO EXP_FULL_DATABASE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM current user's database links'
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lnku AS
  2          SELECT  *
  3          FROM    sys.exu9lnk
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9lnku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM all database links
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lnk (
  2                  owner, ownerid, name, user$, passwd, host, public$) AS
  3          SELECT  owner, ownerid, name, user$, passwd, host, public$
  4          FROM    sys.exu9lnk;

View created.

SQL> /

View created.

SQL> GRANT SELECT ON sys.exu8lnk TO EXP_FULL_DATABASE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.* version
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lnku AS
  2          SELECT  *
  3          FROM    sys.exu8lnk
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8lnku TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM all rollback segments
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rsg (
  2                  owner, name, space$, tsno, fileno , blockno, minext, public$)
  3        AS
  4          SELECT  'SYSTEM', r$.name, ts$.name, r$.ts#, r$.file#, r$.block#,
  5                  s$.minexts, DECODE(r$.user#, 1, 1, 0)
  6          FROM    sys.ts$ ts$, sys.undo$ r$, sys.seg$ s$
  7          WHERE   r$.status$ != 1 AND
  8                  r$.file# = s$.file# AND
  9                  r$.block# = s$.block# AND
 10                  s$.ts# = ts$.ts# AND
 11                  r$.ts# = s$.ts# AND
 12                  r$.us# != 0 AND
 13                  BITAND(ts$.flags, 16) = 0                 /* undo tablespace */
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8rsg TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on deleted objects EXCEPT snapshots, snapshot logs
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8del (
  2                  owner, name, type, type#) AS
  3          SELECT  u$.name, i$.name,
  4                  DECODE(i$.type#, 2, 'TABLE', 3, 'CLUSTER', 4, 'VIEW',
  5                         5, 'SYNONYM', 6, 'SEQUENCE', 7, 'PROCEDURE', 8,
  6                         'FUNCTION', 9, 'PACKAGE', 12, 'TRIGGER', 11,
  7                         'PACKAGE BODY', 28, 'JAVA SOURCE', 29, 'JAVA CLASS', 30,
  8                         'JAVA RESOURCE', 32, 'INDEXTYPE', 33, 'OPERATOR', 43,
  9                         'DIMENSION', 56, 'JAVA DATA'), i$.type#
 10          FROM    sys.incexp i$, sys.user$ u$, sys.obj$ o$
 11          WHERE   i$.owner# = u$.user# AND
 12                  i$.type# NOT IN (99, 98) AND
 13                  i$.owner# = o$.owner# (+) AND /*"+ 0" for sort-merge outer jn*/
 14                  i$.name = o$.name (+) AND
 15                  i$.type# = o$.type# (+) AND
 16                  o$.owner# IS NULL AND
 17                  o$.linkname IS NULL
 18  /

View created.

SQL> GRANT SELECT ON sys.exu8del TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on sequence number
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8seq (
  2                  owner, ownerid, name, objid, curval, minval, maxval, incr,
  3                  cache, cycle, order$, audt) AS
  4          SELECT  u.name, u.user#, o.name, o.obj#, s.highwater, s.minvalue,
  5                  s.maxvalue, s.increment$, s.cache, s.cycle#, s.order$, s.audit$
  6          FROM    sys.exu81obj o, sys.user$ u, sys.seq$ s
  7          WHERE   o.obj# = s.obj# AND
  8                  o.owner# = u.user#
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8seq TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8sequ AS
  2          SELECT  *
  3          FROM    sys.exu8seq
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8sequ TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM contraints on table
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8con (
  2                  objid, owner, ownerid, tname, type, cname, cno, condition,
  3                  condlength, enabled, defer, sqlver, iname, idxsysgend) AS
  4          SELECT  o.obj#, u.name, c.owner#, o.name, cd.type#, c.name, c.con#,
  5                  cd.condition, cd.condlength, NVL(cd.enabled, 0),
  6                  NVL(cd.defer, 0), sv.sql_version, NVL(oi.name, ''),
  7                  DECODE(BITAND(NVL(oi.flags, 0), 4), 4, 1, 0)
  8          FROM    sys.obj$ o, sys.user$ u, sys.con$ c, sys.cdef$ cd,
  9                  sys.exu816sqv sv, sys.obj$ oi
 10          WHERE   u.user# = c.owner# AND
 11                  o.obj# = cd.obj# AND
 12                  cd.con# = c.con# AND
 13                  cd.spare1 = sv.version# (+) AND
 14                  cd.enabled = oi.obj# (+) AND
 15                  NOT EXISTS (
 16                      SELECT  owner, name
 17                      FROM    sys.noexp$ ne
 18                      WHERE   ne.owner = u.name AND
 19                              ne.name = o.name AND
 20                              ne.obj_type = 2)
 21  /

View created.

SQL> GRANT SELECT ON sys.exu8con TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8conu AS
  2          SELECT  *
  3          FROM    sys.exu8con
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8conu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints
SQL> REM *** The reftyp field is trouble - meant to return any REF type associated
SQL> REM *** with the constraint, previously it would allow returning multiple rows
SQL> REM *** per constraint if there were multiple REFs in the target object (and
SQL> REM *** cannot be fixed since there is no correlation between the cdef$/ccol$
SQL> REM *** and refcon$ col/intcol numbers).
SQL> REM *** For 9.0.2, the reftyp value has been altered to only return the needed
SQL> REM *** pkREF type (4) if the target has a sole pkREF (supports older Exports)
SQL> REM *** and the new refconstr boolean has been added to support the 9.0.2 code
SQL> REM *** indicating a REF constraint (references a sOID or pkOID).
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ref (
  2                  objid, owner, ownerid, tname, rowner, rtname, cname, cno, rcno,
  3                  action, enabled, defer, property, robjid, rownerid, reftype,
  4                  refconstr, type) AS
  5          SELECT  o.obj#, u.name, c.owner#, o.name, ru.name, ro.name, c.name,
  6                  c.con#, cd.rcon#, NVL(cd.refact, 0), NVL(cd.enabled, 0),
  7                  NVL(cd.defer, 0), NVL(t.property, 0), cd.robj#, ro.owner#,
  8                  DECODE((SELECT COUNT (*)
  9                          FROM   sys.refcon$ rf
 10                          WHERE  rf.obj# = o.obj# AND
 11                                 BITAND(rf.reftyp, 4) = 4),
 12                         1, 4, 0),            /* if 1, EXURUID, else not a REF */
 13                  DECODE((SELECT COUNT (*)
 14                          FROM   sys.ccol$ cc, sys.col$ c
 15                          WHERE  cc.con# = cd.con# AND
 16                                 c.obj# = cc.obj# AND
 17                                 c.intcol# = cc.intcol# AND
 18                                 BITAND(c.property, 2097152)= 2097152), /* REA */
 19                         0, 0, 1),                /* if none, FALSE, else TRUE */
 20                  o.type#
 21          FROM    sys.user$ u, sys.user$ ru, sys.exu81obj o, sys.obj$ ro,
 22                  sys.con$ c, sys.cdef$ cd, sys.tab$ t
 23          WHERE   u.user# = c.owner# AND
 24                  o.obj# = cd.obj# AND
 25                  ro.obj# = cd.robj# AND
 26                  cd.con# = c.con# AND
 27                  cd.type# = 4 AND
 28                  ru.user# = ro.owner# AND
 29                  o.obj# = t.obj# (+) AND
 30                  u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 31                                 'LBACSYS', 'XDB',  'SI_INFORMTN_SCHEMA',
 32                                 'DIP', 'DBSNMP', 'EXFSYS', 'WMSYS','ORACLE_OCM',
 33                                 'ANONYMOUS', 'XS$NULL') AND
 34                  NOT EXISTS (
 35                      SELECT  name, owner, obj_type
 36                      FROM    sys.noexp$ ne
 37                      WHERE   ne.owner = u.name AND
 38                              ne.name = o.name  AND
 39                              ne.obj_type = 2)
 40  /

View created.

SQL> GRANT SELECT ON sys.exu8ref TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8refu AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8refu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for incremental and cumulative export
SQL> REM for tables just exported, i.expid will be greater than v.expid
SQL> REM as v.expid is incremented only at the end of the incremental export
SQL> REM but i.expid is incremented when the table is exported.
SQL> REM USED ONLY WHEN RECORD = YES
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8refic AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# = 2)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8refic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for incremental export
SQL> REM exutabi will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9refi AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9refi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for cumulative export, assuming
SQL> REM exutabc will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9refc AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9refc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for incremental export
SQL> REM exutabi will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81refi AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81refi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints for cumulative export, assuming
SQL> REM exutabc will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81refc AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81refc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 referential constraints for incremental export
SQL> REM exutabi will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8refi AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8refi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 referential constraints for cumulative export, assuming
SQL> REM exutabc will return the correct table name because RECORD = NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8refc AS
  2          SELECT  *
  3          FROM    sys.exu8ref
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8refc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM contraint column list
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ccl (
  2                  ownerid, ownername, cno, colname, colno, intcol, property) AS
  3          SELECT  o.owner#, u.name, cc.con#,
  4                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
  5                  cc.pos#, cc.intcol#, c.property
  6          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
  7                  sys.user$ u
  8          WHERE   o.obj# = cc.obj# AND
  9                  c.obj# = cc.obj# AND
 10                  cc.intcol# = c.intcol# AND
 11                  o.owner# = u.user# AND
 12                  c.obj# = at.obj# (+) AND
 13                  c.intcol# = at.intcol# (+) AND
 14                  NOT EXISTS (
 15                      SELECT  owner, name
 16                      FROM    sys.noexp$ ne
 17                      WHERE   ne.owner = u.name AND
 18                              ne.name = o.name AND
 19                              ne.obj_type = 2)
 20  /

View created.

SQL> GRANT SELECT ON sys.exu8ccl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8cclu AS
  2          SELECT  *
  3          FROM    sys.exu8ccl
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8cclu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8cclo (
  2                  ownerid, cno, colname, colno, property) AS
  3          SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property
  4          FROM    sys.exu8ccl a, sys.con$ b , sys.cdef$ c
  5          WHERE   b.owner# = UID AND
  6                  b.con# = c.con# AND
  7                  c.rcon# = a.cno
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8cclo TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 9.0.2 regular, nested table setid, and REF constraint columns/attributes.
SQL> REM
SQL> REM The only known way to get the col/attr name for the SETID column
SQL> REM of a nested table is to locate the column with the same col#, intcol# -1,
SQL> REM and segcol# = 0.
SQL> REM
SQL> REM Inclusion of the exploded PRIMARY KEY col/attr names in the constraint
SQL> REM column attribute names for pkREFs requires deriving the actual REF column/
SQL> REM attribute name via the comparison of the constraint column intcol(s) with
SQL> REM the intcol number(s) list data in coltype$.
SQL> REM Comparing against only the first intcol number(s) list datum assures that
SQL> REM only 1 row will be retrieved when referencing a compound PRIMARY KEY (which
SQL> REM will have multiple constraint columns).
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ccl (
  2                  ownerid, ownername, cno, colname, colno, intcol, property) AS
  3          SELECT  o.owner#, u.name, cc.con#,
  4                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
  5                  cc.pos#, c.intcol#, c.property
  6          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
  7                  sys.user$ u
  8          WHERE   o.obj# = cc.obj# AND
  9                  o.owner# = u.user# AND
 10                  c.obj# = cc.obj# AND
 11                  c.intcol# = cc.intcol# AND
 12                  BITAND(c.property, 2097152) = 0 AND               /* Not REA */
 13                  BITAND(c.property, 1024) = 0 AND                /* Not SETID */
 14                  c.obj# = at.obj# (+) AND
 15                  c.intcol# = at.intcol# (+) AND
 16                  NOT EXISTS (
 17                      SELECT  owner, name
 18                      FROM    sys.noexp$ ne
 19                      WHERE   ne.owner = u.name AND
 20                              ne.name = o.name AND
 21                              ne.obj_type = 2)
 22   UNION /* Nested Tables - SETID column */
 23          SELECT  o.owner#, u.name, cc.con#,
 24                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
 25                  cc.pos#, c.intcol#, c.property
 26          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
 27                  sys.user$ u, sys.col$ cn
 28          WHERE   o.obj# = cc.obj# AND
 29                  o.owner# = u.user# AND
 30                  cn.obj# = cc.obj# AND
 31                  cn.intcol# = cc.intcol# AND
 32                  BITAND(cn.property, 1024) = 1024 AND                /* SETID */
 33                  c.obj# = cc.obj# AND
 34                  c.col# = cn.col# AND
 35                  c.intcol# = (cn.intcol# - 1) AND
 36                  c.segcol# = 0 AND
 37                  c.obj# = at.obj# (+) AND
 38                  c.intcol# = at.intcol# (+) AND
 39                  NOT EXISTS (
 40                      SELECT  owner, name
 41                      FROM    sys.noexp$ ne
 42                      WHERE   ne.owner = u.name AND
 43                              ne.name = o.name AND
 44                              ne.obj_type = 2)
 45   UNION /* REFs - REF attribute columns */
 46          SELECT  o.owner#, u.name, cc.con#,
 47                  DECODE(BITAND(rc.property, 1), 1, at.name, rc.name),
 48                  cc.pos#, rc.intcol#, rc.property
 49          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
 50                  sys.user$ u, sys.coltype$ ct, sys.col$ rc
 51          WHERE   o.obj# = cc.obj# AND
 52                  o.owner# = u.user# AND
 53                  c.obj# = cc.obj# AND
 54                  c.intcol# = cc.intcol# AND
 55                  BITAND(c.property, 2097152) = 2097152 AND             /* REA */
 56                  ct.obj# = cc.obj# AND
 57                  ct.col# = cc.col# AND
 58                  UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTRB(ct.intcol#s, 1,2), 3) =
 59                    cc.intcol# AND            /* first list col# = constr col# */
 60                  rc.obj# = cc.obj# AND
 61                  rc.intcol# = ct.intcol# AND
 62                  rc.obj# = at.obj# (+) AND
 63                  rc.intcol# = at.intcol# (+) AND
 64                  NOT EXISTS (
 65                      SELECT  owner, name
 66                      FROM    sys.noexp$ ne
 67                      WHERE   ne.owner = u.name AND
 68                              ne.name = o.name AND
 69                              ne.obj_type = 2)
 70  /

View created.

SQL> GRANT SELECT ON sys.exu9ccl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9cclu AS
  2          SELECT  *
  3          FROM    sys.exu9ccl
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9cclu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9cclo (
  2                  ownerid, cno, colname, colno, property) AS
  3          SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property
  4          FROM    sys.exu9ccl a, sys.con$ b , sys.cdef$ c
  5          WHERE   b.owner# = UID AND
  6                  b.con# = c.con# AND
  7                  c.rcon# = a.cno
  8  /

View created.

SQL> GRANT SELECT ON sys.exu9cclo TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 10i version of ccl* views
SQL> REM
SQL> REM 9.0.2 regular, nested table setid, and REF constraint columns/attributes.
SQL> REM
SQL> REM The only known way to get the col/attr name for the SETID column
SQL> REM of a nested table is to locate the column with the same col#, intcol# -1,
SQL> REM and segcol# = 0.
SQL> REM
SQL> REM Inclusion of the exploded PRIMARY KEY col/attr names in the constraint
SQL> REM column attribute names for pkREFs requires deriving the actual REF column/
SQL> REM attribute name via the comparison of the constraint column intcol(s) with
SQL> REM the intcol number(s) list data in coltype$.
SQL> REM Comparing against only the first intcol number(s) list datum assures that
SQL> REM only 1 row will be retrieved when referencing a compound PRIMARY KEY (which
SQL> REM will have multiple constraint columns).
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10ccl (
  2                  ownerid, ownername, cno, colname, colno, intcol, property,
  3                  nolog) AS
  4          SELECT  o.owner#, u.name, cc.con#,
  5                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
  6                  cc.pos#, c.intcol#, c.property,
  7                  DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
  8          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
  9                  sys.user$ u
 10          WHERE   o.obj# = cc.obj# AND
 11                  o.owner# = u.user# AND
 12                  c.obj# = cc.obj# AND
 13                  c.intcol# = cc.intcol# AND
 14                  BITAND(c.property, 2097152) = 0 AND               /* Not REA */
 15                  BITAND(c.property, 1024) = 0 AND                /* Not SETID */
 16                  c.obj# = at.obj# (+) AND
 17                  c.intcol# = at.intcol# (+) AND
 18                  NOT EXISTS (
 19                      SELECT  owner, name
 20                      FROM    sys.noexp$ ne
 21                      WHERE   ne.owner = u.name AND
 22                              ne.name = o.name AND
 23                              ne.obj_type = 2)
 24   UNION /* Nested Tables - SETID column */
 25          SELECT  o.owner#, u.name, cc.con#,
 26                  DECODE(BITAND(c.property, 1), 1, at.name, c.name),
 27                  cc.pos#, c.intcol#, c.property,
 28                  DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
 29          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
 30                  sys.user$ u, sys.col$ cn
 31          WHERE   o.obj# = cc.obj# AND
 32                  o.owner# = u.user# AND
 33                  cn.obj# = cc.obj# AND
 34                  cn.intcol# = cc.intcol# AND
 35                  BITAND(cn.property, 1024) = 1024 AND                /* SETID */
 36                  c.obj# = cc.obj# AND
 37                  c.col# = cn.col# AND
 38                  c.intcol# = (cn.intcol# - 1) AND
 39                  c.segcol# = 0 AND
 40                  c.obj# = at.obj# (+) AND
 41                  c.intcol# = at.intcol# (+) AND
 42                  NOT EXISTS (
 43                      SELECT  owner, name
 44                      FROM    sys.noexp$ ne
 45                      WHERE   ne.owner = u.name AND
 46                              ne.name = o.name AND
 47                              ne.obj_type = 2)
 48   UNION /* REFs - REF attribute columns */
 49          SELECT  o.owner#, u.name, cc.con#,
 50                  DECODE(BITAND(rc.property, 1), 1, at.name, rc.name),
 51                  cc.pos#, rc.intcol#, rc.property,
 52                  DECODE(BITAND(cc.spare1, 1), 1, 1, 0)
 53          FROM    sys.obj$ o, sys.col$ c, sys.ccol$ cc, sys.attrcol$ at,
 54                  sys.user$ u, sys.coltype$ ct, sys.col$ rc
 55          WHERE   o.obj# = cc.obj# AND
 56                  o.owner# = u.user# AND
 57                  c.obj# = cc.obj# AND
 58                  c.intcol# = cc.intcol# AND
 59                  BITAND(c.property, 2097152) = 2097152 AND             /* REA */
 60                  ct.obj# = cc.obj# AND
 61                  ct.col# = cc.col# AND
 62                  UTL_RAW.CAST_TO_BINARY_INTEGER(SUBSTRB(ct.intcol#s, 1,2), 3) =
 63                    cc.intcol# AND            /* first list col# = constr col# */
 64                  rc.obj# = cc.obj# AND
 65                  rc.intcol# = ct.intcol# AND
 66                  rc.obj# = at.obj# (+) AND
 67                  rc.intcol# = at.intcol# (+) AND
 68                  NOT EXISTS (
 69                      SELECT  owner, name
 70                      FROM    sys.noexp$ ne
 71                      WHERE   ne.owner = u.name AND
 72                              ne.name = o.name AND
 73                              ne.obj_type = 2)
 74  /

View created.

SQL> GRANT SELECT ON sys.exu10ccl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10cclu AS
  2          SELECT  *
  3          FROM    sys.exu10ccl
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10cclu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10cclo (
  2                  ownerid, cno, colname, colno, property, nolog) AS
  3          SELECT  a.ownerid, a.cno, a.colname, a.colno, a.property, a.nolog
  4          FROM    sys.exu10ccl a, sys.con$ b , sys.cdef$ c
  5          WHERE   b.owner# = UID AND
  6                  b.con# = c.con# AND
  7                  c.rcon# = a.cno
  8  /

View created.

SQL> GRANT SELECT ON sys.exu10cclo TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers on tables and views
SQL> REM
SQL> REM Notes: Fetch trigger OBJ# for 9.2
SQL> REM        actionsize obsolete as of 8.0.4
SQL> REM        sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92tgr (
  2                  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, tproperty, name, basename, basetype, property,
  4                  btowner, btownerid, sys_evts, sqlver, actionsize,
  5                  trig_objno) AS
  6          SELECT  o.owner#, u.name, t.baseobject, t.definition, t.whenclause,
  7                  t.action#, t.enabled, t.property, o.name,
  8                  DECODE(BITAND(t.property, 24), 0, (
  9                      SELECT  o2.name
 10                      FROM    sys.exu81obj o2
 11                      WHERE   t.baseobject = o2.obj#), ''),
 12                  DECODE(BITAND(t.property, 24), 0, (
 13                      SELECT  o2.type#
 14                      FROM    sys.exu81obj o2
 15                      WHERE   t.baseobject = o2.obj#), 0),
 16                  NVL((
 17                      SELECT  tb.property
 18                      FROM    sys.tab$ tb
 19                      WHERE   t.baseobject = tb.obj#), 0),
 20                  NVL((
 21                      SELECT  ut.name
 22                      FROM    sys.user$ ut, sys.exu81obj o2
 23                      WHERE   t.baseobject = o2.obj# AND
 24                              o2.owner# = ut.user#), ''),
 25                  NVL((
 26                      SELECT  ut.user#
 27                      FROM    sys.user$ ut, sys.exu81obj o2
 28                      WHERE   t.baseobject = o2.obj# AND
 29                              o2.owner# = ut.user#), 0),
 30                  t.sys_evts,
 31                  (   SELECT  sv.sql_version
 32                      FROM    sys.exu816sqv sv
 33                      WHERE   o.spare1 = sv.version#),
 34                  t.actionsize, t.obj#
 35          FROM    sys.exu81obj o, sys.trigger$ t, sys.user$ u
 36          WHERE   o.obj# = t.obj# AND
 37                  u.user# = o.owner#
 38  /

View created.

SQL> GRANT SELECT ON sys.exu92tgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu92tgru AS
  2          SELECT  *
  3          FROM    sys.exu92tgr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu92tgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM (for 9.2 so lrgs don't get diffs - obsolete)
SQL> REM triggers for incremental and cumulative export for table just
SQL> REM exported.  See comment on exu8refic.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92tgric AS
  2          SELECT  *
  3          FROM    sys.exu92tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# IN (2, 4))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu92tgric TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre-8.1.6 - filter out enhanced system events
SQL> REM actionsize obsolete in 8.0.4
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92itgr AS
  2          SELECT  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, tproperty, name, basename, basetype, property,
  4                  btowner, btownerid, actionsize, trig_objno
  5          FROM    sys.exu92tgr
  6          WHERE   BITAND(sys_evts, 255) = sys_evts
  7  /

View created.

SQL> GRANT SELECT ON sys.exu92itgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for incremental export: record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92tgri AS
  2          SELECT  *
  3          FROM    sys.exu92itgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu92itgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu92tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for cumulative export: record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92tgrc AS
  2          SELECT  *
  3          FROM    sys.exu92itgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu92itgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu92tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> REM end of 9.2 incremental/cum views
SQL> 
SQL> 
SQL> REM
SQL> REM triggers on tables and views
SQL> REM
SQL> REM Notes: Replace previous outer joins with subqueries
SQL> REM        actionsize obsolete as of 8.0.4
SQL> REM        sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816tgr (
  2                  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, tproperty, name, basename, basetype, property,
  4                  btowner, btownerid, sys_evts, sqlver, actionsize) AS
  5          SELECT  o.owner#, u.name, t.baseobject, t.definition, t.whenclause,
  6                  t.action#, t.enabled, t.property, o.name,
  7                  DECODE(BITAND(t.property, 24), 0, (
  8                      SELECT  o2.name
  9                      FROM    sys.exu81obj o2
 10                      WHERE   t.baseobject = o2.obj#), ''),
 11                  DECODE(BITAND(t.property, 24), 0, (
 12                      SELECT  o2.type#
 13                      FROM    sys.exu81obj o2
 14                      WHERE   t.baseobject = o2.obj#), 0),
 15                  NVL((
 16                      SELECT  tb.property
 17                      FROM    sys.tab$ tb
 18                      WHERE   t.baseobject = tb.obj#), 0),
 19                  NVL((
 20                      SELECT  ut.name
 21                      FROM    sys.user$ ut, sys.exu81obj o2
 22                      WHERE   t.baseobject = o2.obj# AND
 23                              o2.owner# = ut.user#), ''),
 24                  NVL((
 25                      SELECT  ut.user#
 26                      FROM    sys.user$ ut, sys.exu81obj o2
 27                      WHERE   t.baseobject = o2.obj# AND
 28                              o2.owner# = ut.user#), 0),
 29                  t.sys_evts,
 30                  (   SELECT  sv.sql_version
 31                      FROM    sys.exu816sqv sv
 32                      WHERE   o.spare1 = sv.version#),
 33                  t.actionsize
 34          FROM    sys.exu81obj o, sys.trigger$ t, sys.user$ u
 35          WHERE   o.obj# = t.obj# AND
 36                  u.user# = o.owner#
 37  /

View created.

SQL> GRANT SELECT ON sys.exu816tgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre-8.1.6 - filter out enhanced system events
SQL> REM actionsize obsolete in 8.0.4
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tgr AS
  2          SELECT  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, tproperty, name, basename, basetype, property,
  4                  btowner, btownerid, actionsize
  5          FROM    sys.exu816tgr
  6          WHERE   BITAND(sys_evts, 255) = sys_evts
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81tgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre-8.1 filter out system events, call triggers, Java triggers, etc...
SQL> REM         (all but simple table and view triggers)
SQL> REM actionsize obsolete in 8.0.4
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tgr AS
  2          SELECT  ownerid, owner, baseobject, definition, whenclause, action,
  3                  enabled, name, basename, basetype, property, btowner,
  4                  btownerid, actionsize
  5          FROM    sys.exu816tgr
  6          WHERE   BITAND(tproperty, 127) in (0, 1)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8tgr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu816tgru AS
  2          SELECT  *
  3          FROM    sys.exu816tgr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu816tgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81tgru AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81tgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8tgru AS
  2          SELECT  *
  3          FROM    sys.exu8tgr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8tgru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for incremental and cumulative export for table just
SQL> REM exported.  See comment on exu8refic.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu816tgric AS
  2          SELECT  *
  3          FROM    sys.exu816tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# IN (2, 4))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu816tgric TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81tgric AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# IN (2, 4))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81tgric TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8tgric AS
  2          SELECT  *
  3          FROM    sys.exu8tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# IN (2, 4))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8tgric TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for incremental export: record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tgri AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu81tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu9tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu816tgri AS
  2          SELECT  *
  3          FROM    sys.exu816tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu816tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu816tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81tgri AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu81tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8tgri AS
  2          SELECT  *
  3          FROM    sys.exu8tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabi)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu8tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfi)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8tgri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM triggers for cumulative export: record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9tgrc AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu81tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu9tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu816tgrc AS
  2          SELECT *
  3          FROM    sys.exu816tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu816tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu816tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81tgrc AS
  2          SELECT  *
  3          FROM    sys.exu81tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu81tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8tgrc AS
  2          SELECT  *
  3          FROM    sys.exu8tgr
  4          WHERE   (ownerid, basename) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabc)
  7        UNION ALL
  8          SELECT  *
  9          FROM    sys.exu8tgr
 10          WHERE   (ownerid, basename) IN (
 11                      SELECT  ownerid, name
 12                      FROM    sys.exu8vinfc)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8tgrc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> REM 2734632 - use o.stime vs. o.mtime
SQL> CREATE OR REPLACE VIEW exu8spr(
  2                  ownerid, uname, id, name, time, typeid, type, audt, sqlver) AS
  3          SELECT  o.owner#, u.name, o.obj#, o.name,
  4                  TO_CHAR(o.stime, 'YYYY-MM-DD:HH24:MI:SS'), o.type#,
  5                  DECODE(o.type#, 7, 'PROCEDURE', 8, 'FUNCTION', 9, 'PACKAGE',
  6                         11, 'PACKAGE BODY'),
  7                  p.audit$, sv.sql_version
  8          FROM    sys.exu81obj o, sys.user$ u, sys.procedure$ p, sys.exu816sqv sv
  9          WHERE   o.owner# = u.user# AND
 10                  o.type# IN (7, 8, 9, 11) AND
 11                  o.obj# = p.obj# AND
 12                  o.spare1 = sv.version# (+)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8spr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8spu AS
  2          SELECT  *
  3          FROM    sys.exu8spr
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8spu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM stored procedures for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8spri AS
  2          SELECT  s.*
  3          FROM    sys.exu8spr s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 7) IN (7, 8, 9, 11) AND
  7                  NVL(i.expid, 9999) > v.expid
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8spri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM stored procedures for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8sprc AS
  2          SELECT  s.*
  3          FROM    sys.exu8spr s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 7) IN (7, 8, 9, 11) AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8sprc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8sps(
  2                  obj#, line, source) AS
  3          SELECT  obj#, line, source
  4          FROM    sys.source$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8sps TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8spsu(
  2                  obj#, line, source) AS
  3          SELECT  o.obj#, s.line, s.source
  4          FROM    sys.source$ s, sys.obj$ o
  5          WHERE   s.obj# = o.obj# AND
  6                  o.owner# = UID
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8spsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM stored java entities
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81jav(
  2                  ownerid, uname, id, shortname, typeid, type) AS
  3          SELECT  o.owner#, u.name, o.obj#, o.name, o.type#,
  4                  DECODE(o.type#, 28, 'JAVA SOURCE', 29, 'JAVA CLASS',
  5                         30, 'JAVA RESOURCE')
  6          FROM    sys.exu81obj o, sys.user$ u
  7          WHERE   o.owner# = u.user# AND
  8                  o.type# IN (28, 29, 30) AND
  9                  (UID IN (0, o.owner#) OR
 10                   EXISTS (
 11                      SELECT  role
 12                      FROM    sys.session_roles
 13                      WHERE   role = 'SELECT_CATALOG_ROLE')) AND
 14                  u.name != 'SYS'
 15  /

View created.

SQL> GRANT SELECT ON sys.exu81jav TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Java entities for incremental export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81javi AS
  2          SELECT  j.*
  3          FROM    sys.exu81jav j, sys.incexp i, sys.incvid v
  4          WHERE   j.shortname = i.name(+) AND
  5                  j.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 28) IN (28, 29, 30, 31) AND
  7                  v.expid < NVL(i.expid, 9999)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81javi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Java entities for cumulative export
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81javc AS
  2          SELECT  j.*
  3          FROM    sys.exu81jav j, sys.incexp i, sys.incvid v
  4          WHERE   j.shortname = i.name(+) AND
  5                  j.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 28) IN (28, 29, 30, 31) AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81javc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM check whether java class DbmsJava is installed
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81javt (objid) AS
  2          SELECT  obj#
  3          FROM    sys.obj$
  4          WHERE   name LIKE '%DbmsJava' AND
  5                  type# = 29 AND
  6                  owner# = 0 AND
  7                  status = 1
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81javt TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM system auditting options
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8aud (
  2                  userid, name, action, success, failure) AS
  3          SELECT  a.user#, u.name, m.name, NVL(a.success, 0), NVL(a.failure, 0)
  4          FROM    sys.audit$ a, sys.user$ u, sys.stmt_audit_option_map m
  5          WHERE   a.user# = u.user# AND
  6                  a.option# = m.option# AND
  7                  BITAND(m.property, 1) != 1
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8aud TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM profiles
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8prf(
  2                  profile#, name) AS
  3          SELECT  profile#, name
  4          FROM    sys.profname$
  5          WHERE   profile# != 0
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8prf TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8prr(
  2                  profile#, resource#, resname, type, limit) AS
  3          SELECT  p.profile#, p.resource#, r.name, p.type#, p.limit#
  4          FROM    sys.profile$ p, sys.resource_map r
  5          WHERE   p.resource# != 9 AND
  6                  p.resource# = r.resource# AND
  7                  p.type# = r.type#
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8prr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM password verification function
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pvf (
  2                  funcid, funcname, line, source) AS
  3          SELECT  o.obj#, o.name, s.line, s.source
  4          FROM    sys.obj$ o, sys.source$ s
  5          WHERE   o.type# = 8 AND
  6                  o.owner# = 0 AND
  7                  o.obj# = s.obj#
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8pvf TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM password history
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8phs (
  2                  userid, uname, password, password_date) AS
  3          SELECT  h.user#, u.name, h.password, h.password_date
  4          FROM    sys.user_history$ h, sys.user$ u
  5          WHERE   h.user# = u.user#
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8phs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM trusted server links
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8tsl (
  2                  function, dbname, type) AS
  3          SELECT  DECODE(tl.dbname, '+*', 'allow_all', '-*', 'deny_all',
  4                         fdef.function),
  5                  DECODE(tl.dbname, '+*', '', '-*', '', '('''||tl.dbname||''')'),
  6                  DECODE(tl.dbname, '+*', 0, '-*', 0, 1)
  7          FROM    sys.trusted_list$ tl, (
  8                      SELECT  DECODE (dbname, '+*', 'deny_server ', '-*',
  9                                      'allow_server ') function
 10                      FROM    sys.trusted_list$
 11                      WHERE   dbname like '%*') fdef
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8tsl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM New snapshot views for v11
SQL> REM
SQL> CREATE OR REPLACE VIEW exu11snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
  6                  rscn, objflag, flag2, status, sna_type_owner, sna_type_name,
  7                  parent_sowner, parent_vname,
  8                  file_ver, sql_ver, alias_txt, mview_comment, syn_count) AS
  9          SELECT  s.sowner, u.user#, s.vname, s.tname, s.mview, s.mlink, s.mtime,
 10                  DECODE(s.can_use_log, NULL, 'NO', 'YES'), NVL(s.error#, 0),
 11                  DECODE(s.auto_fast, 'C', 'COMPLETE', 'F', 'FAST', '?', 'FORCE',
 12                         NULL, 'FORCE', 'N', 'NEVER', 'ERROR'),
 13                  s.query_txt, NVL(s.flag, 0),
 14                  /*
 15                  ** have a flag for each snapshot types: rowid, primary key and
 16                  ** updatable for compatibility purpose
 17                  */
 18                  DECODE(BITAND(NVL(s.flag, 0), 16), 16, 1, 0),
 19                  DECODE(BITAND(NVL(s.flag, 0), 32), 32, 1, 0),
 20                  DECODE(BITAND(NVL(s.flag, 0), 2), 2, 1, 0),
 21                  s.ustrg, s.uslog, s.tables, NVL(s.master_version, 0),
 22                  RAWTOHEX(s.lobmaskvec), s.snapshot, NVL(s.snapid, 0),
 23                  s.instsite, NVL(s.flavor_id, 0),
 24                  s.rscn, s.objflag, s.flag2, s.status, s.sna_type_owner,
 25                  s.sna_type_name, s.parent_sowner, s.parent_vname,
 26                  9, 0, s.alias_txt, c.comment$, s.syn_count
 27          FROM    sys.snap$ s, sys.user$ u, sys.com$ c, sys.obj$ o, sys.tab$ t
 28          WHERE   u.name = s.sowner AND
 29                  o.owner# = u.user# AND
 30                  o.name = s.vname AND
 31                  o.type# = 2 AND
 32                  o.obj# = t.obj# AND
 33                  (bitand(t.property, 67108864) = 67108864) AND
 34                  o.obj# = c.obj#(+) AND c.col#(+) IS NULL
 35  /

View created.

SQL> GRANT SELECT ON exu11snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu11snapu AS
  2          SELECT  *
  3          FROM    exu11snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT on sys.exu11snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM snapshots for incremental export: modified, altered or new
SQL> CREATE OR REPLACE VIEW exu11snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu11snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7                  ** Since snapshot also creates a view with the same name,
  8                  ** we need to check for both type view(4) and snapshot(99).
  9                  ** Note: there will be duplicate entry in sys.incexp for this
 10                  */
 11                  NVL(i.type#, 99) in (4, 99) AND
 12                  (s.mtime > i.itime OR
 13                   NVL(i.expid, 9999) > v.expid)
 14  /

View created.

SQL> GRANT SELECT ON exu11snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM New snapshot views for v10
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
  6                  rscn, objflag, flag2, status, sna_type_owner, sna_type_name,
  7                  parent_sowner, parent_vname,
  8                  file_ver, sql_ver, alias_txt, mview_comment, syn_count) AS
  9          SELECT  owner, ownerid, name, table_name, master_view, master_link,
 10                  mtime, can_use_log, error, type, query, flag, rowid_snap,
 11                  primkey_snap, update_snap, update_trig, update_log, mastabs,
 12                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
 13                  rscn, objflag, flag2, status, sna_type_owner, sna_type_name,
 14                  parent_sowner, parent_vname,
 15                  8, sql_ver, alias_txt, mview_comment, syn_count
 16          FROM    exu11snap
 17  /

View created.

SQL> GRANT SELECT ON exu10snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10snapu AS
  2          SELECT  *
  3          FROM    exu10snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT on sys.exu10snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM snapshots for incremental export: modified, altered or new
SQL> CREATE OR REPLACE VIEW exu10snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu10snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7                  ** Since snapshot also creates a view with the same name,
  8                  ** we need to check for both type view(4) and snapshot(99).
  9                  ** Note: there will be duplicate entry in sys.incexp for this
 10                  */
 11                  NVL(i.type#, 99) in (4, 99) AND
 12                  (s.mtime > i.itime OR
 13                   NVL(i.expid, 9999) > v.expid)
 14  /

View created.

SQL> GRANT SELECT ON exu10snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM The cumulative mode is not supported in 10g. So we do not have an exu10snapc
SQL> REM view, even though we have the exu9snapc for 9i.
SQL> 
SQL> REM
SQL> REM New snapshot views for v9
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
  6                  rscn, objflag, flag2, status, sna_type_owner, sna_type_name,
  7                  parent_sowner, parent_vname,
  8                  file_ver, sql_ver, alias_txt, mview_comment) AS
  9          SELECT  owner, ownerid, name, table_name, master_view, master_link,
 10                  mtime, can_use_log, error, type, query, flag, rowid_snap,
 11                  primkey_snap, update_snap, update_trig, update_log, mastabs,
 12                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
 13                  rscn, objflag, flag2, status, sna_type_owner, sna_type_name,
 14                  parent_sowner, parent_vname,
 15                  5, sql_ver, alias_txt, mview_comment
 16          FROM    exu11snap
 17  /

View created.

SQL> GRANT SELECT ON exu9snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9snapu AS
  2          SELECT  *
  3          FROM    exu9snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT on sys.exu9snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM snapshots for incremental export: modified, altered or new
SQL> CREATE OR REPLACE VIEW exu9snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu9snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7                  ** Since snapshot also creates a view with the same name,
  8                  ** we need to check for both type view(4) and snapshot(99).
  9                  ** Note: there will be duplicate entry in sys.incexp for this
 10                  */
 11                  NVL(i.type#, 99) in (4, 99) AND
 12                  (s.mtime > i.itime OR
 13                   NVL(i.expid, 9999) > v.expid)
 14  /

View created.

SQL> GRANT SELECT ON exu9snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM snapshots for cumulative export: new, last export was inc or not valid
SQL> CREATE OR REPLACE VIEW exu9snapc AS
  2          SELECT  s.*
  3          FROM    sys.exu9snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 99) = 99 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON exu9snapc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM new snapshot views for v81
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
  6                  file_ver, sql_ver) AS
  7          SELECT  owner, ownerid, name, table_name, master_view, master_link,
  8                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  9                  primkey_snap, update_snap, update_trig, update_log, mastabs,
 10                  masver, lob_vector, snapshot, snapid, instsite, flavor_id,
 11                  3, sql_ver
 12          FROM    exu9snap
 13          WHERE   BITAND(NVL(flag, 0), 16) +     /* supported snapshots: rowid */
 14                  BITAND(NVL(flag, 0), 32) +                    /* primary key */
 15                  BITAND(NVL(flag, 0), 256) +                       /* complex */
 16                  BITAND(NVL(flag, 0), 4096) > 0                  /* aggregate */
 17  
SQL> /

View created.

SQL> GRANT SELECT ON sys.exu81snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81snapu AS
  2          SELECT  *
  3          FROM    sys.exu81snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshots for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu81snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7                  ** Since snapshot also creates a view with the same name,
  8                  ** we need to check for both type view(4) and snapshot(99).
  9                  ** Note: there will be duplicate entry in sys.incexp for this
 10                  */
 11                  NVL(i.type#, 99) in (4, 99) AND
 12                  (s.mtime > i.itime OR
 13                   NVL(i.expid, 9999) > v.expid)
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshots for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snapc AS
  2          SELECT  s.*
  3          FROM    sys.exu81snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 99) = 99 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81snapc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81srt (
  2                  sowner, sownerid, vname, master_owner, master, tabnum,
  3                  refresh_time, master_flag, master_objnum, loadertime, instsite,
  4                  lastsuccess, fcmaskvec, ejmaskvec,
  5                  refscn, sub_handle, change_view) AS
  6          SELECT  srt.sowner, u.user#, srt.vname, srt.mowner, srt.master,
  7                  srt.tablenum, srt.snaptime, srt.masflag, srt.masobj#,
  8                  srt.loadertime, srt.instsite, srt.lastsuccess,
  9                  RAWTOHEX(srt.fcmaskvec), RAWTOHEX(srt.ejmaskvec),
 10                  srt.refscn, srt.sub_handle, srt.change_view
 11          FROM    sys.snap_reftime$ srt, sys.user$ u
 12          WHERE   u.name = srt.sowner
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81srt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81srtu AS
  2          SELECT  *
  3          FROM    sys.exu81srt
  4          WHERE   sownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81srtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81scm (
  2                  sowner, sownerid, vname, tabnum, snacol, mascol, maspos, role,
  3                  instsite, snapos) AS
  4          SELECT  sc.sowner, u.user#, sc.vname, sc.tabnum, sc.snacol, sc.mascol,
  5                  NVL(sc.maspos, 0), NVL(sc.colrole, 0), instsite, sc.snapos
  6          FROM    sys.snap_colmap$ sc, sys.user$ u
  7          WHERE   u.name = sc.sowner
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81scm TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81scmu AS
  2          SELECT  *
  3          FROM    sys.exu81scm
  4          WHERE   sownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81scmu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM snapshots
SQL> REM
SQL> REM NOTE:
SQL> REM * In V8.1, flag was changed from UB2 to UB4. Thus when exporting
SQL> REM   to V8.0.X, the value of flag must be forced into a UB2
SQL> REM * Do not include MAVs or MJVs (KKZFJVS|KKZFAV1|KKZFAGG)
SQL> REM * Do not export to V8.0.X if the base table name is not SNAP$_*
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snap (
  2                  owner, ownerid, name, table_name, master_view, master_link,
  3                  mtime, can_use_log, error, type, query, flag, rowid_snap,
  4                  primkey_snap, update_snap, update_trig, update_log, mastabs,
  5                  masver, lob_vector, snapshot, snapid, file_ver) AS
  6          SELECT  owner, ownerid, name, table_name, master_view, master_link,
  7                  mtime, can_use_log, error, type, query, MOD(flag, 65536),
  8                  rowid_snap, primkey_snap, update_snap, update_trig, update_log,
  9                  mastabs, masver, lob_vector, snapshot, snapid, 2
 10          FROM    sys.exu81snap
 11          WHERE   BITAND(flag, 28672) = 0 AND   /* Do not include MAVs or MJVs */
 12                  instsite = 0 AND          /* Do not include RepAPI snapshots */
 13                  table_name LIKE 'SNAP$_%'
 14  /

View created.

SQL> GRANT SELECT ON sys.exu8snap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8snapu AS
  2          SELECT  *
  3          FROM    sys.exu8snap
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8snapu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshots for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snapi AS
  2          SELECT  s.*
  3          FROM    sys.exu8snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  /*
  7                  ** Since snapshot also creates a view with the same name,
  8                  ** we need to check for both type view(4) and snapshot(99).
  9                  ** Note: there will be duplicate entry in sys.incexp for this
 10                  */
 11                  NVL(i.type#, 99) IN (4, 99) AND
 12                  (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid)
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8snapi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshots for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snapc AS
  2          SELECT  s.*
  3          FROM    sys.exu8snap s, sys.incexp i, sys.incvid v
  4          WHERE   s.name = i.name(+) AND
  5                  s.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 99) = 99 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8snapc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot column mapping for each master table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8scm AS
  2          SELECT  sowner, sownerid, vname, tabnum, snacol, mascol, maspos, role
  3          FROM    sys.exu81scm
  4          WHERE   instsite = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8scm TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8scmu AS
  2          SELECT  *
  3          FROM    sys.exu8scm
  4          WHERE   sownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8scmu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot refresh time for each master table used by snapshot
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8srt AS
  2          SELECT  sowner, sownerid, vname, master_owner, master, tabnum,
  3                  refresh_time
  4          FROM    sys.exu81srt
  5          WHERE   instsite = 0              /* Do not include RepAPI snapshots */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8srt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8srtu AS
  2          SELECT  *
  3          FROM    sys.exu8srt
  4          WHERE   sownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8srtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM new snapshot log views for 10iR1
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10snapl(
  2                  log_owner, log_ownerid, master, log_table, log_trigger, flag,
  3                  youngest, oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl,
  4                  oid_snapl, seq_snapl, inv_snapl, file_ver, temp_log,
  5                  oldest_oid, oldest_new, oldest_seq) AS
  6          SELECT  m.mowner, u.user#, m.master, m.log, m.trig, NVL(m.flag, 0),
  7                  m.youngest, m.oldest, m.oldest_pk, m.mtime,
  8                  /* have a flag for each snapshot log types: rowid, primary key
  9                  ** for compatibility purpose */
 10                  DECODE(BITAND(NVL(m.flag, 0), 1), 1, 1, 0),
 11                  DECODE(BITAND(NVL(m.flag, 0), 2), 2, 1, 0),
 12                  DECODE(BITAND(NVL(m.flag, 0), 512), 512, 1, 0),
 13                  DECODE(BITAND(NVL(m.flag, 0), 1024), 1024, 1, 0),
 14                  DECODE(BITAND(NVL(m.flag, 0), 16), 16, 1, 0),
 15                  7, m.temp_log, m.oldest_oid, m.oldest_new, m.oldest_seq
 16          FROM    sys.mlog$ m, sys.user$ u
 17          WHERE   m.mowner = u.name
 18  /

View created.

SQL> GRANT SELECT ON sys.exu10snapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10snaplu AS
  2          SELECT  *
  3          FROM    sys.exu10snapl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10snaplu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10snapli AS
  2          SELECT  s.*
  3          FROM    sys.exu10snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  /* snapshot log also creates a table with the same name */
  7                  NVL(i.type#, 98) IN (2, 98) AND
  8                  (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu10snapli TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10snaplc AS
  2          SELECT  s.*
  3          FROM    sys.exu10snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 98) = 98 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu10snaplc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM new snapshot log views for v9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9snapl(
  2                  log_owner, log_ownerid, master, log_table, log_trigger, flag,
  3                  youngest, oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl,
  4                  oid_snapl, seq_snapl, inv_snapl, file_ver, temp_log,
  5                  oldest_oid, oldest_new) AS
  6          SELECT  m.mowner, u.user#, m.master, m.log, m.trig, NVL(m.flag, 0),
  7                  m.youngest, m.oldest, m.oldest_pk, m.mtime,
  8                  /* have a flag for each snapshot log types: rowid, primary key
  9                  ** for compatibility purpose */
 10                  DECODE(BITAND(NVL(m.flag, 0), 1), 1, 1, 0),
 11                  DECODE(BITAND(NVL(m.flag, 0), 2), 2, 1, 0),
 12                  DECODE(BITAND(NVL(m.flag, 0), 512), 512, 1, 0),
 13                  DECODE(BITAND(NVL(m.flag, 0), 1024), 1024, 1, 0),
 14                  DECODE(BITAND(NVL(m.flag, 0), 16), 16, 1, 0),
 15                  5, m.temp_log, m.oldest_oid, m.oldest_new
 16          FROM    sys.mlog$ m, sys.user$ u
 17          WHERE   m.mowner = u.name
 18  /

View created.

SQL> GRANT SELECT ON sys.exu9snapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9snaplu AS
  2          SELECT  *
  3          FROM    sys.exu9snapl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9snaplu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9snapli AS
  2          SELECT  s.*
  3          FROM    sys.exu9snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  /* snapshot log also creates a table with the same name */
  7                  NVL(i.type#, 98) IN (2, 98) AND
  8                  (s.mtime > i.itime OR NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu9snapli TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9snaplc AS
  2          SELECT  s.*
  3          FROM    sys.exu9snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 98) = 98 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu9snaplc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM new snapshot log views for v8.1
SQL> REM select only v8.1 specific bits from mlog$.flag
SQL> REM do not export snapshot logs that are only OBJECT ID based.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snapl(
  2                  log_owner, log_ownerid, master, log_table, log_trigger, flag,
  3                  youngest, oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl,
  4                  file_ver, temp_log) AS
  5          SELECT  log_owner, log_ownerid, master, log_table, log_trigger,
  6                  /* Clear the bits (0x0080) and higher */
  7                  BITAND(flag, 127), youngest, oldest, oldest_pk, mtime,
  8                  rowid_snapl, primkey_snapl, 3, temp_log
  9          FROM    sys.exu9snapl
 10          WHERE   rowid_snapl = 1 OR
 11                  primkey_snapl = 1
 12  /

View created.

SQL> GRANT SELECT ON sys.exu81snapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81snaplu AS
  2          SELECT  *
  3          FROM    sys.exu81snapl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81snaplu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snapli AS
  2          SELECT  s.*
  3          FROM    sys.exu81snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  /* snapshot log also creates a table with the same name */
  7                  NVL(i.type#, 98) IN (2, 98) AND
  8                  (s.mtime > i.itime OR
  9                   NVL(i.expid, 9999) > v.expid)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu81snapli TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81snaplc AS
  2          SELECT  s.*
  3          FROM    sys.exu81snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 98) = 98 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81snaplc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81slfc (
  2                  mowner, mownerid, master, colname, oldest, flag) AS
  3          SELECT  mr.mowner, u.user#, mr.master, mr.colname, mr.oldest,
  4                  NVL(mr.flag, 0)
  5          FROM    sys.mlog_refcol$ mr, sys.user$ u
  6          WHERE   u.name = mr.mowner
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81slfc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81slfcu AS
  2          SELECT  *
  3          FROM    sys.exu81slfc
  4          WHERE   mownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81slfcu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot log views for v8.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snapl (
  2                  log_owner, log_ownerid, master, log_table, log_trigger, flag,
  3                  youngest, oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl,
  4                  file_ver) AS
  5          SELECT  log_owner, log_ownerid, master, log_table, log_trigger,
  6                  /* Clear bit (0x0040) indicating a temporary log was created */
  7                  DECODE(BITAND(flag, 64), 64, flag - 64, flag), youngest,
  8                  oldest, oldest_pk, mtime, rowid_snapl, primkey_snapl, 2
  9          FROM    sys.exu81snapl
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8snapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8snaplu AS
  2          SELECT  *
  3          FROM    sys.exu8snapl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8snaplu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for incremental export: modified, altered or new
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snapli AS
  2          SELECT  s.*
  3          FROM    sys.exu8snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  /* snapshot log also creates a table with the same name */
  7                  NVL(i.type#, 98) IN (2, 98) AND
  8                  (s.mtime > i.itime OR
  9                   NVL(i.expid, 9999) > v.expid)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8snapli TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM snapshot logs for cumulative export: new, last export was inc or not valid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8snaplc AS
  2          SELECT  s.*
  3          FROM    sys.exu8snapl s, sys.incexp i, sys.incvid v
  4          WHERE   s.master = i.name(+) AND
  5                  s.log_ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 98) = 98 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   NVL(i.expid, 9999) > v.expid)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8snaplc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on deleted snapshots -- they aren't in obj$
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8delsnap (
  2                  owner, name, type) AS
  3          SELECT  u$.name, i$.name, 'SNAPSHOT'
  4          FROM    sys.incexp i$, sys.user$ u$
  5          WHERE   i$.owner# = u$.user# AND
  6                  i$.type# = 99 AND
  7                  (u$.name, i$.name) NOT IN (
  8                      SELECT  s$.sowner, s$.vname
  9                      FROM    sys.snap$ s$
 10                      WHERE   s$.instsite = 0)
 11  /

View created.

SQL> GRANT SELECT ON sys.exu8delsnap TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on deleted snapshot logs -- they aren't in obj$
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8delsnapl (
  2                  owner, name, type) AS
  3          SELECT  u$.name, i$.name, 'SNAPSHOT LOG'
  4          FROM    sys.incexp i$, sys.user$ u$
  5          WHERE   i$.owner# = u$.user# AND
  6                  i$.type# = 98 AND
  7                  (u$.name, i$.name) NOT IN (
  8                      SELECT  m$.mowner, m$.master
  9                      FROM    sys.mlog$ m$)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu8delsnapl TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8slog (
  2                  mowner, mownerid, master, snapid, snaptime) AS
  3          SELECT  sl.mowner, u.user#, sl.master, NVL(sl.snapid, 0), sl.snaptime
  4          FROM    sys.slog$ sl, sys.user$ u
  5          WHERE   u.name = sl.mowner
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8slog TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8slogu AS
  2          SELECT  *
  3          FROM    sys.exu8slog
  4          WHERE   mownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8slogu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM in v8.0 primary keys are not logged as filter columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8slfc (
  2                  mowner, mownerid, master, colname, oldest, flag) AS
  3          SELECT  mowner, mownerid, master, colname, oldest, 0
  4          FROM    sys.exu81slfc
  5          WHERE   BITAND(flag, 2) != 2
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8slfc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8slfcu AS
  2          SELECT  *
  3          FROM    sys.exu8slfc
  4          WHERE   mownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8slfcu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8glob (
  2                  global_name) AS
  3          SELECT  value$
  4          FROM    sys.props$
  5          WHERE   name = 'GLOBAL_DB_NAME'
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8glob TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM info on analyzed objects (obsolete in 8.1)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8anal(
  2                  id, rowcnt) AS
  3          SELECT  obj#, SIGN(NVL(rowcnt, -1))
  4          FROM    sys.tab$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8anal TO PUBLIC;

Grant succeeded.

SQL> GRANT SELECT ON sys.exu8anal TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Indexes for which optimizer statistics cannot be easily imported
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9nos (
  2                  tobjid, towner)
  3        AS                             /* Indexes for table must be exportable */
  4          SELECT  to$.obj#, to$.owner#
  5          FROM    sys.obj$ to$, sys.obj$ io$, sys.ind$ ind$
  6          WHERE   ind$.bo# = to$.obj# AND
  7                  ind$.obj# = io$.obj# AND
  8                  ind$.blevel != -1 AND
  9                  ind$.type# = 8 AND                              /* LOB index */
 10                  (UID IN (to$.owner#, 0) OR
 11                   EXISTS (
 12                      SELECT  role
 13                      FROM    sys.session_roles
 14                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 15        UNION ALL                            /* Table cannot have associations */
 16          SELECT  to$.obj#, to$.owner#
 17          FROM    sys.obj$ to$, sys.association$ a$
 18          WHERE   to$.obj# = a$.obj# AND
 19                  to$.type# = 2 AND                                   /* Table */
 20                  (UID IN (to$.owner#, 0) OR
 21                   EXISTS (
 22                      SELECT  role
 23                      FROM    sys.session_roles
 24                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 25        UNION ALL               /* Type used in table cannot have associations */
 26          SELECT  to$.obj#, to$.owner#
 27          FROM    sys.obj$ to$, sys.obj$ tt$, sys.coltype$ ct$,
 28                  sys.association$ a$
 29          WHERE   to$.obj# = ct$.obj# AND
 30                  ct$.toid = tt$.oid$ AND
 31                  tt$.obj# = a$.obj# AND
 32                  (UID IN (to$.owner#, 0) OR
 33                   EXISTS (
 34                      SELECT  role
 35                      FROM    sys.session_roles
 36                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 37  /

View created.

SQL> GRANT SELECT ON sys.exu9nos TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Indexes for which optimizer statistics cannot be easily imported
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81nos (
  2                  tobjid, towner)
  3        AS                             /* Indexes for table must be exportable */
  4          SELECT  to$.obj#, to$.owner#
  5          FROM    sys.obj$ to$, sys.obj$ io$, sys.ind$ ind$
  6          WHERE   ind$.bo# = to$.obj# AND
  7                  ind$.obj# = io$.obj# AND
  8                  ind$.blevel != -1 AND
  9                  (BITAND(io$.flags, 4) = 4 OR             /* system generated */
 10                   ind$.type# = 8) AND                            /* LOB index */
 11                  (UID IN (to$.owner#, 0) OR
 12                   EXISTS (
 13                      SELECT  role
 14                      FROM    sys.session_roles
 15                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 16        UNION ALL                            /* Table cannot have associations */
 17          SELECT  to$.obj#, to$.owner#
 18          FROM    sys.obj$ to$, sys.association$ a$
 19          WHERE   to$.obj# = a$.obj# AND
 20                  to$.type# = 2 AND                                   /* Table */
 21                  (UID IN (to$.owner#, 0) OR
 22                   EXISTS (
 23                      SELECT  role
 24                      FROM    sys.session_roles
 25                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 26        UNION ALL               /* Type used in table cannot have associations */
 27          SELECT  to$.obj#, to$.owner#
 28          FROM    sys.obj$ to$, sys.obj$ tt$, sys.coltype$ ct$,
 29                  sys.association$ a$
 30          WHERE   to$.obj# = ct$.obj# AND
 31                  ct$.toid = tt$.oid$ AND
 32                  tt$.obj# = a$.obj# AND
 33                  (UID IN (to$.owner#, 0) OR
 34                   EXISTS (
 35                      SELECT  role
 36                      FROM    sys.session_roles
 37                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 38  /

View created.

SQL> GRANT SELECT ON sys.exu81nos TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Associations
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81assoc (
  2                  objowner, objowner#, objtype, objname, objcol, statsschema,
  3                  statsname, selectivity, cpu_cost, io_cost, net_cost,
  4                  maintenancetype) AS
  5          SELECT  ou$.name, oo$.owner#, a$.property, oo$.name, NVL(c$.name, ''),
  6                  NVL(su$.name, ''), NVL(so$.name, ''),
  7                  NVL(a$.default_selectivity, 0), NVL(a$.default_cpu_cost, 0),
  8                  NVL(a$.default_io_cost, 0), NVL(a$.default_net_cost, 0),
  9                  a$.spare2
 10          FROM    sys.association$ a$, sys.exu81obj oo$, sys.user$ ou$,
 11                  sys.col$ c$, sys.obj$ so$, sys.user$ su$
 12          WHERE   a$.obj# = oo$.obj# AND
 13                  oo$.owner# = ou$.user# AND
 14                  a$.intcol# = c$.intcol# (+) AND
 15                  a$.obj# = c$.obj# (+) AND
 16                  a$.statstype# = so$.obj# (+) AND
 17                  so$.owner# = su$.user# (+) AND
 18                  (UID IN (0, oo$.owner#) OR
 19                   EXISTS (
 20                      SELECT  role
 21                      FROM    sys.session_roles
 22                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 23  /

View created.

SQL> GRANT SELECT ON sys.exu81assoc TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM add a view to determine storage clause for unique constraint
SQL> REM need for it to be user level because two different users can have the
SQL> REM same index name
SQL> REM Fields ipctfree, initr, imaxtr, and ipctthres are only used
SQL> REM for iots, not for regular tables.
SQL> REM
SQL> REM Obsolete with 9.0.2
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8uscu (
  2                  iobjid, idobjid, iname, itsno, ifileno, iblockno, ibobjid,
  3                  ipctfree, iinitr, imaxtr, ipctthres, tspname, property,
  4                  preccnt, deflog, ipbobjid) AS
  5          SELECT  o$.obj#, o$.dataobj#, o$.name, i$.ts#, i$.file#, i$.block#,
  6                  i$.bo#, i$.pctfree$, i$.initrans, i$.maxtrans,
  7                  MOD(i$.pctthres$, 256), t$.name, i$.property, i$.spare2,
  8                  DECODE(BITAND(i$.flags, 4), 4, 1, 0), 0
  9          FROM    sys.obj$ o$, sys.ind$ i$, sys.file$ f$, sys.ts$ t$
 10          WHERE   o$.obj# = i$.obj# AND
 11                  f$.relfile# = i$.file# AND
 12                  f$.ts# = i$.ts# AND
 13                  f$.ts# = t$.ts#
 14        UNION ALL
 15          SELECT  o$.obj#, o$.dataobj#, o$.name, ip$.ts#, ip$.file#, ip$.block#,
 16                  ind$.bo#, ip$.pctfree$, ip$.initrans, ip$.maxtrans,
 17                  MOD(ip$.pctthres$, 256), ts$.name, ind$.property, ip$.spare2,
 18                  DECODE(BITAND(ind$.flags, 4), 4, 1, 0), ip$.bo#
 19          FROM    sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$, sys.ind$ ind$,
 20                  sys.tab$ t$
 21          WHERE   ip$.obj# = o$.obj# AND
 22                  ts$.ts# = ip$.ts# AND
 23                  ip$.bo# = ind$.obj# AND
 24                  o$.type# = 20 AND                        /* Index partitions */
 25                  ind$.bo# = t$.obj#
 26                  AND BITAND(t$.property, 64) = 0                  /* Non-IOTs */
 27  /

View created.

SQL> GRANT SELECT ON sys.exu8uscu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For iots only: Get top level index's characteristics
SQL> REM Expanded in 9.0.2 for use with IOTs in addition to PIOTs
SQL> REM  (dataobj only non null for IOTs)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81usci (
  2                  ipctthres, ipreccnt, iobjid, tobjid, ovfobjid, ownerid,
  3                  itsno, ifileno, iblockno, ipctfree, iinitr, imaxtr, deflog,
  4                  idobjid) AS
  5          SELECT  MOD(i$.pctthres$, 256), NVL(i$.spare2, 0), i$.obj#, i$.bo#,
  6                  NVL(t$.bobj#, 0), o$.owner#, i$.ts#, i$.file#, i$.block#,
  7                  i$.pctfree$, i$.initrans, i$.maxtrans,
  8                  DECODE(BITAND(i$.flags, 4), 4, 1, 0), NVL(i$.dataobj#, 0)
  9          FROM    sys.ind$ i$, sys.obj$ o$, sys.tab$ t$
 10          WHERE   i$.bo# = t$.obj# AND
 11                  t$.obj# = o$.obj# AND
 12                  i$.type# = 4
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81usci TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81usciu AS
  2          SELECT  *
  3          FROM    sys.exu81usci
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81usciu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For iots only: Get top level index's characteristics
SQL> REM Expanded in 9.0.2 for use with IOTs in addition to PIOTs
SQL> REM Expanded in 10.2.1 for mapping table.
SQL> REM  (dataobj only non null for IOTs)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10usci (
  2                  ipctthres, ipreccnt, iobjid, tobjid, ovfobjid, ownerid,
  3                  itsno, ifileno, iblockno, ipctfree, iinitr, imaxtr, deflog,
  4                  idobjid, mapobj) AS
  5          SELECT  MOD(i$.pctthres$, 256), NVL(i$.spare2, 0), i$.obj#, i$.bo#,
  6                  NVL(t$.bobj#, 0), o$.owner#, i$.ts#, i$.file#, i$.block#,
  7                  i$.pctfree$, i$.initrans, i$.maxtrans,
  8                  DECODE(BITAND(i$.flags, 4), 4, 1, 0), NVL(i$.dataobj#, 0),
  9                  t$.pctfree$  /* mapping table obj# for IOTs */
 10          FROM    sys.ind$ i$, sys.obj$ o$, sys.tab$ t$
 11          WHERE   i$.bo# = t$.obj# AND
 12                  t$.obj# = o$.obj# AND
 13                  i$.type# = 4
 14  /

View created.

SQL> GRANT SELECT ON sys.exu10usci TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10usciu AS
  2          SELECT  *
  3          FROM    sys.exu10usci
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10usciu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM referential constraints
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rif (
  2                  objid, owner, ownerid, tname, rowner, rtname, cname, cno, rcno,
  3                  action, enabled, robjid, defer, property) AS
  4          SELECT  o.obj#, u.name, c.owner#, o.name, ru.name, ro.name, c.name,
  5                  c.con#, cd.rcon#, NVL(cd.refact, 0), NVL(cd.enabled, 0),
  6                  cd.robj#, NVL(cd.defer, 0), t.property
  7          FROM    sys.user$ u, sys.user$ ru, sys.obj$ o, sys.obj$ ro, sys.con$ c,
  8                  sys.cdef$ cd, sys.tab$ t
  9          WHERE   u.user# = c.owner# AND
 10                  o.obj# = cd.obj# AND
 11                  ro.obj# = cd.robj# AND
 12                  cd.con# = c.con# AND
 13                  cd.type# = 4 AND
 14                  ru.user# = ro.owner# AND
 15                  t.obj# = o.obj#
 16  /

View created.

SQL> GRANT SELECT ON sys.exu8rif TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8erc (
  2                  resource_name, unit_cost) AS
  3          SELECT  m.name, c.cost
  4          FROM    sys.resource_cost$ c, sys.resource_map m
  5          WHERE   c.resource# = m.resource# AND
  6                  m.type# = 0 AND
  7                  c.resource# IN (2, 4, 7, 8)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8erc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM determine OID index for a table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8oid (
  2                  tobjid, intcol, iname, idefer, ownerid, pctfree$, initrans,
  3                  maxtrans, itsno, ifile, iblock, itsname, idobjid) AS
  4          SELECT  cc$.obj#, cc$.intcol#, co$.name, cd$.defer, co$.owner#,
  5                  i$.pctfree$, i$.initrans, i$.maxtrans, i$.ts#, i$.file#,
  6                  i$.block#, ts$.name, i$.dataobj#
  7          FROM    sys.ccol$ cc$, sys.con$ co$, sys.cdef$ cd$, sys.obj$ o$,
  8                  sys.ind$ i$, sys.ts$ ts$
  9          WHERE   cc$.con# = co$.con# AND
 10                  cc$.con# = cd$.con# AND
 11                  cd$.type# = 3 AND
 12                  co$.owner# = o$.owner# AND
 13                  co$.name = o$.name AND
 14                  o$.obj# = i$.obj# AND
 15                  i$.ts# = ts$.ts#
 16  /

View created.

SQL> GRANT SELECT ON sys.exu8oid TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8oidu AS
  2          SELECT  *
  3          FROM    sys.exu8oid
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8oidu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM determine LOB index and LOB storage for a table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lob (
  2                  tobjid, ownerid, cname, sname, ssgflag, stsname, stsno, sfile,
  3                  sblock, sdobjid, schunking, svpool, sflags, iname, isgflag,
  4                  itsname, itsno, ifile, iblock, idobjid, iinitrans, imaxtrans,
  5                  sproperty, coltype, coltypflg, blocksize, intcolid, opaquetype,
  6                  ifreepool)
  7        AS
  8          SELECT  l$.obj#, so$.owner#,
  9                  DECODE(BITAND(c$.property, 1), 0, '"'||c$.name||'"', 1,
 10                         ac$.name),
 11                  so$.name, so$.flags, sts$.name, sts$.ts#, l$.file#, l$.block#,
 12                  so$.dataobj#, l$.chunk, l$.pctversion$, l$.flags, io$.name,
 13                  io$.flags, its$.name, its$.ts#, i$.file#, i$.block#,
 14                  io$.dataobj#, i$.initrans, i$.maxtrans, l$.property,
 15                  NVL(c$.type#, 0), NVL(ct$.flags, 0), sts$.blocksize,
 16                  c$.intcol#,
 17                  NVL((SELECT opq.type
 18                       FROM   sys.opqtype$ opq
 19                       WHERE  c$.type# = 58 AND
 20                              c$.obj# = opq.obj# AND
 21                              c$.intcol# = opq.intcol#), -1),
 22                  l$.freepools
 23          FROM    sys.lob$ l$, sys.obj$ so$, sys.col$ c$, sys.attrcol$ ac$,
 24                  sys.seg$ ss$, sys.ts$ sts$, sys.ind$ i$, sys.obj$ io$,
 25                  sys.ts$ its$, sys.coltype$ ct$
 26          WHERE   l$.lobj# = so$.obj# AND
 27                  l$.obj# = c$.obj# AND
 28                  l$.intcol# =
 29                       NVL((SELECT opq.lobcol
 30                            FROM   sys.opqtype$ opq
 31                            WHERE  c$.type# = 58 AND                 /* opaque */
 32                                   c$.obj# = opq.obj# AND
 33                                   c$.intcol# = opq.intcol# AND
 34                                   opq.type = 1 AND                /* XMLType */
 35                                   BITAND(opq.flags, 4) = 4  /* stored as lob */
 36                           ), c$.intcol#) AND
 37                  c$.obj# = ac$.obj#(+) AND
 38                  c$.intcol# = ac$.intcol#(+) AND
 39                  l$.file# = ss$.file# AND
 40                  l$.block# = ss$.block# AND
 41                  ss$.ts# = sts$.ts# AND
 42                  l$.ind# = i$.obj# AND
 43                  l$.ind# = io$.obj# AND
 44                  i$.ts# = its$.ts# AND
 45                  sts$.ts# = its$.ts# AND
 46                  c$.obj# = ct$.obj# (+) AND
 47                  c$.intcol# = ct$.intcol# (+) AND
 48                  BITAND(c$.property, 32768) != 32768 AND /* not unused column */
 49                  BITAND(c$.property, 256) != 256         /* not sys generated */
 50  /

View created.

SQL> GRANT SELECT ON sys.exu9lob TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM lob indexes for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lobu AS
  2          SELECT  *
  3          FROM    sys.exu9lob
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9lobu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 table LOB index/storage adjusted for TS specific blocksizes
SQL> REM determine LOB index and LOB storage for a table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lob (
  2                  tobjid, ownerid, cname, sname, ssgflag, stsname, stsno, sfile,
  3                  sblock, sdobjid, schunking, svpool, sflags, iname, isgflag,
  4                  itsname, itsno, ifile, iblock, idobjid, iinitrans, imaxtrans,
  5                  sproperty, coltype, coltypflg) AS
  6          SELECT  l.tobjid, l.ownerid, l.cname, l.sname, l.ssgflag, l.stsname,
  7                  l.stsno, l.sfile, l.sblock, l.sdobjid,
  8                  CEIL(l.schunking * (l.blocksize / (
  9                      SELECT  t$.blocksize
 10                      FROM    sys.ts$ t$
 11                      WHERE   t$.ts# = 0))),
 12                  l.svpool, l.sflags, l.iname, l.isgflag, l.itsname, l.itsno,
 13                  l.ifile, l.iblock, l.idobjid, l.iinitrans, l.imaxtrans,
 14                  l.sproperty, l.coltype, l.coltypflg
 15          FROM    sys.exu9lob l
 16  /

View created.

SQL> GRANT SELECT ON sys.exu8lob TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's table LOB index/storage adjusted for TS specific
SQL> REM blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lobu AS
  2          SELECT  *
  3          FROM    sys.exu8lob
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8lobu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM table level attributes definition for LOB columns
SQL> REM in partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9plb (
  2                  tobjid, ownerid, cname, lobname, tsname, sgflags, property,
  3                  chunk, versionp, flags, iniexts, extsize, minexts, maxexts,
  4                  extpct, flists, freegrp, pcache, coltype, coltypflg,
  5                  blocksize, intcolid, opaquetype, maxsize, retention, mintime) AS
  6          SELECT  o.obj#, o.owner#,
  7                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
  8                  lo.name, ts.name, lo.flags,
  9                  plob.defpro, plob.defchunk, plob.defpctver$, plob.defflags,
 10                  NVL(plob.definiexts, 0), NVL(plob.defextsize, 0),
 11                  NVL(plob.defminexts, 0), NVL(plob.defmaxexts, 0),
 12                  NVL(plob.defextpct, -1), NVL(plob.deflists, 0),
 13                  NVL(plob.defgroups, 0),
 14                  DECODE(plob.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE',
 15                         NULL),
 16                  NVL(c.type#, 0), NVL(ct.flags, 0),
 17                  NVL(ts.blocksize, NVL(
 18                          /* should be avail. thru lobcompart, lobfrag if null */
 19                  (SELECT ts2.blocksize
 20                  FROM    sys.ts$ ts2, sys.lobfrag$ lf
 21                  WHERE   l.lobj# = lf.parentobj# AND
 22                          lf.ts# = ts2.ts# AND rownum < 2),
 23                  (SELECT ts2.blocksize
 24                  FROM    sys.ts$ ts2, sys.lobcomppart$ lcp, sys.lobfrag$ lf
 25                  WHERE   l.lobj# = lcp.lobj# AND
 26                          lcp.partobj# = lf.parentobj# AND
 27                          lf.ts# = ts2.ts# AND rownum < 2))),
 28                  c.intcol#,
 29                  NVL((SELECT opq.type
 30                       FROM   sys.opqtype$ opq
 31                       WHERE  c.type# = 58 AND
 32                              c.obj# = opq.obj# AND
 33                              c.intcol# = opq.intcol#), -1),
 34                  NVL(plob.defmaxsize, 0),
 35                  NVL(plob.defretention, 0),
 36                  NVL(plob.defmintime, 0)
 37          FROM    sys.partlob$ plob, sys.obj$ o, sys.lob$ l, sys.col$ c,
 38                  sys.attrcol$ ac, sys.coltype$ ct, sys.obj$ lo, sys.ts$ ts
 39          WHERE   o.obj# = c.obj# AND
 40                  l.obj# = c.obj# AND
 41                  l.intcol# =
 42                       NVL((SELECT opq.lobcol
 43                            FROM   sys.opqtype$ opq
 44                            WHERE  c.type# = 58 AND                  /* opaque */
 45                                   c.obj# = opq.obj# AND
 46                                   c.intcol# = opq.intcol# AND
 47                                   opq.type = 1 AND                 /* XMLType */
 48                                   BITAND(opq.flags, 4) = 4   /* stored as lob */
 49                           ), c.intcol#) AND
 50                  l.obj# = ac.obj#(+) and
 51                  l.intcol# = ac.intcol#(+) and
 52                  l.lobj# = lo.obj# AND
 53                  l.lobj# = plob.lobj#  AND
 54                  plob.defts# = ts.ts# (+) AND
 55                  c.obj# = ct.obj# (+) AND
 56                  c.intcol# = ct.intcol# (+) AND
 57                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 58                  BITAND(c.property, 256) != 256          /* not sys generated */
 59  /

View created.

SQL> GRANT SELECT ON sys.exu9plb TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM table level default attributes for current
SQL> REM user's LOB columns in partitioned tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9plbu AS
  2          SELECT  *
  3          FROM    sys.exu9plb
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9plbu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 partitioned tables table level attributes definition for LOB
SQL> REM columns adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81plb (
  2                  tobjid, ownerid, cname, lobname, tsname, sgflags, property,
  3                  chunk, versionp, flags, iniexts, extsize, minexts, maxexts,
  4                  extpct, flists, freegrp, pcache, coltype, coltypflg) AS
  5          SELECT  l.tobjid, l.ownerid, l.cname, l.lobname, l.tsname, l.sgflags,
  6                  l.property,
  7                  CEIL(l.chunk * (l.blocksize / (
  8                      SELECT  t$.blocksize
  9                      FROM    sys.ts$ t$
 10                      WHERE   t$.ts# = 0))),
 11                  l.versionp, l.flags,
 12                  CEIL(l.iniexts * (l.blocksize / (
 13                      SELECT  t$.blocksize
 14                      FROM    sys.ts$ t$
 15                      WHERE   t$.ts# = 0))),
 16                  CEIL(l.extsize * (l.blocksize / (
 17                      SELECT  t$.blocksize
 18                      FROM    sys.ts$ t$
 19                      WHERE   t$.ts# = 0))),
 20                  l.minexts, l.maxexts, l.extpct, l.flists, l.freegrp, l.pcache,
 21                  l.coltype, l.coltypflg
 22          FROM    sys.exu9plb l
 23  /

View created.

SQL> GRANT SELECT ON sys.exu81plb TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's partitioned tables table level attributes definition
SQL> REM for LOB columns adjusted for TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81plbu AS
  2          SELECT  *
  3          FROM    sys.exu81plb
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81plbu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM determine attributes of noncomposite partitions of LOB columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lbp (
  2                  pobjid, tobjid, ownerid, cname, lobpname, tsname, sgflags,
  3                  chunk, versionp, flags, property, tsno, fileno, blockno,
  4                  dobjid, iname, isgflag, itsname, itsno, ifile, iblock,
  5                  idobjid, iinitrans, imaxtrans, coltype, coltypflg, blocksize)
  6        AS
  7          SELECT  /*+ NO_INDEX(i_obj1) +*/
  8                  po.obj#, o.obj#, o.owner#,
  9                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
 10                  lpo.subname,
 11                  ts.name, lpo.flags, lf.chunk, lf.pctversion$, lf.fragflags,
 12                  lf.fragpro, lf.ts#, lf.file#, lf.block#, lpo.dataobj#,
 13                  lipo.name, lipo.flags, its.name, its.ts#, ip.file#, ip.block#,
 14                  lipo.dataobj#, ip.initrans , ip.maxtrans, NVL(c.type#, 0),
 15                  (select NVL(ct.flags, 0) from sys.coltype$ ct
 16                          where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
 17                  ts.blocksize
 18          FROM    sys.indpart$ ip, sys.obj$ o, sys.col$ c,
 19                  sys.attrcol$ ac, sys.obj$ lpo,
 20                  sys.lob$ l, sys.partobj$ pobj, sys.ts$ ts, sys.obj$ lipo,
 21                  sys.lobfrag$ lf, sys.obj$ po, sys.ts$ its
 22          WHERE   pobj.obj# = o.obj# AND
 23                  MOD(pobj.spare2, 256) = 0 AND
 24                  o.obj# = c.obj# AND
 25                  c.obj# = l.obj# AND
 26                  l.obj# = ac.obj#(+) AND
 27                  l.intcol# = ac.intcol#(+) AND
 28                  c.intcol# = l.intcol# AND
 29                  l.lobj# = lf.parentobj# AND
 30                  lf.fragobj# = lpo.obj# AND
 31                  lf.tabfragobj# = po.obj# AND
 32                  lf.indfragobj# = lipo.obj# AND
 33                  lf.indfragobj# = ip.obj# AND
 34                  ip.ts# = its.ts# AND
 35                  lf.ts# = ts.ts# AND
 36                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 37                  BITAND(c.property, 256) != 256          /* not sys generated */
 38        UNION ALL                                                      /* PIOT */
 39          SELECT  /*+ NO_INDEX(i_obj1) +*/
 40                  ipt.obj#, o.obj#, o.owner#,
 41                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
 42                  lpo.subname,
 43                  ts.name, lpo.flags, lf.chunk, lf.pctversion$, lf.fragflags,
 44                  lf.fragpro, lf.ts#, lf.file#, lf.block#, lpo.dataobj#,
 45                  lipo.name, lipo.flags, its.name, its.ts#, ip.file#, ip.block#,
 46                  lipo.dataobj#, ip.initrans , ip.maxtrans, NVL(c.type#, 0),
 47                  (select NVL(ct.flags, 0) from sys.coltype$ ct
 48                          where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
 49                  ts.blocksize
 50          FROM    sys.indpart$ ipt, sys.indpart$ ip, sys.ind$ i, sys.tabpart$ tp,
 51                  sys.obj$ o, sys.col$ c, sys.attrcol$ ac,
 52                  sys.obj$ lpo, sys.lob$ l,
 53                  sys.partobj$ pobj, sys.ts$ ts, sys.obj$ lipo, sys.lobfrag$ lf,
 54                  sys.ts$ its
 55          WHERE   i.obj# = ipt.bo# AND
 56                  tp.bo# = i.bo# AND
 57                  tp.part# = ipt.part# AND
 58                  pobj.obj# = o.obj# AND
 59                  MOD(pobj.spare2, 256) = 0 AND
 60                  o.obj# = c.obj# AND
 61                  c.obj# = l.obj# AND
 62                  l.obj# = ac.obj#(+) AND
 63                  l.intcol# = ac.intcol#(+) AND
 64                  c.intcol# = l.intcol# AND
 65                  l.lobj# = lf.parentobj# AND
 66                  lf.fragobj# = lpo.obj# AND
 67                  lf.tabfragobj# = tp.obj#  AND
 68                  lf.indfragobj# = lipo.obj# AND
 69                  lf.indfragobj# = ip.obj# AND
 70                  ip.ts# = its.ts# AND
 71                  lf.ts# = ts.ts# AND
 72                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 73                  BITAND(c.property, 256) != 256          /* not sys generated */
 74  /

View created.

SQL> GRANT SELECT ON sys.exu9lbp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9lbpu AS
  2          SELECT  *
  3          FROM    sys.exu9lbp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9lbpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 attributes of noncomposite partitions of LOB columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbp (
  2                  pobjid, ownerid, cname, lobpname, tsname, sgflags, chunk,
  3                  versionp, flags, property, tsno, fileno, blockno, dobjid,
  4                  iname, isgflag, itsname, itsno, ifile, iblock, idobjid,
  5                  iinitrans, imaxtrans, coltype, coltypflg) AS
  6          SELECT  l.pobjid, l.ownerid, l.cname, l.lobpname, l.tsname, l.sgflags,
  7                  CEIL(l.chunk * (l.blocksize / (
  8                      SELECT  t$.blocksize
  9                      FROM    sys.ts$ t$
 10                      WHERE   t$.ts# = 0))),
 11                  l.versionp, l.flags, l.property, l.tsno, l.fileno, l.blockno,
 12                  l.dobjid, l.iname, l.isgflag, l.itsname, l.itsno, l.ifile,
 13                  l.iblock, l.idobjid, l.iinitrans, l.imaxtrans, l.coltype,
 14                  l.coltypflg
 15          FROM    sys.exu9lbp l
 16  /

View created.

SQL> GRANT SELECT ON sys.exu81lbp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's attributes of noncomposite partitions of LOB columns
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbpu AS
  2          SELECT  *
  3          FROM    sys.exu81lbp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81lbpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM determine LOB attributes for a composite partition
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9lbcp (
  2                  pobjid, ownerid, cname, lobcpname, tsname, sgflags, chunk,
  3                  versionp, flags, property, iniexts, extsize, minexts, maxexts,
  4                  extpct, flists, fgroups, pcache, coltype, coltypflg, blocksize,
  5                  maxsize, retention, mintime)
  6        AS
  7          SELECT  po.obj#, o.owner#,
  8                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
  9                  lpo.subname, ts.name,
 10                  lpo.flags, lcp.defchunk, lcp.defpctver$, lcp.defflags,
 11                  lcp.defpro, NVL(lcp.definiexts, 0), NVL(lcp.defextsize, 0),
 12                  NVL(lcp.defminexts, 0), NVL(lcp.defmaxexts, 0),
 13                  NVL(lcp.defextpct, -1), NVL(lcp.deflists, 0),
 14                  NVL(lcp.defgroups, 0),
 15                  DECODE(lcp.defbufpool, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE',
 16                         NULL),
 17                  NVL(c.type#, 0), NVL(ct.flags, 0),
 18                  NVL(ts.blocksize, (/*should be avail. thru tabcompart if null*/
 19                      SELECT  t$.blocksize
 20                      FROM    sys.ts$ t$
 21                      WHERE   t$.ts# = (NVL((
 22                                  SELECT  tcp$.defts#
 23                                  FROM    sys.tabcompart$ tcp$
 24                                  WHERE   tcp$.obj# = lcp.tabpartobj#),
 25                                             0)))),
 26                  lcp.defmaxsize, lcp.defretention, lcp.defmintime
 27          FROM    sys.obj$ o, sys.lob$ l, sys.col$ c, sys.attrcol$ ac,
 28                  sys.obj$ lo, sys.obj$ lpo,
 29                  sys.lobcomppart$ lcp, sys.obj$ po, sys.ts$ ts,
 30                  sys.partobj$ pobj, sys.coltype$ ct
 31          WHERE   pobj.obj# = o.obj# AND
 32                  MOD(pobj.spare2, 256) != 0 AND
 33                  o.obj# = c.obj# AND
 34                  c.obj# = l.obj# AND
 35                  l.obj# = ac.obj#(+) AND
 36                  l.intcol# = ac.intcol#(+) AND
 37                  l.intcol# = c.intcol# AND
 38                  l.lobj# = lo.obj# AND
 39                  l.lobj# = lcp.lobj# AND
 40                  lcp.tabpartobj# = po.obj# AND
 41                  lcp.partobj# = lpo.obj# AND
 42                  lcp.defts# = ts.ts# (+) AND
 43                  c.obj# = ct.obj# (+) AND
 44                  c.intcol# = ct.intcol# (+) AND
 45                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 46                  BITAND(c.property, 256) != 256          /* not sys generated */
 47  /

View created.

SQL> GRANT SELECT ON sys.exu9lbcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9lbcpu AS
  2          SELECT  *
  3          FROM    sys.exu9lbcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9lbcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 LOB attributes for a composite partition adjusted for TS specific
SQL> REM blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbcp (
  2                  pobjid, ownerid, cname, lobcpname, tsname, sgflags, chunk,
  3                  versionp, flags, property, iniexts, extsize, minexts, maxexts,
  4                  extpct, flists, fgroups, pcache, coltype, coltypflg) AS
  5          SELECT  l.pobjid, l.ownerid, l.cname, l.lobcpname, l.tsname, l.sgflags,
  6                  CEIL(l.chunk * (l.blocksize / (
  7                      SELECT  t$.blocksize
  8                      FROM    sys.ts$ t$
  9                      WHERE   t$.ts# = 0))),
 10                  l.versionp, l.flags, l.property,
 11                  CEIL(l.iniexts * (l.blocksize / (
 12                      SELECT  t$.blocksize
 13                      FROM    sys.ts$ t$
 14                      WHERE t$.ts# = 0))),
 15                  CEIL(l.extsize * (l.blocksize / (
 16                      SELECT  t$.blocksize
 17                      FROM    sys.ts$ t$
 18                      WHERE   t$.ts# = 0))),
 19                  l.minexts, l.maxexts, l.extpct, l.flists, l.fgroups, l.pcache,
 20                  l.coltype, l.coltypflg
 21          FROM    sys.exu9lbcp l
 22  /

View created.

SQL> GRANT SELECT ON sys.exu81lbcp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM pre 9.0 cur user's LOB attributes for a composite partition adjusted for
SQL> REM TS specific blocksizes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbcpu AS
  2          SELECT  *
  3          FROM    sys.exu81lbcp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81lbcpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Determine LOB storage for subpartition of LOB columns
SQL> REM for 8.1 and later
SQL> REM for 9.0 no columns needing pre 9.0 blocksize adjustment
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81lbsp (
  2                  pobjid, tobjid, ownerid, cname, lobspname, tsname, sgflags,
  3                  tsno, fileno, blockno, dobjid, iname, isgflag, itsname, itsno,
  4                  ifile, iblock, idobjid, iinitrans, imaxtrans, coltype,
  5                  coltypflg, blocksize) AS
  6          SELECT  /*+ NO_INDEX(i_obj1) +*/
  7                  spo.obj#, o.obj#, o.owner#,
  8                  DECODE(bitand(c.property,1), 0, '"'||c.name||'"', 1, ac.name),
  9                  lspo.subname,
 10                  ts.name, lspo.flags, ts.ts#, lf.file#, lf.block#,
 11                  lspo.dataobj#, lispo.name, lispo.flags, its.name, its.ts#,
 12                  isp.file#, isp.block#, lispo.dataobj#, isp.initrans,
 13                  isp.maxtrans, NVL(c.type#, 0),
 14                  (select NVL(ct.flags, 0) from sys.coltype$ ct
 15                          where ct.obj# = c.obj# AND ct.intcol# = c.intcol#),
 16                  ts.blocksize
 17          FROM    sys.lobfrag$ lf, sys.indsubpart$ isp, sys.lobcomppart$ lcp,
 18                  sys.partobj$ pobj, sys.obj$ o, sys.col$ c,
 19                  sys.attrcol$ ac, sys.lob$ l,
 20                  sys.obj$ spo, sys.obj$ lspo, sys.obj$ lispo, sys.ts$ its,
 21                  sys.ts$ ts
 22          WHERE   pobj.obj# = o.obj# AND
 23                  MOD(pobj.spare2, 256) != 0 AND
 24                  o.obj# = c.obj# AND
 25                  c.obj# = l.obj# AND
 26                  c.intcol# = l.intcol# AND
 27                  l.obj# = ac.obj#(+) AND
 28                  l.intcol# = ac.intcol#(+) AND
 29                  l.lobj# = lcp.lobj# AND
 30                  lf.parentobj# = lcp.partobj# AND
 31                  lf.fragobj# = lspo.obj# AND
 32                  lf.tabfragobj# = spo.obj# AND
 33                  lf.indfragobj# = lispo.obj# AND
 34                  lf.indfragobj# = isp.obj# AND
 35                  isp.ts# = its.ts# AND
 36                  lf.ts# = ts.ts# AND
 37                  BITAND(c.property, 32768) != 32768 AND  /* not unused column */
 38                  BITAND(c.property, 256) != 256          /* not sys generated */
 39  /

View created.

SQL> GRANT SELECT ON sys.exu81lbsp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81lbspu AS
  2          SELECT  /*+ NO_INDEX(xx1.o i_obj2) +*/ *
  3          FROM    sys.exu81lbsp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81lbspu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Job Queues
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8jbq (
  2                  job, ownerid, owner, lowner, cowner, next_date, flag,
  3                  interval#, what, nlsenv, env, instance) AS
  4          SELECT  j$.job, u$.user#, j$.powner, j$.lowner, j$.cowner,
  5                  TO_CHAR(j$.next_date, 'YYYY-MM-DD:HH24:MI:SS'),
  6                  DECODE(j$.flag, 1, 'TRUE', 0, 'FALSE'),
  7                  REPLACE(j$.interval#, '''', ''''''),
  8                  REPLACE(j$.what, '''', ''''''),
  9                  REPLACE(j$.nlsenv, '''', ''''''), j$.env, j$.field1
 10          FROM    sys.job$ j$, sys.user$ u$
 11          WHERE   j$.powner = u$.name AND
 12                  upper(what) <> 'SYS.DBMS_AQADM_SYS.REGISTER_DRIVER();'
 13  /

View created.

SQL> GRANT SELECT ON sys.exu8jbq TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8jbqu AS
  2          SELECT  *
  3          FROM    sys.exu8jbq
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8jbqu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Refresh Groups
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81rgs (
  2                  refgroup, ownerid, owner, instsite) AS
  3          SELECT  NVL(r$.refgroup, 0), u$.user#, r$.owner, r$.instsite
  4          FROM    sys.rgroup$ r$, sys.user$ u$
  5          WHERE   r$.owner = u$.name
  6  /

View created.

SQL> GRANT SELECT ON sys.exu81rgs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81rgsu AS
  2          SELECT  *
  3          FROM    sys.exu81rgs
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81rgsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rgs AS
  2          SELECT  refgroup, ownerid, owner
  3          FROM    sys.exu81rgs
  4          WHERE   instsite = 0              /* Do not include RepAPI refgroups */
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rgs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rgsu AS
  2          SELECT  *
  3          FROM    sys.exu8rgs
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rgsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Refresh Group Children
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81rgc (
  2                  owner, ownerid, child, type, refgroup, instsite) AS
  3          SELECT  rc$.owner, u$.user#, rc$.name, rc$.type#, NVL(rc$.refgroup, 0),
  4                  rc$.instsite
  5          FROM    sys.rgchild$ rc$, sys.user$ u$
  6          WHERE   rc$.owner = u$.name
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81rgc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81rgcu AS
  2          SELECT  *
  3          FROM    sys.exu81rgc
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81rgcu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rgc AS
  2          SELECT  owner, ownerid, child, type, refgroup
  3          FROM    sys.exu81rgc
  4          WHERE   instsite = 0              /* Do not include RepAPI snapshots */
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rgc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rgcu AS
  2          SELECT  *
  3          FROM    sys.exu8rgc
  4          WHERE   UID = ownerid
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rgcu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pst (
  2                  owner, ownerid, tname, tobjid, callorder, callarg, objtype,
  3                  usrarg, property) AS
  4          SELECT  a$.owner, u$.user#, a$.name, o$.obj#, a$.callorder, a$.callarg,
  5                  a$.obj_type, a$.user_arg, t$.property
  6          FROM    sys.expact$ a$, sys.user$ u$, sys.obj$ o$, sys.tab$ t$
  7          WHERE   u$.name = a$.owner AND
  8                  o$.owner# = u$.user# AND
  9                  o$.name = a$.name AND
 10                  t$.obj# = o$.obj#
 11  /

View created.

SQL> GRANT SELECT ON sys.exu8pst TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8pstu AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8pstu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions incremental/cumulative with record = Y
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pstic AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  i.owner#, i.name
  6                      FROM    sys.incexp i, sys.incvid v
  7                      WHERE   i.expid > v.expid AND
  8                              i.type# = 2)
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8pstic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions for incremental export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9psti AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9psti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions for cumulative  export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pstc AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu9tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9pstc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.1 PoSTtables actions for incremental export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81psti AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81psti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM PoSTtables actions for cumulative  export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81pstc AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu81tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81pstc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 PoSTtables actions for incremental export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8psti AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabi)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8psti TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 8.0 PoSTtables actions for cumulative  export : record = N
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pstc AS
  2          SELECT  *
  3          FROM    sys.exu8pst
  4          WHERE   (ownerid, tname) IN (
  5                      SELECT  ownerid, name
  6                      FROM    sys.exu8tabc)
  7  /

View created.

SQL> GRANT SELECT ON sys.exu8pstc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Version Control
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8ver (
  2                  version) AS
  3          SELECT  TO_NUMBER(value$)
  4          FROM    sys.props$
  5          WHERE   name = 'EXPORT_VIEWS_VERSION'
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8ver TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Check for Procedural and Replication Options (obsolete in 8.0.4)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8cpo (
  2                  parameter, value) AS
  3          SELECT  parameter, DECODE(value, 'TRUE', 1, 'FALSE', 0, 2)
  4          FROM    sys.v$option
  5          WHERE   parameter IN ('procedural', 'replication')
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8cpo TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Check for non-exportable objects for all users
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8nxp (
  2                  ownerid, owner, name, type) AS
  3          SELECT  u$.user#, n$.owner, n$.name, n$.obj_type
  4          FROM    sys.noexp$ n$, sys.user$ u$
  5          WHERE   n$.owner = u$.name
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8nxp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Check for non-exportable objects for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8nxpu AS
  2          SELECT  owner, name, type
  3          FROM    sys.exu8nxp
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8nxpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain types of top level columns of a table
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typt (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, deporder, typeid,
  5                  roottoid) AS
  6          SELECT  o.name, u.name, o.owner#, t.toid,
  7                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  8                  tm.audit$, sv.sql_version, t.properties,
  9                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 10                  NVL(t.roottoid,HEXTORAW('00'))
 11          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 12                  sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d
 13          WHERE   t.toid = c.toid AND
 14                  o.oid$ = c.toid AND
 15                  u.user# = o.owner# AND
 16                  o.obj# = tm.obj# AND
 17                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 18                  NVL(o.type#, -1) != 10 AND
 19                  t.toid  = t.tvoid AND                    /* Latest type only */
 20                  o.spare1 = sv.version# (+) AND
 21                  c.obj# = d.d_obj# AND
 22                  d.p_obj# = o.obj#
 23  /

View created.

SQL> GRANT SELECT ON sys.exu8typt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain types of top level columns of a table (9.2+)
SQL> REM  possibly having PUBLIC type synonyms
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typt (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, synobjno, colsynobjno ) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, sy.obj#, c.synobj#
  9          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 10                  sys.type_misc$ tm, sys.exu816sqv sv, sys.obj$ ne, sys.obj$ sy
 11          WHERE   t.toid = c.toid AND
 12                  o.oid$ = c.toid AND
 13                  u.user# = o.owner# AND
 14                  o.obj# = tm.obj# AND
 15                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 16                  NVL(o.type#, -1) != 10 AND
 17                  t.toid  = t.tvoid AND                    /* Latest type only */
 18                  o.spare1 = sv.version# (+) AND
 19                  ne.obj# = c.synobj#  AND /* non_exist (neg depend) */
 20                  sy.name = ne.name AND
 21                  sy.owner# = 1 AND  /* PUBLIC */
 22                  sy.type# = 5 /* SYNONYM */
 23  /

View created.

SQL> GRANT SELECT ON sys.exu9typt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain types of top level columns of a table (9.2+)
SQL> REM  possibly having PRIVATE type synonyms
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typt2 (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, synobjno, colsynobjno ) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, c.synobj#, c.synobj#
  9          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 10                  sys.type_misc$ tm, sys.exu816sqv sv
 11          WHERE   t.toid = c.toid AND
 12                  o.oid$ = c.toid AND
 13                  u.user# = o.owner# AND
 14                  o.obj# = tm.obj# AND
 15                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 16                  NVL(o.type#, -1) != 10 AND
 17                  t.toid  = t.tvoid AND                    /* Latest type only */
 18                  o.spare1 = sv.version# (+)
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9typt2 TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typtu (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, deporder, typeid,
  5                  roottoid) AS
  6          SELECT  o.name, u.name, o.owner#, t.toid,
  7                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  8                  tm.audit$, sv.sql_version, t.properties,
  9                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 10                  NVL(t.roottoid,HEXTORAW('00'))
 11          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 12                  sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d
 13          WHERE   t.toid = c.toid AND
 14                  o.oid$ = c.toid AND
 15                  u.user# = o.owner# AND
 16                  o.obj# = tm.obj# AND
 17                  BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
 18                  t.toid  = t.tvoid AND                    /* Latest type only */
 19                  NVL(o.type#, -1) != 10 AND
 20                  c.obj# = d.d_obj# AND
 21                  d.p_obj# = o.obj# AND
 22                  (o.owner# = UID OR                  /* owned by current user */
 23                  /* current user or public role have execute access to type */
 24                  o.obj# IN (
 25                      SELECT  oa.obj#
 26                      FROM    sys.objauth$ oa
 27                      WHERE   oa.obj# = o.obj# AND
 28                              oa.privilege# = 12 AND                /* execute */
 29                              oa.grantee# IN (UID, 1)) OR
 30                  EXISTS ( /* current user or public role can execute any type */
 31                      SELECT  NULL
 32                      FROM    sys.sysauth$ sa
 33                      WHERE   sa.grantee# IN (UID, 1) AND
 34                              sa.privilege# = -184)) AND
 35                  o.spare1 = sv.version# (+)
 36  /

View created.

SQL> GRANT SELECT ON sys.exu8typtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view (9.2+)
SQL> REM
SQL> REM obtain types of top level columns of a table (9.2+)
SQL> REM  possibly having PUBLIC type synonyms
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typtu (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, synobjno, colsynobjno) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, sy.obj#, c.synobj#
  9          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 10                  sys.type_misc$ tm, sys.exu816sqv sv, sys.obj$ ne, sys.obj$ sy
 11          WHERE   t.toid = c.toid AND
 12                  o.oid$ = c.toid AND
 13                  u.user# = o.owner# AND
 14                  o.obj# = tm.obj# AND
 15                  BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
 16                  t.toid  = t.tvoid AND                    /* Latest type only */
 17                  NVL(o.type#, -1) != 10 AND
 18                  (o.owner# = UID OR                  /* owned by current user */
 19                  /* current user or public role have execute access to type */
 20                  o.obj# IN (
 21                      SELECT  oa.obj#
 22                      FROM    sys.objauth$ oa
 23                      WHERE   oa.obj# = o.obj# AND
 24                              oa.privilege# = 12 AND                /* execute */
 25                              oa.grantee# IN (UID, 1)) OR
 26                  EXISTS ( /* current user or public role can execute any type */
 27                      SELECT  NULL
 28                      FROM    sys.sysauth$ sa
 29                      WHERE   sa.grantee# IN (UID, 1) AND
 30                              sa.privilege# = -184)) AND
 31                  o.spare1 = sv.version# (+) AND
 32                  ne.obj# = c.synobj#  AND /* non_exist (neg depend) */
 33                  sy.name = ne.name AND
 34                  sy.owner# = 1 AND  /* PUBLIC */
 35                  sy.type# = 5 /* SYNONYM */
 36  /

View created.

SQL> GRANT SELECT ON sys.exu9typtu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view (9.2+)
SQL> REM
SQL> REM obtain types of top level columns of a table (9.2+)
SQL> REM  possibly having PRIVATE type synonyms
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typtu2 (
  2                  tname, towner, ownerid, toid, mtime, typobjno, tabobjno,
  3                  audit$, sqlver, property,
  4                  typobjstatus, tversion, thashcode, synobjno, colsynobjno) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, c.obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, c.synobj#, c.synobj#
  9          FROM    sys.coltype$ c, sys.user$ u, sys.obj$ o, sys.type$ t,
 10                  sys.type_misc$ tm, sys.exu816sqv sv
 11          WHERE   t.toid = c.toid AND
 12                  o.oid$ = c.toid AND
 13                  u.user# = o.owner# AND
 14                  o.obj# = tm.obj# AND
 15                  BITAND(t.properties, 2128) = 0 AND/* skip system gen'd types */
 16                  t.toid  = t.tvoid AND                    /* Latest type only */
 17                  NVL(o.type#, -1) != 10 AND
 18                  (o.owner# = UID OR                  /* owned by current user */
 19                  /* current user or public role have execute access to type */
 20                  o.obj# IN (
 21                      SELECT  oa.obj#
 22                      FROM    sys.objauth$ oa
 23                      WHERE   oa.obj# = o.obj# AND
 24                              oa.privilege# = 12 AND                /* execute */
 25                              oa.grantee# IN (UID, 1)) OR
 26                  EXISTS ( /* current user or public role can execute any type */
 27                      SELECT  NULL
 28                      FROM    sys.sysauth$ sa
 29                      WHERE   sa.grantee# IN (UID, 1) AND
 30                              sa.privilege# = -184)) AND
 31                  o.spare1 = sv.version# (+)
 32  /

View created.

SQL> GRANT SELECT ON sys.exu9typtu2 TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain parent types and subtypes, given a type
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8fpt (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, typeid,
  4                  roottoid) AS
  5                  /* Parent types */
  6          SELECT  o.name, u.name, o.owner#, t.toid,
  7                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  8                  tm.audit$, sv.sql_version, t.properties,
  9                  o.status, t.version#, t.hashcode, t.typeid,
 10                  NVL(t.roottoid,HEXTORAW('00'))
 11          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 12                  sys.type_misc$ tm, sys.exu816sqv sv
 13          WHERE   o.obj# = d.p_obj# AND
 14                  o.type# = 13 AND
 15                  o.oid$ = t.toid AND
 16                  o.owner# = u.user# AND
 17                  o.obj# = tm.obj# AND
 18                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 19                  o.spare1 = sv.version# (+) AND
 20                  t.toid = t.tvoid                     /* Only the latest type */
 21       UNION      /* Subtypes */
 22          SELECT  o.name, u.name, o.owner#, t.toid,
 23                  TO_CHAR(o.mtime,  'YYYY-MM-DD:HH24:MI:SS'), o.obj#, so.obj#,
 24                  tm.audit$, sv.sql_version, t.properties,
 25                  o.status, t.version#, t.hashcode, t.typeid,
 26                  NVL(t.roottoid,HEXTORAW('00'))
 27          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ so,
 28                  sys.type_misc$ tm, sys.exu816sqv sv
 29          WHERE   o.type# = 13 AND
 30                  o.oid$ = t.toid AND
 31                  o.owner# = u.user# AND
 32                  so.oid$ = t.roottoid AND
 33                  o.obj# = tm.obj# AND
 34                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 35                  o.spare1 = sv.version# (+) AND
 36                  t.toid = t.tvoid                     /* Only the latest type */
 37  /

View created.

SQL> GRANT SELECT ON sys.exu8fpt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8fptu (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, typeid,
  4                  roottoid) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  7                  tm.audit$, sv.sql_version, t.properties,
  8                  o.status, t.version#, t.hashcode, t.typeid,
  9                  NVL(t.roottoid,HEXTORAW('00'))
 10          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 11                  sys.type_misc$ tm, sys.exu816sqv sv
 12          WHERE   o.obj# = d.p_obj# AND
 13                  o.type# = 13 AND
 14                  o.oid$ = t.toid AND
 15                  o.owner# = u.user# AND
 16                  o.obj# = tm.obj# AND
 17                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 18                  (o.owner# = UID OR                  /* owned by current user */
 19                  /* current user or public role have execute access to type */
 20                  o.obj# IN (
 21                      SELECT  oa.obj#
 22                      FROM    sys.objauth$ oa
 23                      WHERE   oa.obj# = o.obj# AND
 24                              oa.privilege# = 12 AND                /* execute */
 25                              oa.grantee# IN (UID, 1)) OR
 26                  EXISTS ( /* current user or public role can execute any type */
 27                      SELECT  NULL
 28                      FROM    sys.sysauth$ sa
 29                      WHERE   sa.grantee# IN (UID, 1) AND
 30                              sa.privilege# = -184)) AND
 31                  o.spare1 = sv.version# (+) AND
 32                  t.toid   = t.tvoid                   /* Only the latest type */
 33       UNION
 34          SELECT  o.name, u.name, o.owner#, t.toid,
 35                  TO_CHAR(o.mtime,  'YYYY-MM-DD:HH24:MI:SS'), o.obj#, so.obj#,
 36                  tm.audit$, sv.sql_version, t.properties,
 37                  o.status, t.version#, t.hashcode, t.typeid,
 38                  NVL(t.roottoid,HEXTORAW('00'))
 39          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ so,
 40                  sys.type_misc$ tm, sys.exu816sqv sv
 41          WHERE   o.type# = 13 AND
 42                  o.oid$ = t.toid AND
 43                  o.owner# = u.user# AND
 44                  so.oid$ = t.roottoid AND
 45                  o.obj# = tm.obj# AND
 46                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 47                  (o.owner# = UID OR                  /* owned by current user */
 48                  /* current user or public role have execute access to type */
 49                  o.obj# IN (
 50                          SELECT  oa.obj#
 51                          FROM    sys.objauth$ oa
 52                          WHERE   oa.obj# = o.obj# AND
 53                                  oa.privilege# = 12 AND            /* execute */
 54                                  (oa.grantee# = UID OR
 55                                   oa.grantee# = 1)) OR
 56                  /* current user or public role can execute any type */
 57                  EXISTS (
 58                          SELECT  NULL
 59                          FROM    sys.sysauth$ sa
 60                          WHERE   (sa.grantee# = UID OR
 61                                   sa.grantee# = 1) AND
 62                                  sa.privilege# = -184 )) AND
 63                  o.spare1 = sv.version# (+)  AND
 64                  t.toid   = t.tvoid                   /* Only the latest type */
 65  /

View created.

SQL> GRANT SELECT ON sys.exu8fptu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain type body object number and audit, from type name and schema name
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typb (
  2                  tname, towner, townerid, objno, sqlver) AS
  3          SELECT  o.name, u.name, o.owner#, o.obj#, sv.sql_version
  4          FROM    sys.obj$ o, sys.user$ u, sys.exu816sqv sv
  5          WHERE   o.type# = 14 AND
  6                  u.user# = o.owner# AND
  7                  o.spare1 = sv.version# (+)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8typb TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8typbu AS
  2          SELECT  *
  3          FROM    sys.exu8typb
  4          WHERE   townerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8typbu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on all types
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typ (
  2                  tname, towner, ownerid, toid, mtime, objno, audit$,
  3                  secondaryobj, sqlver, typobjstatus, tversion, thashcode,
  4                  typeid, roottoid) AS
  5          SELECT  o.name, u.name, o.owner#, t.toid,
  6                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, tm.audit$,
  7                  DECODE(BITAND(o.flags, 16), 16, 1, 0), sv.sql_version,
  8                  o.status, t.version#, t.hashcode, t.typeid,
  9                  NVL(t.roottoid,HEXTORAW('00'))
 10          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.type_misc$ tm,
 11                  sys.exu816sqv sv
 12          WHERE   o.type# = 13 AND
 13                  o.oid$ = t.toid AND
 14                  u.user# = o.owner# AND
 15                  tm.obj# = o.obj# AND
 16                  t.toid  = t.tvoid AND                 /* Only the latest rev */
 17                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 18                  u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 19                                 'LBACSYS', 'XDB', 'SI_INFORMTN_SCHEMA',
 20                                 'DIP', 'DBSNMP', 'EXFSYS', 'WMSYS','ORACLE_OCM',
 21                                 'ANONYMOUS', 'XS$NULL') AND
 22                  o.spare1 = sv.version# (+)
 23  /

View created.

SQL> GRANT SELECT ON sys.exu9typ TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on types for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9typu AS
  2          SELECT  *
  3          FROM    sys.exu9typ
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9typu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on all types
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81typ (
  2                  tname, towner, ownerid, toid, mtime, objno, audit$,
  3                  secondaryobj, sqlver, typobjstatus, tversion, thashcode) AS
  4          SELECT  o.name, u.name, o.owner#, t.toid,
  5                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, tm.audit$,
  6                  DECODE(BITAND(o.flags, 16), 16, 1, 0), sv.sql_version,
  7                  o.status, t.version#, t.hashcode
  8          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.type_misc$ tm,
  9                  sys.exu816sqv sv
 10          WHERE   o.type# = 13 AND
 11                  o.oid$ = t.toid AND
 12                  u.user# = o.owner# AND
 13                  tm.obj# = o.obj# AND
 14                  t.toid  = t.tvoid AND                 /* Only the latest rev */
 15                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 16                  u.name NOT IN ('ORDSYS', 'MDSYS', 'CTXSYS', 'ORDPLUGINS',
 17                                 'LBACSYS', 'XDB',  'SI_INFORMTN_SCHEMA',
 18                                  'DIP', 'DBSNMP', 'EXFSYS', 'WMSYS','ORACLE_OCM',
 19                                  'ANONYMOUS', 'XS$NULL') AND
 20                  o.spare1 = sv.version# (+) AND
 21                  BITAND(t.properties, 8) = 0 AND           /* skip NOT FINAL */
 22                  BITAND(t.properties, 8192) = 0             /* skip subtypes */
 23  /

View created.

SQL> GRANT SELECT ON sys.exu81typ TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on types for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81typu AS
  2          SELECT  *
  3          FROM    sys.exu81typ
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81typu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM V8.0 type view, exu8typ must be subseted from exu81typ in order to filter
SQL> REM out types marked 'secondary object'.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typ AS
  2          SELECT  *
  3          FROM    sys.exu81typ
  4          WHERE   secondaryobj = 0
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8typ TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on types for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8typu AS
  2          SELECT  *
  3          FROM    sys.exu8typ
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8typu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain parent types given a type
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92fptp (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, deporder,
  4                  typeid, roottoid) AS
  5                  /* Parent types */
  6          SELECT  o.name, u.name, o.owner#, t.toid,
  7                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  8                  tm.audit$, sv.sql_version, t.properties,
  9                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 10                  NVL(t.roottoid,HEXTORAW('00'))
 11          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 12                  sys.type_misc$ tm, sys.exu816sqv sv
 13          WHERE   o.obj# = d.p_obj# AND
 14                  o.type# = 13 AND
 15                  o.oid$ = t.toid AND
 16                  o.owner# = u.user# AND
 17                  o.obj# = tm.obj# AND
 18                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 19                  o.spare1 = sv.version# (+) AND
 20                  t.toid = t.tvoid                     /* Only the latest type */
 21  /

View created.

SQL> GRANT SELECT ON sys.exu92fptp TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92fptpu (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, deporder,
  4                  typeid, roottoid)
  5                  AS
  6                  /* Parent types */
  7          SELECT  o.name, u.name, o.owner#, t.toid,
  8                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  9                  tm.audit$, sv.sql_version, t.properties,
 10                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 11                  NVL(t.roottoid,HEXTORAW('00'))
 12          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 13                  sys.type_misc$ tm, sys.exu816sqv sv
 14          WHERE   o.obj# = d.p_obj# AND
 15                  o.type# = 13 AND
 16                  o.oid$ = t.toid AND
 17                  o.owner# = u.user# AND
 18                  o.obj# = tm.obj# AND
 19                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 20                  (o.owner# = UID OR                  /* owned by current user */
 21                  /* current user or public role have execute access to type */
 22                  o.obj# IN (
 23                      SELECT  oa.obj#
 24                      FROM    sys.objauth$ oa
 25                      WHERE   oa.obj# = o.obj# AND
 26                              oa.privilege# = 12 AND                /* execute */
 27                              oa.grantee# IN (UID, 1)) OR
 28                  EXISTS ( /* current user or public role can execute any type */
 29                      SELECT  NULL
 30                      FROM    sys.sysauth$ sa
 31                      WHERE   sa.grantee# IN (UID, 1) AND
 32                              sa.privilege# = -184)) AND
 33                  o.spare1 = sv.version# (+) AND
 34                  t.toid   = t.tvoid                   /* Only the latest type */
 35  /

View created.

SQL> GRANT SELECT ON sys.exu92fptpu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain parent types and subtypes, given a type
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92fpt (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, deporder,
  4                  typeid, roottoid, tabobjno)
  5                  AS
  6                  /* Parent types */
  7          SELECT  o.name, u.name, o.owner#, t.toid,
  8                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  9                  tm.audit$, sv.sql_version, t.properties,
 10                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 11                  NVL(t.roottoid,HEXTORAW('00')), 0
 12          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 13                  sys.type_misc$ tm, sys.exu816sqv sv
 14          WHERE   o.obj# = d.p_obj# AND
 15                  o.type# = 13 AND
 16                  o.oid$ = t.toid AND
 17                  o.owner# = u.user# AND
 18                  o.obj# = tm.obj# AND
 19                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 20                  o.spare1 = sv.version# (+) AND
 21                  t.toid = t.tvoid                     /* Only the latest type */
 22       UNION      /* Subtypes */
 23          SELECT  sto.name, u.name, sto.owner#, t.toid,
 24                  TO_CHAR(sto.mtime,  'YYYY-MM-DD:HH24:MI:SS'), sto.obj#,
 25                  d.p_obj#, tm.audit$, sv.sql_version, t.properties,
 26                  sto.status, t.version#, t.hashcode, d.order#, t.typeid,
 27                  NVL(t.roottoid,HEXTORAW('00')), tabobj.obj#
 28          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ sto,
 29                  /*   o.obj$ is for the type is question */
 30                  /* sto.obj$ is for the Sub Types of o.obj$ */
 31                  sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d,
 32                  sys.obj$ tabobj, sys.dependency$ d2, dependency$ d3
 33          WHERE   o.obj# = d.p_obj# AND
 34                  o.type# = 13 AND
 35                  sto.type# = 13 AND
 36                  sto.oid$ = t.toid AND
 37                  sto.owner# = u.user# AND
 38                  sto.obj# = tm.obj# AND
 39                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 40                  sto.spare1 = sv.version# (+) AND
 41                  t.toid = t.tvoid AND                 /* Only the latest type */
 42                  sto.obj# = d.d_obj# AND
 43                  d.p_obj#  = d2.p_obj# AND /*dependent type related to a table*/
 44                  d2.d_obj# = tabobj.obj# AND
 45                  tabobj.type# = 2 AND
 46                  sto.obj# = d3.p_obj# AND /* subtype related to same table */
 47                  d3.d_obj# = tabobj.obj#
 48  /

View created.

SQL> GRANT SELECT ON sys.exu92fpt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM User's view
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu92fptu (
  2                  tname, towner, ownerid, toid, mtime, objno, dobjno, audit$,
  3                  sqlver, property, typobjstatus, tversion, thashcode, deporder,
  4                  typeid, roottoid, tabobjno)
  5                  AS
  6                  /* Parent types */
  7          SELECT  o.name, u.name, o.owner#, t.toid,
  8                  TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o.obj#, d.d_obj#,
  9                  tm.audit$, sv.sql_version, t.properties,
 10                  o.status, t.version#, t.hashcode, d.order#, t.typeid,
 11                  NVL(t.roottoid,HEXTORAW('00')), 0
 12          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.dependency$ d,
 13                  sys.type_misc$ tm, sys.exu816sqv sv
 14          WHERE   o.obj# = d.p_obj# AND
 15                  o.type# = 13 AND
 16                  o.oid$ = t.toid AND
 17                  o.owner# = u.user# AND
 18                  o.obj# = tm.obj# AND
 19                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 20                  (o.owner# = UID OR                  /* owned by current user */
 21                  /* current user or public role have execute access to type */
 22                  o.obj# IN (
 23                      SELECT  oa.obj#
 24                      FROM    sys.objauth$ oa
 25                      WHERE   oa.obj# = o.obj# AND
 26                              oa.privilege# = 12 AND                /* execute */
 27                              oa.grantee# IN (UID, 1)) OR
 28                  EXISTS ( /* current user or public role can execute any type */
 29                      SELECT  NULL
 30                      FROM    sys.sysauth$ sa
 31                      WHERE   sa.grantee# IN (UID, 1) AND
 32                              sa.privilege# = -184)) AND
 33                  o.spare1 = sv.version# (+) AND
 34                  t.toid   = t.tvoid                   /* Only the latest type */
 35       UNION      /* Subtypes */
 36          SELECT  sto.name, u.name, sto.owner#, t.toid,
 37                  TO_CHAR(sto.mtime,  'YYYY-MM-DD:HH24:MI:SS'), sto.obj#,
 38                  d.p_obj#, tm.audit$, sv.sql_version, t.properties,
 39                  sto.status, t.version#, t.hashcode, d.order#, t.typeid,
 40                  NVL(t.roottoid,HEXTORAW('00')), tabobj.obj#
 41          FROM    sys.obj$ o, sys.user$ u, sys.type$ t, sys.obj$ sto,
 42                  /*   o.obj$ is for the type is question */
 43                  /* sto.obj$ is for the Sub Types of o.obj$ */
 44                  sys.type_misc$ tm, sys.exu816sqv sv, sys.dependency$ d,
 45                  sys.obj$ tabobj, sys.dependency$ d2, dependency$ d3
 46          WHERE   o.obj# = d.p_obj# AND
 47                  o.type# = 13 AND
 48                  sto.type# = 13 AND
 49                  sto.oid$ = t.toid AND
 50                  sto.owner# = u.user# AND
 51                  sto.obj# = tm.obj# AND
 52                  BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 53                  (sto.owner# = UID OR                /* owned by current user */
 54                  /* current user or public role have execute access to type */
 55                  sto.obj# IN (
 56                          SELECT  oa.obj#
 57                          FROM    sys.objauth$ oa
 58                          WHERE   oa.obj# = sto.obj# AND
 59                                  oa.privilege# = 12 AND            /* execute */
 60                                  (oa.grantee# = UID OR
 61                                   oa.grantee# = 1)) OR
 62                  /* current user or public role can execute any type */
 63                  EXISTS (
 64                          SELECT  NULL
 65                          FROM    sys.sysauth$ sa
 66                          WHERE   (sa.grantee# = UID OR
 67                                   sa.grantee# = 1) AND
 68                                  sa.privilege# = -184 )) AND
 69                  sto.spare1 = sv.version# (+) AND
 70                  t.toid = t.tvoid AND                 /* Only the latest type */
 71                  sto.obj# = d.d_obj# AND
 72                  d.p_obj#  = d2.p_obj# AND /*dependent type related to a table*/
 73                  d2.d_obj# = tabobj.obj# AND
 74                  tabobj.type# = 2 AND
 75                  sto.obj# = d3.p_obj# AND /* subtype related to same table */
 76                  d3.d_obj# = tabobj.obj#
 77  /

View created.

SQL> GRANT SELECT ON sys.exu92fptu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM XML/XDB schema based view of TYPEs referenced by a TABLE
SQL> REM Return the TYPE info for types that an XDB schema depends on
SQL> REM
SQL> CREATE OR REPLACE VIEW exu102xtyp (
  2          typename, typeowner, typownid, typobj#,
  3          toid, mtime, typeaudit,
  4          property, status, version, hashcode,
  5          typeid, roottoid,
  6          tabobjno )
  7          AS
  8          SELECT o.name, u.name, o.owner#, o.obj#,
  9                 t.toid, TO_CHAR(o.mtime, 'YYYY-MM-DD:HH24:MI:SS'), tm.audit$,
 10                 t.properties, o.status, t.version#, t.hashcode,
 11                 NVL(t.typeid,HEXTORAW('00')), NVL(t.roottoid,HEXTORAW('00')),
 12                 tabo.obj#
 13          FROM sys.user$ u, sys.obj$ o, sys.type$ t,sys.type_misc$ tm,
 14               sys.dependency$ d, sys.exu816sqv sv, sys.obj$ tabo
 15          WHERE t.toid = o.oid$ AND
 16                u.user# = o.owner# AND
 17                o.obj# = tm.obj# AND
 18                BITAND(t.properties, 2128) = 0 AND /* skip system gen'd types*/
 19                NVL(o.type#, -1) != 10 AND
 20                t.toid  = t.tvoid AND                    /* Latest type only */
 21                o.spare1 = sv.version# (+) AND
 22                d.p_obj# = o.obj# AND
 23                tabo.type# = 2 AND /* table */
 24                d.d_obj# IN /* get XDB schema objs that table depends on */
 25                (SELECT d.p_obj#
 26                 FROM SYS.DEPENDENCY$ d, SYS.obj$ o
 27                 WHERE d.d_obj# = tabo.obj# AND  /* dependent object is Table */
 28                       d.p_obj# = o.obj# AND /* parent object is XDB schema */
 29                       o.type# = 55) AND
 30                o.obj# NOT IN /* ignore TYPEs that we already know about */
 31                (SELECT typobjno
 32                 FROM sys.exu8typt
 33                 WHERE tabobjno = tabo.obj#)
 34  /

View created.

SQL> GRANT SELECT ON exu102xtyp to SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain info on XDB types for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu102xtypu AS
  2          SELECT  *
  3          FROM    sys.exu102xtyp
  4          WHERE   typownid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu102xtypu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM XMLSchemaTable view
SQL> REM Return the schemaoids from sys.opqtype$ for the passed in object#
SQL> REM (table).  Return only the items owned by the currently connected user.
SQL> REM
SQL> REM This view looks for XML schema types both directly in the table and
SQL> REM in nested tables at any level.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9xmlst (schemaoid, tobjid ) AS
  2          SELECT RAWTOHEX(opq.schemaoid), o.obj#
  3          FROM sys.opqtype$ opq, sys.obj$ o
  4          WHERE (o.obj# = opq.obj# OR
  5                 opq.obj# IN (    SELECT  nt.ntab#
  6                                  FROM    sys.ntab$ nt
  7                                  START WITH nt.obj# = o.obj#
  8                                  CONNECT BY PRIOR nt.ntab# = nt.obj#)) AND
  9                opq.type = 1 AND                                   /* XML Type */
 10                BITAND(opq.flags, 2) = 2                          /* XMLSchema */
 11  /

View created.

SQL> GRANT SELECT ON sys.exu9xmlst TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM get the opqtype$ flags for xmltype - used to detect binary xml
SQL> CREATE OR REPLACE VIEW exu11xml (tobjid, flags ) AS
  2          SELECT o.obj#, opq.flags
  3          FROM sys.opqtype$ opq, sys.obj$ o
  4          WHERE (o.obj# = opq.obj# OR
  5                 opq.obj# IN (    SELECT  nt.ntab#
  6                                  FROM    sys.ntab$ nt
  7                                  START WITH nt.obj# = o.obj#
  8                                  CONNECT BY PRIOR nt.ntab# = nt.obj#)) AND
  9                opq.type = 1 AND                                   /* XML Type */
 10                BITAND(opq.flags, 4) = 4                         /* BINARY XML */
 11  /

View created.

SQL> GRANT SELECT ON sys.exu11xml TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9xdbuid (xdb_uid) AS
  2          SELECT r$.schema#
  3          FROM sys.registry$ r$
  4          WHERE r$.cid = 'XDB'
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9xdbuid TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM Add directory object IDR_DIR to noexp$
SQL> REM lrg 2612315
SQL> REM
SQL> 
SQL> INSERT INTO sys.noexp$ ( owner, name, obj_type ) VALUES
  2  ('SYS', 'IDR_DIR', 23)
  3  /

1 row created.

SQL> 
SQL> REM
SQL> REM obtain all directory aliases
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dir (
  2                  dirname, pathname, objno, audit$) AS
  3          SELECT  o$.name, d$.os_path, o$.obj#,
  4                  substr(d$.audit$, 1, 1)  ||  substr(d$.audit$, 2, 1)   || /* ALTER */
  5                  substr(d$.audit$, 3, 1)  ||  substr(d$.audit$, 4, 1)   || /* AUDIT */
  6                  substr(d$.audit$, 5, 1)  ||  substr(d$.audit$, 6, 1)   || /* COMMENT */
  7                  substr(d$.audit$, 7, 1)  ||  substr(d$.audit$, 8, 1)   || /* DELETE */
  8                  substr(d$.audit$, 9, 1)  ||  substr(d$.audit$, 10, 1)  || /* GRANT */
  9                  substr(d$.audit$, 11, 1) ||  substr(d$.audit$, 12, 1)  || /* INDEX */
 10                  substr(d$.audit$, 13, 1) ||  substr(d$.audit$, 14, 1)  || /* INSERT */
 11                  substr(d$.audit$, 15, 1) ||  substr(d$.audit$, 16, 1)  || /* LOCK */
 12                  substr(d$.audit$, 17, 1) ||  substr(d$.audit$, 18, 1)  || /* RENAME */
 13                  substr(d$.audit$, 19, 1) ||  substr(d$.audit$, 20, 1)  || /* SELECT */
 14                  substr(d$.audit$, 21, 1) ||  substr(d$.audit$, 22, 1)  || /* UPDATE */
 15                  '--'                                                   || /* REFERENCES */
 16                  substr(d$.audit$, 25, 1) ||  substr(d$.audit$, 26, 1)  || /* EXECUTE */
 17                  substr(d$.audit$, 27, 1) ||  substr(d$.audit$, 28, 1)  || /* CREATE */
 18                  substr(d$.audit$, 35, 1) ||  substr(d$.audit$, 36, 1)  || /* READ */
 19                  substr(d$.audit$, 37, 1) ||  substr(d$.audit$, 38, 1)     /* WRITE */
 20          FROM    sys.exu81obj o$, sys.dir$ d$
 21          WHERE   o$.type# = 23 AND                       /* directory aliases */
 22                  o$.obj# = d$.obj# AND
 23          NOT EXISTS (
 24              SELECT  owner, name
 25              FROM    sys.noexp$ ne$
 26              WHERE   ne$.name = o$.name AND
 27                      ne$.obj_type = 23)
 28  /

View created.

SQL> GRANT SELECT ON sys.exu8dir TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain all foreign function library names
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8lib (
  2                  lowner, libname, ownerid, filename, audit$, mtime, objno,
  3                  isstatic, istrusted) AS
  4          SELECT  u$.name, o$.name, o$.owner#, lb$.filespec, lb$.audit$,
  5                  TO_CHAR(o$.mtime, 'YYYY-MM-DD:HH24:MI:SS'), o$.obj#,
  6                  DECODE(BITAND(lb$.property, 1), 1, 1, 0),
  7                  DECODE(BITAND(lb$.property, 2), 2, 1, 0)
  8          FROM    sys.exu81obj o$, sys.user$ u$, sys.library$ lb$
  9          WHERE   o$.type# = 22 AND                            /* library name */
 10                  o$.owner# = u$.user# AND
 11                  o$.obj# = lb$.obj#
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8lib TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain foreign function library names for user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8libu AS
  2          SELECT  *
  3          FROM    sys.exu8lib
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8libu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM SCOPE and WITH ROWID information for REF columns/attributes
SQL> REM also returns any SCOPEd object objid and ref'd pkey cno/username if a pkREF
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8rfs (
  2                  objno, ownerid, property, colname, reftyp, soid, robjid,
  3                  pkeycno, pkeyowner) AS
  4          SELECT  o$.obj#, o$.owner#, c$.property,
  5                  DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
  6                  rf$.reftyp, NVL(rf$.stabid, HEXTORAW('00')),
  7                  NVL2(rf$.stabid, (SELECT  ro$.obj#
  8                                    FROM    sys.obj$ ro$
  9                                    WHERE   ro$.oid$ = rf$.stabid),
 10                       0),
 11                  DECODE(BITAND(rf$.reftyp, 4),
 12                         4, (SELECT  rcd$.con#
 13                             FROM    sys.obj$ ro$, sys.cdef$ rcd$
 14                             WHERE   ro$.oid$ = rf$.stabid AND
 15                                     rcd$.obj# = ro$.obj# AND
 16                                     rcd$.type# = 2),
 17                         0),
 18                  DECODE(BITAND(rf$.reftyp, 4),
 19                         4, (SELECT  ru$.name
 20                             FROM    sys.obj$ ro$, sys.user$ ru$
 21                             WHERE   ro$.oid$ = rf$.stabid AND
 22                                     ru$.user# = ro$.owner#),
 23                         '')
 24          FROM    sys.refcon$ rf$, sys.obj$ o$, sys.col$ c$, sys.attrcol$ a$
 25          WHERE   rf$.obj# = o$.obj# AND
 26                  rf$.obj# = c$.obj# AND
 27                  rf$.intcol# = c$.intcol# AND
 28                  rf$.obj# = a$.obj# (+) AND
 29                  rf$.intcol# = a$.intcol# (+) AND
 30                  rf$.reftyp != 0 AND
 31                  BITAND(c$.property, 32768) != 32768     /* not unused column */
 32  /

View created.

SQL> GRANT SELECT ON sys.exu8rfs TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8rfsu AS
  2          SELECT  *
  3          FROM    sys.exu8rfs
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8rfsu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM exu8rfs(u) variation for user-defined REFs - obsoleted in 9.0.2
SQL> REM
SQL> REM Initial view included the sys.cdef$ table which broke export/import
SQL> REM cycle when SCOPE IS syntax was used for table constraints.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8orfs (
  2                  objno, ownerid, property, colname, reftyp, soid, robjid, rname)
  3        AS
  4          SELECT  o$.obj#, o$.owner#, c$.property,
  5                  DECODE(BITAND(c$.property, 1), 1, a$.name, c$.name),
  6                  rf$.reftyp, rf$.stabid, ro$.obj#, ro$.name
  7          FROM    sys.refcon$ rf$, sys.obj$ o$, sys.col$ c$, sys.attrcol$ a$,
  8                  sys.obj$ ro$
  9          WHERE   rf$.obj# = o$.obj# AND
 10                  rf$.obj# = c$.obj# AND
 11                  rf$.intcol# = c$.intcol# AND
 12                  rf$.obj# = a$.obj# (+) AND
 13                  rf$.intcol# = a$.intcol# (+) AND
 14                  rf$.reftyp != 0 AND
 15                  BITAND(c$.property, 32768) != 32768 AND /* not unused column */
 16                  rf$.stabid = ro$.oid$ AND
 17                  (UID IN (o$.owner#, 0) OR
 18                   EXISTS (
 19                      SELECT  role
 20                      FROM    sys.session_roles
 21                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 22  /

View created.

SQL> GRANT SELECT ON sys.exu8orfs TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM obtain parent table info for an inner nested table
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8pnt (
  2                  pobjno, pname, pownerid, cobjno) AS
  3          SELECT  nt$.obj#, o$.name, o$.owner#, nt$.ntab#
  4          FROM    sys.obj$ o$, sys.ntab$ nt$
  5          WHERE   nt$.obj# = o$.obj#
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8pnt TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu8pntu AS
  2          SELECT  *
  3          FROM    sys.exu8pnt
  4          WHERE   pownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu8pntu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM bitmap, functional and domain indexes are included if the base table
SQL> REM is included or if the index is defined on a table, and that table
SQL> REM references a table that is included in the export.
SQL> REM
SQL> REM Note that the following 9 views do not handle references to inner
SQL> REM nested tables, since references to and from inner nested tables
SQL> REM are not currently supported by SQL.  Should SQL allow such references
SQL> REM in the future, these views will need to be modified.
SQL> REM
SQL> REM incremental export for bitmap, functional and domain indices
SQL> REM (used only when record = yes)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9indic AS
  2          SELECT  *
  3          FROM    sys.exu9ind
  4          WHERE   sysgenconst = 0 AND               /* not sys gen constraints */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  i.owner#, i.name
 10                      FROM    sys.incexp i, sys.incvid v
 11                      WHERE   i.expid > v.expid AND
 12                              i.type# = 2)
 13                    UNION (
 14                      SELECT  r.ownerid, r.tname
 15                      FROM    sys.incexp ii, sys.incvid vv, sys.exu8ref r
 16                      WHERE              /*refs a table included in the export */
 17                              r.rtname = ii.name AND
 18                              r.rownerid = ii.owner# AND
 19                              ii.expid > vv.expid AND
 20                              ii.type# = 2))
 21  /

View created.

SQL> GRANT SELECT ON sys.exu9indic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81indic AS
  2          SELECT  *
  3          FROM    sys.exu9indic
  4  /

View created.

SQL> GRANT SELECT ON sys.exu81indic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM incremental export for bitmap indices in 8.0 (used only when record = yes)
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8indic AS
  2          SELECT  *
  3          FROM    sys.exu81indic
  4          WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
  5                  type != 9                              /* nor domain indexes */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8indic TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM incremental export for bitmap, functional and domain indexes
SQL> REM note: exutabi will return the correct table name because record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9indi AS
  2          SELECT  *
  3          FROM    sys.exu9ind
  4          WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  ownerid, name
 10                      FROM    sys.exu9tabi)
 11                    UNION (
 12                      SELECT  r.ownerid, r.tname
 13                      FROM    sys.exu9tabi ii, sys.exu8ref r
 14                      WHERE   r.robjid = ii.objid))   /* table included in inc */
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9indi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81indi AS
  2          SELECT  *
  3          FROM    sys.exu81ind
  4          WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  ownerid, name
 10                      FROM    sys.exu81tabi)
 11                    UNION (
 12                      SELECT  r.ownerid, r.tname
 13                      FROM    sys.exu9tabi ii, sys.exu8ref r
 14                      WHERE   r.robjid = ii.objid))   /* table included in inc */
 15  /

View created.

SQL> GRANT SELECT ON sys.exu81indi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM incremental export for V8.0 bitmap indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8indi AS
  2          SELECT  *
  3          FROM    sys.exu81indi
  4          WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
  5                  type != 9                              /* nor domain indexes */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8indi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM cumulative export for bitmap, functional and domain indexes
SQL> REM note: assume exutabc will return correct table name because record = no
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9indc AS
  2          SELECT  *
  3          FROM    sys.exu9ind
  4          WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  ownerid, name
 10                      FROM    sys.exu9tabc)
 11                    UNION (
 12                      SELECT  r.ownerid, r.tname
 13                      FROM    sys.exu81tabc cc, sys.exu8ref r
 14                      WHERE   r.robjid = cc.objid))   /* table included in cum */
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9indc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu81indc AS
  2          SELECT  *
  3          FROM    sys.exu81ind
  4          WHERE   sysgenconst = 0 AND                /* not sys gen constraint */
  5                  (bitmap = 1 OR                             /* select bitmap, */
  6                   BITAND(property, 16) = 16 OR                 /* functional, */
  7                   type = 9) AND                         /* and domain indexes */
  8                  (iownerid, btname) IN ((
  9                      SELECT  ownerid, name
 10                      FROM    sys.exu81tabc)
 11                    UNION (
 12                      SELECT  r.ownerid, r.tname
 13                      FROM    sys.exu81tabc cc, sys.exu8ref r
 14                      WHERE   r.robjid = cc.objid))   /* table included in cum */
 15  /

View created.

SQL> GRANT SELECT ON sys.exu81indc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM cumulative export for V8.0 bitmap indexes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8indc AS
  2          SELECT  *
  3          FROM    sys.exu81indc
  4          WHERE   BITAND(property, 16) != 16 AND/*Get bitmap but not functional*/
  5                  type != 9                              /* nor domain indexes */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8indc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Operators
SQL> REM
SQL> REM Notes: sqlver obsolete in 9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81opr (
  2                  name, objid, owner, ownerid, olevel, sqlver) AS
  3          SELECT  o.name, o.obj#, u.name, o.owner#, d.dlevel, sv.sql_version
  4          FROM    sys.exu81obj o, sys.user$ u, sys.operator$ op,
  5                  sys.exu8ordop d, sys.exu816sqv sv
  6          WHERE   o.obj# = op.obj# AND
  7                  o.owner# = u.user# AND
  8                  o.obj# = d.obj#(+) AND
  9                  o.spare1 = sv.version# (+)
 10  /

View created.

SQL> GRANT SELECT ON sys.exu81opr TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get operators for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81opru AS
  2          SELECT  *
  3          FROM    sys.exu81opr
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81opru TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Operators for incremental export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81opri AS
  2          SELECT  op.*
  3          FROM    sys.exu81opr op, sys.incexp i, sys.incvid v
  4          WHERE   op.name = i.name(+) AND
  5                  op.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 33) = 33 AND
  7                  v.expid < NVL(i.expid, 9999)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81opri TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Operators for cumulative export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81oprc AS
  2          SELECT  op.*
  3          FROM    sys.exu81opr op, sys.incexp i, sys.incvid v
  4          WHERE   op.name = i.name(+) AND
  5                  op.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 33) = 33 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81oprc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Indextypes
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ity (
  2                  name, objid, owner, ownerid) AS
  3          SELECT  o.name, o.obj#, u.name, o.owner#
  4          FROM    sys.exu81obj o, sys.user$ u, sys.indtypes$ i
  5          WHERE   o.obj# = i.obj# AND
  6                  o.owner# = u.user#
  7  /

View created.

SQL> GRANT SELECT ON sys.exu81ity TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Indextypes for current user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ityu AS
  2          SELECT  *
  3          FROM    sys.exu81ity
  4          WHERE   ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81ityu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Indextypes for incremental export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ityi AS
  2          SELECT  it.*
  3          FROM    sys.exu81ity it, sys.incexp i, sys.incvid v
  4          WHERE   it.name = i.name(+) AND
  5                  it.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 32) = 32 AND
  7                  v.expid < NVL(i.expid, 9999)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu81ityi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Indextypes for cumulative export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81ityc AS
  2          SELECT  it.*
  3          FROM    sys.exu81ity it, sys.incexp i, sys.incvid v
  4          WHERE   it.name = i.name(+) AND
  5                  it.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 32) = 32 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu81ityc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Row Level Security policies
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81rls (
  2                  objown, objnam, policy, polown, polsch, polfun, stmts, chkopt,
  3                  enabled, spolicy) AS
  4          SELECT  u.name, o.name, r.pname, r.pfschma, r.ppname, r.pfname,
  5                  DECODE(BITAND(r.stmt_type, 1), 0, '', 'SELECT,') ||
  6                  DECODE(BITAND(r.stmt_type, 2), 0, '', 'INSERT,') ||
  7                  DECODE(BITAND(r.stmt_type, 4), 0, '', 'UPDATE,') ||
  8                  DECODE(BITAND(r.stmt_type, 8), 0, '', 'DELETE,'),
  9                  r.check_opt, r.enable_flag,
 10                  DECODE(BITAND(r.stmt_type, 16), 0, 0, 1)
 11          FROM    sys.user$ u, sys.obj$ o, sys.rls$ r
 12          WHERE   u.user# = o.owner# AND
 13                  r.obj# = o.obj# AND
 14                  (UID IN (0, o.owner#) OR
 15                   EXISTS (
 16                      SELECT  role
 17                      FROM    sys.session_roles
 18                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu81rls TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add support for PFGAC to get driving context
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pct (
  2                  namespace, attribute, objown, objnam) AS
  3          SELECT  c.ns, c.attr, u.name, o.name
  4          FROM    sys.rls_ctx$ c, sys.user$ u, sys.obj$ o
  5          WHERE   c.obj# = o.obj# AND
  6                  u.user# = o.owner# AND
  7                  (UID IN (o.owner#, 0) OR
  8                   EXISTS (
  9                      SELECT  role
 10                      FROM    sys.session_roles
 11                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 12  /

View created.

SQL> GRANT SELECT ON sys.exu9pct TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add support for PFGAC to get policy groups
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9pgp (
  2                  polgrp, objown, objnam) AS
  3          SELECT  g.gname, u.name, o.name
  4          FROM    sys.rls_grp$ g, sys.user$ u, sys.obj$ o
  5          WHERE   g.obj# = o.obj# AND
  6                  u.user# = o.owner# AND
  7                  (UID IN (o.owner#, 0) OR
  8                   EXISTS (
  9                      SELECT  role
 10                      FROM    sys.session_roles
 11                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 12  /

View created.

SQL> GRANT SELECT ON sys.exu9pgp TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add support for PFGAC to get RLS policies
SQL> REM
SQL> REM Get Row Level Security policies
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9rls (
  2                  objown, objnam, polgrp, policy, polown, polsch, polfun, stmt,
  3                  chkopt, enabled, spolicy) AS
  4          SELECT  u.name, o.name, r.gname, r.pname, r.pfschma, r.ppname,
  5                  r.pfname,
  6                  DECODE(BITAND(r.stmt_type, 1), 0, '', 'SELECT,') ||
  7                  DECODE(BITAND(r.stmt_type, 2), 0, '', 'INSERT,') ||
  8                  DECODE(BITAND(r.stmt_type, 4), 0, '', 'UPDATE,') ||
  9                  DECODE(BITAND(r.stmt_type, 8), 0, '', 'DELETE,'),
 10                  r.check_opt, r.enable_flag,
 11                  DECODE(BITAND(r.stmt_type, 16), 0, 0, 1)
 12          FROM    sys.user$ u, sys.obj$ o, sys.rls$ r
 13          WHERE   u.user# = o.owner# AND
 14                  r.obj# = o.obj# AND
 15                  (UID IN (o.owner#, 0) OR
 16                   EXISTS (
 17                      SELECT  role
 18                      FROM    sys.session_roles
 19                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 20  /

View created.

SQL> GRANT SELECT ON sys.exu9rls TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get all Dimensions
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dim (
  2                  ownerid, owner, dimname, dimtext) AS
  3          SELECT  o.owner#, u.name, o.name, dm.dimtext
  4          FROM    sys.obj$ o, sys.user$ u, sys.dim$ dm
  5          WHERE   u.user# = o.owner# AND
  6                  dm.obj# = o.obj# AND
  7                  (UID IN (0, o.owner#) OR
  8                   EXISTS (
  9                      SELECT  role
 10                      FROM    sys.session_roles
 11                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 12  /

View created.

SQL> GRANT SELECT ON sys.exu8dim TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Dimensions for this user
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dimu AS
  2          SELECT  *
  3          FROM    sys.exu8dim
  4  /

View created.

SQL> GRANT SELECT ON sys.exu8dimu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Dimensions for incremental export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dimi AS
  2          SELECT  dm.*
  3          FROM    sys.exu8dim dm, sys.incexp i, sys.incvid v
  4          WHERE   dm.dimname = i.name(+) AND
  5                  dm.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 43) = 43 AND
  7                  v.expid < NVL(i.expid, 9999)
  8  /

View created.

SQL> GRANT SELECT ON sys.exu8dimi TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Get Dimensions for Cumulative export.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8dimc AS
  2          SELECT  dm.*
  3          FROM    sys.exu8dim dm, sys.incexp i, sys.incvid v
  4          WHERE   dm.dimname = i.name(+) AND
  5                  dm.ownerid = i.owner#(+) AND
  6                  NVL(i.type#, 43) = 43 AND
  7                  (NVL(i.ctime, TO_DATE('01-01-1900', 'DD-MM-YYYY')) < i.itime OR
  8                   v.expid < NVL(i.expid, 9999))
  9  /

View created.

SQL> GRANT SELECT ON sys.exu8dimc TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM All procedural objects. If the user has SELECT_CATALOG_ROLE, can see all
SQL> REM objects... otherwise, just his own.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81procobj (
  2                  name, objid, owner, ownerid, type#, class, prepost, level#,
  3                  package, pkg_schema) AS
  4          SELECT  o.name, o.obj#, u.name, o.owner#, o.type#, p.class, p.prepost,
  5                  p.level#, p.package, p.schema
  6          FROM    sys.exu81obj o, sys.user$ u, sys.exppkgobj$ p
  7          WHERE   p.type# = o.type# AND
  8                  o.owner# = u.user# AND
  9                  (UID IN (o.owner#, 0) OR
 10                   EXISTS (
 11                      SELECT  role
 12                      FROM    sys.session_roles
 13                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 14  /

View created.

SQL> GRANT SELECT ON sys.exu81procobj TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM All instance class procedural objects: These are objects dependent upon a
SQL> REM parent object.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81procobjinstance (
  2                  name, objid, owner, ownerid, type#, class, prepost, level#,
  3                  package, pkg_schema, par_name, par_objid, par_property) AS
  4          SELECT  o.name, o.objid, o.owner, o.ownerid, o.type#, o.class,
  5                  o.prepost, o.level#, o.package, o.pkg_schema, op.name,
  6                  d.p_obj#, t.property
  7          FROM    sys.exu81procobj o, sys.expdepobj$ d, sys.exu81obj op,
  8                  sys.tab$ t
  9          WHERE   o.class = 3 AND
 10                  d.d_obj# = o.objid AND
 11                  d.p_obj# = op.obj# AND
 12                  d.p_obj# = t.obj#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu81procobjinstance TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Packages providing procedural object support.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81objectpkg (
  2                  package, pkg_schema, class, type#, level#) AS
  3          SELECT  package, schema, class, type#, level#
  4          FROM    sys.exppkgobj$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81objectpkg TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Packages providing procedural actions
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81actionpkg (
  2                  package, pkg_schema, class, level#) AS
  3          SELECT  package, schema, class, level#
  4          FROM    sys.exppkgact$
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81actionpkg TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Objects that have procedural actions associated with them. Users with
SQL> REM SELECT_CATALOG_ROLE or can see all objects; otherwise, just their own.
SQL> REM Return both class 3 and class 4 for this view.  Class 3 will
SQL> REM ignore namespace and class when issuing callback.
SQL> REM
SQL> REM This view is used by exu81actionobj view.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9actionobj (
  2                  name, objid, owner, ownerid, property, type#, level#,
  3                  package, pkg_schema, namespace, class ) AS
  4          SELECT  o.name, d.obj#, u.name, o.owner#, t.property, o.type#,
  5                  p.level#, p.package, p.schema, o.namespace, p.class
  6          FROM    sys.exu81obj o, sys.user$ u, sys.exppkgact$ p, sys.tab$ t,
  7                  sys.expdepact$ d
  8          WHERE   d.obj# = o.obj# AND
  9                  o.owner# = u.user# AND
 10                  d.package = p.package AND
 11                  d.schema = p.schema AND
 12                  ((p.class = 3) OR (p.class = 4)) AND
 13                  d.obj# = t.obj# AND
 14                  (UID IN (o.owner#, 0) OR
 15                   EXISTS (
 16                      SELECT  role
 17                      FROM    sys.session_roles
 18                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9actionobj TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM For 8i view, we only return class = 3.  class 4 catagory added in
SQL> REM 902 timeframe
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81actionobj (
  2                  name, objid, owner, ownerid, property, type#, level#, package,
  3                  pkg_schema) AS
  4          SELECT  oa.name, oa.objid, oa.owner, oa.ownerid, oa.property,
  5                  oa.type#, oa.level#, oa.package, oa.pkg_schema
  6          FROM    sys.exu9actionobj oa
  7          WHERE   oa.class = 3
  8  /

View created.

SQL> 
SQL> GRANT SELECT ON sys.exu81actionobj TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM
SQL> REM Get Collection Storage Compatibility Information
SQL> REM
SQL> REM v$compatibility is being removed with 10i, make sure this
SQL> REM always returns 8.1.0.0.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81csc (
  2                  release) AS
  3          SELECT  '8.1.0.0.0'
  4          FROM    DUAL
  5  /

View created.

SQL> GRANT SELECT ON sys.exu81csc TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Enumerate tables in tablespace (for PITR and transportable ts modes)
SQL> REM Include tables that are either stored in the tablespace or whose 1st
SQL> REM (sub)partition is in the tablespace.  If a table is partitioned, but
SQL> REM its first partition is not stored in one of the PITR/TTS tablespaces,
SQL> REM it will not be returned through this query.  This will effectively drop
SQL> REM the partition when the TTS tablespaces are plugged back in.
SQL> REM If a secondary partition's tablespace is not in the TTS list, it will
SQL> REM be accounted for by the PL/SQL procedure that determines whether a TTS
SQL> REM is consistent.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu81tts (
  2                  dobjid, name, ownerid, tabno, clusterflag, tsname, hakan)
  3        AS                                             /* Unpartitioned tables */
  4          SELECT  NVL(t$.dataobj#, t$.obj#), o$.name, o$.owner#, NVL(t$.tab#, 0),
  5                  NVL(t$.bobj#, 0), ts$.name, t$.spare1
  6          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$
  7          WHERE   t$.obj# = o$.obj# AND
  8                  t$.ts# = ts$.ts# AND
  9                  BITAND(o$.flags, 128) != 128 AND       /* Recycle bin object */
 10                  BITAND(t$.property, 64+512+8192) = 0    /* Not nested or IOT */
 11        UNION ALL                                   /* 1st Partition is simple */
 12          SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
 13                  ts$.name, t$.spare1
 14          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
 15                  (SELECT  bo#,
 16                           MIN(ts#) KEEP (DENSE_RANK FIRST ORDER BY part#) ts#
 17                  FROM     sys.tabpart$
 18                  GROUP BY bo#) tp1$
 19          WHERE   t$.obj# = o$.obj# AND
 20                  t$.obj# = tp1$.bo# AND
 21                  tp1$.ts# = ts$.ts# AND
 22                  BITAND(o$.flags, 128) != 128 AND
 23                  BITAND(t$.property, 64+512+8192) = 0
 24        UNION ALL                           /* 1st Partition is subpartitioned */
 25          SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
 26                  ts$.name, t$.spare1
 27          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
 28                  (SELECT  tcp$.bo#,
 29                           MIN(tsp$.ts#) KEEP
 30                             (DENSE_RANK FIRST ORDER BY
 31                               tcp$.part#, tsp$.subpart#) ts#
 32                  FROM     sys.tabcompart$ tcp$, sys.tabsubpart$ tsp$
 33                  WHERE    tcp$.obj# = tsp$.pobj#
 34                  GROUP BY tcp$.bo#) tcp1$
 35          WHERE   t$.obj# = o$.obj# AND
 36                  t$.obj# = tcp1$.bo# AND
 37                  tcp1$.ts# = ts$.ts# AND
 38                  BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
 39                  BITAND(t$.property, 64+512+8192) = 0
 40        UNION ALL                                        /* Unpartitioned IOTs */
 41          SELECT  i$.dataobj#, o$.name, o$.owner#, NVL(t$.tab#, 0),
 42                  NVL(t$.bobj#, 0), ts$.name, t$.spare1
 43          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.ind$ i$
 44          WHERE   t$.obj# = o$.obj# AND
 45                  t$.pctused$ = i$.obj# AND /*For IOTs, pctused has index obj# */
 46                  i$.ts# = ts$.ts# AND
 47                  BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
 48                  BITAND(t$.property, 64+512+8192) = 64
 49        UNION ALL                                      /* 1st Partition of IOT */
 50          SELECT  t$.obj#, o$.name, o$.owner#, NVL(t$.tab#, 0), NVL(t$.bobj#, 0),
 51                  ts$.name, t$.spare1
 52          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$,
 53                  (SELECT  bo#,
 54                           MIN(ts#) KEEP (DENSE_RANK FIRST ORDER BY part#) ts#
 55                  FROM     sys.indpart$
 56                  GROUP BY bo#) ip1$
 57          WHERE   t$.obj# = o$.obj# AND
 58                  t$.pctused$ = ip1$.bo# AND
 59                  ip1$.ts# = ts$.ts# AND
 60                  BITAND(o$.flags, 128) != 128 AND       /* recycle bin object */
 61                  BITAND(t$.property, 64+512+8192) = 64
 62  /

View created.

SQL> GRANT SELECT ON sys.exu81tts TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM Determine icache plsql mode
SQL> REM YES or NO, if not present, default to NO
SQL> REM
SQL> CREATE OR REPLACE VIEW exu8icplsql (
  2                  value) AS
  3          SELECT  value$
  4          FROM    sys.props$
  5          WHERE   name = 'ICACHE_IMP_PLSQL'
  6  /

View created.

SQL> GRANT SELECT ON sys.exu8icplsql TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Enumerate tables in tablespace (for logical export of tablespaces)
SQL> REM Include tables that are either stored in the tablespace or have a partition
SQL> REM stored in the tablespace.  Ignore tables in SYS and cartridge schemas.
SQL> REM dobjid and tabno are not used for logical export.
SQL> REM Use sys.obj$ directly to make sure secondary objects are included.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9ltts (
  2                  dobjid, name, ownerid, tabno, clusterflag, tsname)
  3        AS                                             /* Unpartitioned tables */
  4          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
  5          FROM    sys.tab$ t$, sys.exu81obj o$, sys.ts$ ts$
  6          WHERE   t$.obj# = o$.obj# AND
  7                  t$.ts# = ts$.ts# AND
  8                  o$.owner# != 0 AND
  9                  BITAND(t$.property, 32+64+512+8192) = 0 /* Not nested or IOT */
 10        UNION ALL                                         /* Simple Partitions */
 11          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
 12          FROM    sys.tab$ t$, sys.obj$ o$, sys.tabpart$ tp$, sys.ts$ ts$
 13          WHERE   t$.obj# = o$.obj# AND
 14                  t$.obj# = tp$.bo# AND
 15                  tp$.ts# = ts$.ts# AND
 16                  o$.owner# != 0 AND
 17                  BITAND(t$.property, 32+64+512+8192) = 32
 18        UNION ALL                                      /* Composite partitions */
 19          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
 20          FROM    sys.tab$ t$, sys.obj$ o$, sys.tabcompart$ tcp$,
 21                  sys.tabsubpart$ tsp$, sys.ts$ ts$
 22          WHERE   t$.obj# = o$.obj# AND
 23                  t$.obj# = tcp$.bo# AND
 24                  tcp$.obj# = tsp$.pobj# AND
 25                  tsp$.ts# = ts$.ts# AND
 26                  o$.owner# != 0 AND
 27                  BITAND(t$.property, 32+64+512+8192) = 32
 28        UNION ALL                                        /* Unpartitioned IOTs */
 29          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
 30          FROM    sys.tab$ t$, sys.obj$ o$, sys.ts$ ts$, sys.ind$ i$
 31          WHERE   t$.obj# = o$.obj# AND
 32                  t$.pctused$ = i$.obj# AND /* For IOTs, pctused has index obj#*/
 33                  i$.ts# = ts$.ts# AND
 34                  o$.owner# != 0 AND
 35                  BITAND(t$.property, 32+64+512+8192) = 64
 36        UNION ALL                                      /* 1st Partition of IOT */
 37          SELECT  0, o$.name, o$.owner#, 0, NVL(t$.bobj#, 0), ts$.name
 38          FROM    sys.tab$ t$, sys.obj$ o$, sys.indpart$ ip$, sys.ts$ ts$
 39          WHERE   t$.obj# = o$.obj# AND
 40                  t$.pctused$ = ip$.bo# AND
 41                  ip$.ts# = ts$.ts# AND
 42                  o$.owner# != 0 AND
 43                  BITAND(t$.property, 32+64+512+8192) = 32+64
 44  /

View created.

SQL> GRANT SELECT ON sys.exu9ltts TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add support to get n-tier authentication information out of the database.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9nta (
  2                  client, proxy, flags, role_clause, cred_type, cred_ver,
  3                  cred_minor) AS
  4          SELECT  u$.name, up$.name, pd$.flags,
  5                  DECODE(pd$.flags,
  6                         2, 'WITH NO ROLES',
  7                         4, 'WITH ROLE',
  8                         8, 'WITH ROLE ALL EXCEPT', ' '),
  9                  DECODE(pd$.credential_type#,
 10                         1, 'AUTHENTICATED USING CERTIFICATE',
 11                         2, 'AUTHENTICATED USING DISTINGUISHED NAME',
 12                         3, 'AUTHENTICATED USING KERBEROS',
 13                         4, 'AUTHENTICATED USING PASSWORD', ' '),
 14                  DECODE(pd$.credential_version#,
 15                         1, DECODE(pd$.credential_type#,
 16                                   1, 'TYPE ''X.509''',
 17                                   3, 'VERSION ''1.0''', ' '), ' '),
 18                  DECODE(pd$.credential_minor#,
 19                         1, DECODE(pd$.credential_type#,
 20                                   1, 'VERSION ''3''', ' '), ' ')
 21          FROM    sys.user$ u$, sys.user$ up$, sys.proxy_data$ pd$
 22          WHERE   pd$.client# = u$.user# AND
 23                  pd$.proxy# = up$.user#
 24  /

View created.

SQL> GRANT SELECT ON sys.exu9nta TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9ntarole (
  2                  roleid, role, client, proxy) AS
  3          SELECT  prd$.role#, ur$.name, uc$.name, up$.name
  4          FROM    sys.user$ ur$, sys.proxy_role_data$ prd$,
  5                  sys.user$ uc$, sys.user$ up$
  6          WHERE   prd$.role#   = ur$.user# AND
  7                  prd$.client# = uc$.user# AND
  8                  prd$.proxy#  = up$.user#
  9  /

View created.

SQL> GRANT SELECT ON sys.exu9ntarole TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM 10iR1 modifications for n-tier authentication
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10nta (
  2                  client, proxy, flags, role_clause, auth) AS
  3          SELECT  u$.name, up$.name, pd$.flags,
  4                  DECODE(pd$.flags,
  5                         2, 'WITH NO ROLES',
  6                         4, 'WITH ROLE',
  7                         8, 'WITH ROLE ALL EXCEPT', ' '),
  8                  DECODE(pd$.credential_type#,
  9                         5, 'AUTHENTICATION REQUIRED', ' ')
 10          FROM    sys.user$ u$, sys.user$ up$, sys.proxy_info$ pd$
 11          WHERE   pd$.client# = u$.user# AND
 12                  pd$.proxy# = up$.user#
 13  /

View created.

SQL> GRANT SELECT ON sys.exu10nta TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10ntarole (
  2                  roleid, role, client, proxy) AS
  3          SELECT  prd$.role#, ur$.name, uc$.name, up$.name
  4          FROM    sys.user$ ur$, sys.proxy_role_info$ prd$,
  5                  sys.user$ uc$, sys.user$ up$
  6          WHERE   prd$.role#   = ur$.user# AND
  7                  prd$.client# = uc$.user# AND
  8                  prd$.proxy#  = up$.user#
  9  /

View created.

SQL> GRANT SELECT ON sys.exu10ntarole TO SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the default settings for the persistent switches.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9defpswitches (
  2                  compflgs, nlslensem ) AS
  3          SELECT  a.value, b.value
  4          FROM    sys.v$parameter a, sys.v$parameter b
  5          WHERE   a.name = 'plsql_compiler_flags' AND
  6                  b.name = 'nls_length_semantics'
  7  /

View created.

SQL> GRANT SELECT ON sys.exu9defpswitches TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the two persistent sql switches for a given objid
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9objswitch (
  2                  objid, compflgs, nlslensem ) AS
  3          SELECT  a.obj#, a.value, b.value
  4          FROM    sys.settings$ a, sys.settings$ b, sys.obj$ o
  5          WHERE   o.obj#  = a.obj# AND
  6                  a.obj#  = b.obj# AND
  7                  a.param = 'plsql_compiler_flags' AND
  8                  b.param = 'nls_length_semantics' AND
  9                  (UID IN (o.owner#, 0) OR
 10                   EXISTS (
 11                      SELECT  role
 12                      FROM    sys.session_roles
 13                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 14  /

View created.

SQL> GRANT SELECT ON sys.exu9objswitch TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the default settings for the persistent switches.
SQL> REM 10i version for new plsql optimize level
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10defpswitches (
  2                  compflgs, nlslensem, optlevel ) AS
  3          SELECT  a.value, b.value, c.value
  4          FROM    sys.v$parameter a, sys.v$parameter b, sys.v$parameter c
  5          WHERE   a.name = 'plsql_compiler_flags' AND
  6                  b.name = 'nls_length_semantics' AND
  7                  c.name = 'plsql_optimize_level'
  8  /

View created.

SQL> GRANT SELECT ON sys.exu10defpswitches TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the two persistent sql switches for a given objid
SQL> REM 10i version for new plsql optimize level
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10objswitch (
  2                  objid, compflgs, nlslensem, optlevel ) AS
  3          SELECT  a.obj#, a.value, b.value, c.value
  4          FROM    sys.settings$ a, sys.settings$ b, sys.settings$ c, sys.obj$ o
  5          WHERE   o.obj#  = a.obj# AND
  6                  a.obj#  = b.obj# AND
  7                  b.obj#  = c.obj# AND
  8                  a.param = 'plsql_compiler_flags' AND
  9                  b.param = 'nls_length_semantics' AND
 10                  c.param = 'plsql_optimize_level' AND
 11                  (UID IN (o.owner#, 0) OR
 12                   EXISTS (
 13                      SELECT  role
 14                      FROM    sys.session_roles
 15                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 16  /

View created.

SQL> GRANT SELECT ON sys.exu10objswitch TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM (These 2 views 'a' versions, exist because PLSQL_COMPILER_FLAGS was
SQL> REM  changed twice during 10i.)
SQL> REM Create a view to get the default settings for the persistent switches.
SQL> REM 10ia version for new plsql code type
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10adefpswitches (
  2                  nlslensem, optlevel, codetype, warnings ) AS
  3          SELECT  a.value, b.value, c.value, d.value
  4          FROM    sys.v$parameter a, sys.v$parameter b, sys.v$parameter c,
  5                  sys.v$parameter d
  6          WHERE   a.name = 'nls_length_semantics' AND
  7                  b.name = 'plsql_optimize_level' AND
  8                  c.name = 'plsql_code_type'      AND
  9                  d.name = 'plsql_warnings'
 10  /

View created.

SQL> GRANT SELECT ON sys.exu10adefpswitches TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the five persistent sql switches for a given objid
SQL> REM 10ia version for new plsql code type & plsql debug
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10aobjswitch (
  2                  objid, nlslensem, optlevel, codetype, debug, warnings ) AS
  3          /* normal case - no overrides */
  4          SELECT  a.obj#, a.value, b.value, c.value, d.value, e.value
  5          FROM    sys.settings$ a, sys.settings$ b, sys.settings$ c,
  6                  sys.settings$ d, sys.settings$ e, sys.obj$ o
  7          WHERE   o.obj#  = a.obj# AND
  8                  a.obj#  = b.obj# AND
  9                  b.obj#  = c.obj# AND
 10                  c.obj#  = d.obj# AND
 11                  d.obj#  = e.obj# AND
 12                  a.param = 'nls_length_semantics'         AND
 13                  b.param = 'plsql_optimize_level'         AND
 14                  c.param = 'plsql_code_type'              AND
 15                  d.param = 'plsql_debug'                  AND
 16                  e.param = 'plsql_warnings'               AND
 17                  (UID IN (o.owner#, 0) OR
 18                   EXISTS (
 19                      SELECT  role
 20                      FROM    sys.session_roles
 21                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 22  /

View created.

SQL> GRANT SELECT ON sys.exu10aobjswitch TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the default settings for the persistent switches.
SQL> REM 10R2 version for new plsql_ccflags
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10r2defpswitches (
  2                  nlslensem, optlevel, codetype, warnings, ccflags ) AS
  3          SELECT  a.value, b.value, c.value, d.value, e.value
  4          FROM    sys.v$parameter a, sys.v$parameter b, sys.v$parameter c,
  5                  sys.v$parameter d, sys.v$parameter e
  6          WHERE   a.name = 'nls_length_semantics' AND
  7                  b.name = 'plsql_optimize_level' AND
  8                  c.name = 'plsql_code_type'      AND
  9                  d.name = 'plsql_warnings'       AND
 10                  e.name = 'plsql_ccflags'
 11  /

View created.

SQL> GRANT SELECT ON sys.exu10r2defpswitches TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Create a view to get the six persistent sql switches for a given objid
SQL> REM 10R2 version for new plsql_ccflags
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10r2objswitch (
  2                  objid, nlslensem, optlevel, codetype, debug, warnings,
  3                  ccflags ) AS
  4          /* normal case - no overrides */
  5          SELECT  a.obj#, a.value, b.value, c.value, d.value, e.value ,
  6                  f.value
  7          FROM    sys.settings$ a, sys.settings$ b, sys.settings$ c,
  8                  sys.settings$ d, sys.settings$ e, sys.settings$ f,
  9                  sys.obj$ o
 10          WHERE   o.obj#  = a.obj# AND
 11                  a.obj#  = b.obj# AND
 12                  b.obj#  = c.obj# AND
 13                  c.obj#  = d.obj# AND
 14                  d.obj#  = e.obj# AND
 15                  e.obj#  = f.obj# AND
 16                  a.param = 'nls_length_semantics'         AND
 17                  b.param = 'plsql_optimize_level'         AND
 18                  c.param = 'plsql_code_type'              AND
 19                  d.param = 'plsql_debug'                  AND
 20                  e.param = 'plsql_warnings'               AND
 21                  f.param = 'plsql_ccflags'                AND
 22                  (UID IN (o.owner#, 0) OR
 23                   EXISTS (
 24                      SELECT  role
 25                      FROM    sys.session_roles
 26                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 27  /

View created.

SQL> GRANT SELECT ON sys.exu10r2objswitch TO PUBLIC;

Grant succeeded.

SQL> REM
SQL> 
SQL> REM
SQL> REM Add support for FGA
SQL> REM
SQL> REM Get fine grained auditing policies
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9fga (
  2                  objown, objnam, policy, poltxt, polcol, polown, polpkg, polfun,
  3                  enabled) AS
  4          SELECT  u.name, o.name, f.pname,
  5                  replace(f.ptxt,'''',''''''),
  6                  f.pcol, f.pfschma, f.ppname,
  7                  f.pfname, f.enable_flag
  8          FROM    sys.user$ u, sys.obj$ o, sys.fga$ f
  9          WHERE   u.user# = o.owner# AND
 10                  f.obj# = o.obj# AND
 11                  (UID IN (o.owner#, 0) OR
 12                   EXISTS (
 13                      SELECT  role
 14                      FROM    sys.session_roles
 15                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 16  /

View created.

SQL> GRANT SELECT ON sys.exu9fga TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Views for 10iR1 (CDC format) snapshot log
SQL> REM
SQL> CREATE OR REPLACE VIEW exu10mvl (
  2                  ctobj#, log_owner, log_name, log_ownerid, created_time,
  3                  file_version, using_rowid_flag, using_primarykey_flag,
  4                  using_oid_flag, using_sequence_flag, change_set_name,
  5                  source_schema_name, source_table_name, created_scn,
  6                  mvl_flag, captured_values, mvl_temp_log, mvl_v7trigger,
  7                  last_altered, lowest_scn, mvl_oldest_rid, mvl_oldest_pk,
  8                  mvl_oldest_oid, mvl_oldest_new, mvl_oldest_rid_time,
  9                  mvl_oldest_pk_time, mvl_oldest_oid_time,
 10                  mvl_oldest_new_time, mvl_backcompat_view,
 11                  mvl_physmvl, highest_scn, highest_timestamp,
 12                  mvl_oldest_seq, mvl_oldest_seq_time) AS
 13          SELECT  ct.obj#, ct.change_table_schema, ct.change_table_name, u.user#,
 14                  ct.created, 7, DECODE(BITAND(ct.mvl_flag, 1), 1, 1, 0),
 15                  DECODE(BITAND(ct.mvl_flag, 2), 2, 1, 0),
 16                  DECODE(BITAND(ct.mvl_flag, 512), 512, 1, 0),
 17                  DECODE(BITAND(ct.mvl_flag, 1024), 1024, 1, 0),
 18                  ct.change_set_name, ct.source_schema_name,
 19                  ct.source_table_name, ct.created_scn, ct.mvl_flag,
 20                  ct.captured_values, ct.mvl_temp_log, ct.mvl_v7trigger,
 21                  ct.last_altered, ct.lowest_scn, ct.mvl_oldest_rid,
 22                  ct.mvl_oldest_pk, ct.mvl_oldest_oid, ct.mvl_oldest_new,
 23                  ct.mvl_oldest_rid_time, ct.mvl_oldest_pk_time,
 24                  ct.mvl_oldest_oid_time, ct.mvl_oldest_new_time,
 25                  ct.mvl_backcompat_view, ct.mvl_physmvl, ct.highest_scn,
 26                  ct.highest_timestamp, ct.mvl_oldest_seq, ct.mvl_oldest_seq_time
 27          FROM    sys.cdc_change_tables$ ct, sys.user$ u
 28          WHERE   ct.change_table_schema = u.name AND
 29                  ct.mvl_flag IS NOT NULL AND
 30                  BITAND(ct.mvl_flag, 128) = 128 AND
 31                  (UID IN (0, u.user#) OR
 32                   EXISTS (
 33                      SELECT  role
 34                      FROM    sys.session_roles
 35                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 36  /

View created.

SQL> GRANT SELECT ON sys.exu10mvl TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu10mvlu AS
  2          SELECT  *
  3          FROM    sys.exu10mvl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu10mvlu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Adding 9.0 (CDC format) snapshot log support JohnG 06JUL00
SQL> REM new (CDC format) MV log views for v9.0
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9mvl (
  2                  ctobj#, log_owner, log_name, log_ownerid, created_time,
  3                  file_version, using_rowid_flag, using_primarykey_flag,
  4                  using_oid_flag, using_sequence_flag, change_set_name,
  5                  source_schema_name, source_table_name, created_scn,
  6                  mvl_flag, captured_values, mvl_temp_log, mvl_v7trigger,
  7                  last_altered, lowest_scn, mvl_oldest_rid, mvl_oldest_pk,
  8                  mvl_oldest_oid, mvl_oldest_new, mvl_oldest_rid_time,
  9                  mvl_oldest_pk_time, mvl_oldest_oid_time,
 10                  mvl_oldest_new_time, mvl_backcompat_view,
 11                  mvl_physmvl, highest_scn, highest_timestamp) AS
 12          SELECT  ct.obj#, ct.change_table_schema, ct.change_table_name, u.user#,
 13                  ct.created, 5, DECODE(BITAND(ct.mvl_flag, 1), 1, 1, 0),
 14                  DECODE(BITAND(ct.mvl_flag, 2), 2, 1, 0),
 15                  DECODE(BITAND(ct.mvl_flag, 512), 512, 1, 0),
 16                  DECODE(BITAND(ct.mvl_flag, 1024), 1024, 1, 0),
 17                  ct.change_set_name, ct.source_schema_name,
 18                  ct.source_table_name, ct.created_scn, ct.mvl_flag,
 19                  ct.captured_values, ct.mvl_temp_log, ct.mvl_v7trigger,
 20                  ct.last_altered, ct.lowest_scn, ct.mvl_oldest_rid,
 21                  ct.mvl_oldest_pk, ct.mvl_oldest_oid, ct.mvl_oldest_new,
 22                  ct.mvl_oldest_rid_time, ct.mvl_oldest_pk_time,
 23                  ct.mvl_oldest_oid_time, ct.mvl_oldest_new_time,
 24                  ct.mvl_backcompat_view, ct.mvl_physmvl, ct.highest_scn,
 25                  ct.highest_timestamp
 26          FROM    sys.cdc_change_tables$ ct, sys.user$ u
 27          WHERE   ct.change_table_schema = u.name AND
 28                  ct.mvl_flag IS NOT NULL AND
 29                  BITAND(ct.mvl_flag, 128) = 128 AND
 30                  (UID IN (0, u.user#) OR
 31                   EXISTS (
 32                      SELECT  role
 33                      FROM    sys.session_roles
 34                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 35  /

View created.

SQL> GRANT SELECT ON sys.exu9mvl TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlu AS
  2          SELECT  *
  3          FROM    sys.exu9mvl
  4          WHERE   log_ownerid = UID
  5  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlu TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlcdcs AS
  2          SELECT  s.set_name, s.username, s.created, s.status, s.earliest_scn,
  3                  s.latest_scn, s.description, s.last_purged, s.last_extended,
  4                  s.mvl_invalid, s.handle
  5          FROM    sys.cdc_subscribers$ s
  6          WHERE   s.handle IN (
  7                      SELECT  t.handle
  8                      FROM    sys.cdc_subscribed_tables$ t
  9                      WHERE   t.change_table_obj# IN (
 10                                  SELECT  obj#
 11                                  FROM    sys.cdc_change_tables$ ct, sys.user$ u
 12                                  WHERE   (ct.change_table_schema = u.name AND
 13                                           u.user# = UID) OR
 14                                          UID = 0 OR
 15                                          EXISTS (
 16                                              SELECT  role
 17                                              FROM    sys.session_roles
 18                                              WHERE   role =
 19                                                      'SELECT_CATALOG_ROLE')))
 20  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlcdcs TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlcdcst AS
  2          SELECT  handle, view_name, view_status, mv_flag, mv_colvec,
  3                  change_table_obj#
  4          FROM    sys.cdc_subscribed_tables$
  5          WHERE   handle IN (
  6                      SELECT  t.handle
  7                      FROM    sys.cdc_subscribed_tables$ t
  8                      WHERE   t.change_table_obj# IN (
  9                                  SELECT  obj#
 10                                  FROM    sys.cdc_change_tables$ ct, sys.user$ u
 11                                  WHERE   (ct.change_table_schema = u.name AND
 12                                           u.user# = UID) OR
 13                                          UID = 0 OR
 14                                          EXISTS (
 15                                              SELECT  role
 16                                              FROM    sys.session_roles
 17                                              WHERE   role =
 18                                                      'SELECT_CATALOG_ROLE')))
 19  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlcdcst TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlcdcsc AS
  2          SELECT  column_name, handle, change_table_obj#
  3          FROM    sys.cdc_subscribed_columns$
  4          WHERE   handle IN (
  5                      SELECT  t.handle
  6                      FROM    sys.cdc_subscribed_tables$ t
  7                      WHERE   t.change_table_obj# IN (
  8                                  SELECT  obj#
  9                                  FROM    sys.cdc_change_tables$ ct, sys.user$ u
 10                                  WHERE   (ct.change_table_schema = u.name AND
 11                                           u.user# = UID) OR
 12                                          UID = 0 OR
 13                                          EXISTS (
 14                                              SELECT  role
 15                                              FROM    sys.session_roles
 16                                              WHERE   role =
 17                                                      'SELECT_CATALOG_ROLE')))
 18  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlcdcsc TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW exu9mvlcdccc AS
  2          SELECT  column_name, created, created_scn, change_table_obj#
  3          FROM    sys.cdc_change_columns$
  4          WHERE   change_table_obj# IN (
  5                      SELECT  obj#
  6                      FROM    sys.cdc_change_tables$ ct, sys.user$ u
  7                      WHERE   (UID = u.user# AND
  8                               ct.change_table_schema = u.name) OR
  9                              (UID = 0 AND
 10                               ct.change_table_schema = u.name) OR
 11                              EXISTS (
 12                                  SELECT  role
 13                                  FROM    sys.session_roles
 14                                  WHERE   role = 'SELECT_CATALOG_ROLE'))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9mvlcdccc TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Substitutable and 'is type of' inheritance constraints
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9inhcolcons
  2          (tobjid, intcolid, cname, typeflags, subtypeflags,
  3           typeownerid, typeowner, typename)
  4      AS SELECT
  5          ct$.obj#, ct$.intcol#,
  6          DECODE(BITAND(c$.property,1), 0, '"'||c$.name||'"', 1, ac$.name),
  7          ct$.flags, NVL(sc$.flags,0),
  8          NVL(so$.owner#,0), NVL(su$.name,' '), NVL(so$.name,' ')
  9      FROM
 10          sys.coltype$ ct$, sys.col$ c$, sys.attrcol$ ac$, sys.subcoltype$ sc$,
 11          sys.obj$ so$, sys.user$ su$, sys.obj$ to$
 12      WHERE
 13          bitand (ct$.flags, (512+1024+2048+4096)) != 0 AND
 14          ct$.obj# = c$.obj# AND
 15          ct$.intcol# = c$.intcol# AND
 16          ct$.obj# = ac$.obj# (+) AND
 17          ct$.intcol# = ac$.intcol# (+) AND
 18          ct$.obj# = sc$.obj# (+) AND
 19          ct$.intcol# = sc$.intcol# (+) AND
 20          bitand(NVL(sc$.flags,1),1+2) != 0 AND
 21          sc$.toid = so$.oid$ (+) AND
 22          so$.owner# = su$.user# (+) AND
 23          ct$.obj# = to$.obj# AND
 24          (UID = 0 OR (UID = to$.owner#) OR
 25           EXISTS(SELECT * FROM session_roles WHERE role='SELECT_CATALOG_ROLE'))
 26  /

View created.

SQL> GRANT SELECT ON sys.exu9inhcolcons TO PUBLIC;

Grant succeeded.

SQL> 
SQL> 
SQL> REM end of 9.0 (CDC format) MV log support
SQL> 
SQL> REM
SQL> REM get eXternal TaBle data
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9xtb (
  2                  objid, default_dir, type, nr_locations, reject_limit, par_type,
  3                  param_clob, position, directory, name) AS
  4          SELECT  et$.obj#, et$.default_dir, et$.type$, et$.nr_locations,
  5                  et$.reject_limit, et$.par_type, et$.param_clob,
  6                  el$.position, el$.dir, el$.name
  7          FROM    sys.external_location$ el$, sys.external_tab$ et$, sys.obj$ o$
  8          WHERE   el$.obj# = et$.obj# AND
  9                  el$.obj# = o$.obj#  AND
 10                  (UID IN (o$.owner#, 0) OR
 11                   EXISTS (
 12                      SELECT  role
 13                      FROM    sys.session_roles
 14                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 15  /

View created.

SQL> GRANT SELECT ON sys.exu9xtb TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Export view to Get Sort Area Size.
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9gsas (
  2                  value) AS
  3          SELECT  value
  4          FROM    sys.v$parameter
  5          WHERE   name = 'sort_area_size'
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9gsas TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM NOT NULL column constraints - only used for object tables
SQL> REM
SQL> CREATE OR REPLACE VIEW exu9otnnull (tobjid, name, conname, defer) AS
  2    SELECT  tobjid, name, conname, defer
  3    FROM    sys.exu8col_temp
  4    WHERE   isnull = 1 AND
  5            BITAND(colprop, 32) != 32       /* Not hidden (exploded col/attrs) */
  6  /

View created.

SQL> GRANT SELECT ON sys.exu9otnnull  TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to see if a table is compressed (new for 10i).
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expcompressedtab
  2      (SPARE1, TOBJ$) AS
  3          SELECT s.spare1, t.obj#
  4          FROM   sys.tab$ t, sys.seg$ s
  5          WHERE  t.ts#    = s.ts#
  6          AND    t.file#  = s.file#
  7          AND    t.block# = s.block#
  8          AND    s.type#  = 5
  9          AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048)
 10  /

View created.

SQL> GRANT SELECT ON sys.expcompressedtab TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to see if a partition is compressed (new for 10i).
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expcompressedpart
  2      (SPARE1, TOBJ$) AS
  3          SELECT s.spare1, t.obj#
  4          FROM   sys.tabpart$ t, sys.seg$ s
  5          WHERE  t.ts#    = s.ts#
  6          AND    t.file#  = s.file#
  7          AND    t.block# = s.block#
  8          AND    s.type#  = 5
  9          AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048)
 10  /

View created.

SQL> GRANT SELECT ON sys.expcompressedpart TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to see if a subpartition is compressed (new for 10i).
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expcompressedsub
  2      (SPARE1, TOBJ$) AS
  3          SELECT s.spare1, t.obj#
  4          FROM   sys.tabsubpart$ t, sys.seg$ s
  5          WHERE  t.ts#    = s.ts#
  6          AND    t.file#  = s.file#
  7          AND    t.block# = s.block#
  8          AND    s.type#  = 5
  9          AND    (bitand(s.spare1,4096) = 4096 OR bitand(s.spare1,2048) = 2048)
 10  /

View created.

SQL> GRANT SELECT ON sys.expcompressedsub TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to see if USER has EXEMPT ACCESS POLICY privilege.
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expexempt
  2      (COUNT) AS
  3          SELECT  COUNT(*)
  4          FROM    sys.sysauth$
  5          WHERE   (privilege# =
  6                          (SELECT privilege
  7                           FROM   sys.system_privilege_map
  8                           WHERE  name = 'EXEMPT ACCESS POLICY'))
  9          AND     grantee# = UID   /* user directly has priv */
 10          OR      (grantee# = UID   /* user has role with priv */
 11                          AND privilege# > 0
 12                          AND privilege# IN
 13                                  (SELECT u1.privilege#
 14                                   FROM sys.sysauth$ u1, sys.sysauth$ u2
 15                                   WHERE u1.grantee# = UID
 16                                   AND u1.privilege# = u2.grantee#
 17                                   AND u2.privilege# =
 18                                        (SELECT privilege
 19                                         FROM   sys.system_privilege_map
 20                                         WHERE  name = 'EXEMPT ACCESS POLICY')))
 21  /

View created.

SQL> GRANT SELECT ON sys.expexempt TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM The following four views are used to determine if a partitions's subpartition
SQL> REM were created using the table's partition template.  They are referenced by a
SQL> REM PL/SQL function in prvtpexp.
SQL> 
SQL> CREATE OR REPLACE VIEW sys.exptabsubpart AS
  2          SELECT
  3                tsp.obj#                                                 OBJNO,
  4                tsp.pobj#                                                POBJNO,
  5                row_number() OVER
  6                     (partition by tsp.pobj# order by tsp.subpart#) - 1  SUBPARTNO,
  7                bhiboundval                                              BHIBOUNDVAL,
  8                ts#                                                      TSNO
  9          FROM sys.tabsubpart$ tsp
 10  /

View created.

SQL> GRANT SELECT ON sys.exptabsubpart TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW sys.exptabsubpartdata_view AS
  2          SELECT
  3                sp.bhiboundval       SPBND,
  4                dsp.bhiboundval      DSPBND,
  5                p.obj#               PONO,
  6                sp.tsno              SPTS,
  7                dsp.ts#              DSPTS,
  8                p.defts#             PDEFTS,
  9                tpo.defts#           TDEFTS,
 10                u.datats#            UDEFTS
 11          FROM sys.tabcompart$ p, sys.partobj$ tpo, sys.exptabsubpart sp,
 12               sys.defsubpart$ dsp, sys.obj$ po, sys.obj$ spo, sys.user$ u
 13          WHERE
 14               p.bo# = tpo.obj# AND
 15               p.subpartcnt = MOD(TRUNC(tpo.spare2/65536), 65536) AND
 16               sp.pobjno = p.obj# AND
 17               po.obj# = p.obj# AND
 18               spo.obj# = sp.objno AND
 19               sp.subpartno = dsp.spart_position AND
 20               dsp.bo# = p.bo# AND
 21               u.user# = po.owner# and
 22               (spo.subname = (po.subname || '_' || dsp.spart_name) OR
 23                              (po.subname LIKE 'SYS_P%' AND
 24                               spo.subname LIKE 'SYS_SUBP%'))
 25  /

View created.

SQL> 
SQL> GRANT SELECT ON sys.exptabsubpartdata_view TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM We need to see if a subpartition has lob fragments
SQL> REM
SQL> 
SQL> CREATE OR REPLACE VIEW exptabsubpartlobfrag AS
  2          SELECT
  3                lf.parentobj#                                         PARENTOBJNO,
  4                lf.ts#                                                TSNO,
  5                lf.fragobj#                                           FRAGOBJNO,
  6                row_number() OVER
  7                   (partition by lf.parentobj# order by lf.frag#) - 1 FRAGNO,
  8                lf.tabfragobj#                                        TABFRAGOBJNO
  9          FROM sys.lobfrag$ lf
 10  /

View created.

SQL> GRANT SELECT ON sys.exptabsubpartlobfrag TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW sys.exptabsubpartlob_view AS
  2          SELECT
  3                tp.obj#            PONO,
  4                lp.defts#          LPDEFTS,
  5                lf.tsno            LFTS,
  6                lb.defts#          LCDEFTS,
  7                dsp.lob_spart_ts#  LSPDEFTS,
  8                tsp.ts#            SPTS
  9          FROM  sys.tabcompart$ tp, sys.lobcomppart$ lp, sys.partlob$ lb,
 10                sys.exptabsubpartlobfrag lf, sys.defsubpartlob$ dsp,
 11                sys.obj$ lspo, sys.obj$ tpo, sys.tabsubpart$ tsp
 12          WHERE
 13                lp.tabpartobj# = tp.obj# AND
 14                lp.lobj# = lb.lobj# and
 15                lf.parentobjno = lp.partobj# AND
 16                dsp.bo# = tp.bo# and
 17                dsp.intcol# = lb.intcol# AND
 18                lspo.obj# = lf.fragobjno AND
 19                tpo.obj# = tp.obj# AND
 20                (lspo.subname = tpo.subname || '_' || dsp.lob_spart_name OR
 21                 (tpo.subname LIKE 'SYS_P%' AND lspo.subname LIKE 'SYS_LOB_SUBP%')) AND
 22                dsp.spart_position = lf.fragno AND
 23                tsp.obj# = lf.tabfragobjno
 24       UNION ALL
 25          SELECT tp.obj#           PONO,
 26                 lp.defts#         LPDEFTS,
 27                 lf.tsno           LFTS,
 28                 lb.defts#         LCDEFTS,
 29                                   NULL,
 30                 tsp.ts#           SPTS
 31          FROM sys.tabcompart$ tp, sys.lobcomppart$ lp, sys.partlob$ lb,
 32               sys.exptabsubpartlobfrag lf, sys.obj$ lspo, sys.obj$ tpo,
 33               sys.tabsubpart$ tsp
 34          WHERE lp.tabpartobj# = tp.obj# AND
 35                lp.lobj# = lb.lobj# AND
 36                lf.parentobjno = lp.partobj# AND
 37                lb.intcol# NOT IN
 38                  (SELECT distinct dsp.intcol#
 39                    FROM sys.defsubpartlob$ dsp
 40                    WHERE dsp.bo# = tp.bo#) AND
 41                lspo.obj# = lf.fragobjno AND
 42                tpo.obj# = tp.obj# AND
 43                lspo.subname LIKE 'SYS_LOB_SUBP%' AND
 44                tsp.obj# = lf.tabfragobjno;

View created.

SQL> /

View created.

SQL> GRANT SELECT ON sys.exptabsubpartlob_view TO PUBLIC;

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE VIEW sys.expgetenccolnam AS
  2          SELECT c.name, c.obj#
  3          FROM   sys.col$ c, sys.obj$ o
  4          WHERE  bitand(c.property,67108864) = 67108864 AND /* encrypted column */
  5                 c.obj#  = o.obj#                       AND
  6                 (UID IN (o.owner#, 0) OR
  7                   EXISTS (
  8                      SELECT  role
  9                      FROM    sys.session_roles
 10                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 11  /

View created.

SQL> GRANT SELECT ON sys.expgetenccolnam TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get MAPPING table info for a NON-partitioned IOT (new for 10.2.2).
SQL> REM New for 10.2
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expmapiot
  2            (obj, dobj, ts, fileno, block, initextnt,
  3             freelists,
  4             groups,
  5             pool,
  6             tsname, logging,
  7             pctfree$,
  8             pctused$,
  9             initrans, maxtrans ) AS
 10          SELECT t.obj#, t.dataobj#, t.ts#, t.file#, t.block#, s.iniexts,
 11                 NVL(s.lists,0),
 12                 NVL(s.groups,0),
 13                 DECODE(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL),
 14                 ts.name, ts.dflogging,
 15                 MOD(t.pctfree$, 100),
 16                 t.pctused$,
 17                 t.initrans, t.maxtrans
 18          FROM   sys.tab$ t, sys.seg$ s, sys.ts$ ts, sys.obj$ o
 19          WHERE  t.ts#    = s.ts#
 20          AND    t.file#  = s.file#
 21          AND    t.block# = s.block#
 22          AND    s.type#  = 5
 23          AND    ts.ts#   = t.ts#
 24          AND    t.obj#   = o.obj#
 25          AND    (UID IN (o.owner#, 0) OR
 26                   EXISTS (
 27                      SELECT  role
 28                      FROM    sys.session_roles
 29                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 30  /

View created.

SQL> GRANT SELECT ON sys.expmapiot TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get the obj# of the mapping table of a Partitioned IOT.
SQL> REM New for 10.2
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.expgetmapobj
  2            (mapobj, iotobj) AS
  3          SELECT  t.pctfree$, t.obj#
  4          FROM    sys.tab$ t, sys.obj$ o
  5          WHERE   t.obj# = o.obj#
  6          AND     (UID IN (o.owner#, 0) OR
  7                   EXISTS (
  8                      SELECT  role
  9                      FROM    sys.session_roles
 10                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 11  /

View created.

SQL> GRANT SELECT ON sys.expgetmapobj TO PUBLIC;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM View to get MAPPING table info for a partitioned IOT (new for 10.2.2).
SQL> REM
SQL> CREATE OR REPLACE VIEW sys.exppiotmap
  2            (obj, dobj, ts, fileno, block,
  3             initextnt,
  4             freelists, groups,
  5             pool,
  6             bo, partno, tsname, logging,
  7             pctfree$,
  8             pctused$, initrans, maxtrans,
  9             blocksize)  AS
 10          SELECT t.obj#, t.dataobj#, t.ts#, t.file#, t.block#,
 11                 NVL(po.deftiniexts, 0),
 12                 po.deflists, po.defgroups,
 13                 DECODE(po.spare1, 1, 'KEEP', 2, 'RECYCLE', 'DEFAULT'),
 14                 t.bo#, t.part#, ts.name, po.deflogging,
 15                 MOD(po.defpctfree, 100),
 16                 po.defpctused, t.initrans, t.maxtrans,
 17                 NVL(ts.blocksize, 2048)   /* non null for table/indexes */
 18          FROM   sys.tabpart$ t, sys.partobj$ po, sys.ts$ ts, sys.obj$ o
 19          WHERE  ts.ts#   = t.ts#
 20          AND    t.bo#    = po.obj#
 21          AND    t.bo#    = o.obj#
 22          AND    (UID IN (o.owner#, 0) OR
 23                   EXISTS (
 24                      SELECT  role
 25                      FROM    sys.session_roles
 26                      WHERE   role = 'SELECT_CATALOG_ROLE'))
 27  /

View created.

SQL> GRANT SELECT ON sys.exppiotmap TO PUBLIC;

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem View to get XSL delimiter string (new for 11).
SQL> Rem
SQL> CREATE OR REPLACE VIEW sys.expxsldelim
  2            ( xsldelimiter ) AS
  3          SELECT SUBSTR(DEFAULT_VAL,2,4)
  4          FROM SYS.METAXSLPARAM$
  5          WHERE MODEL = 'ORACLE' AND TRANSFORM = 'PARSE' AND PARAM = 'PRS_DELIM'
  6  /

View created.

SQL> GRANT SELECT ON sys.expxsldelim TO PUBLIC;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> REM
SQL> REM Add versioning support for export. This will get bumped up as the views
SQL> REM evolve. The insert is needed for upgrades from 7.0 or new databases. The
SQL> REM update is needed for databases that have older compatibility. These are
SQL> REM the releases when the compatibility was bumped:
SQL> REM
SQL> REM    7.0.* - no compatibility - assume zero
SQL> REM    7.1.3 - set to one
SQL> REM    7.2.1 - set to two
SQL> REM    7.2.3 - set to three
SQL> REM    8.0.1 - set to four
SQL> REM    8.0.2 - set to five
SQL> REM    8.0.3 - set to six
SQL> REM    8.0.4 - set to seven
SQL> REM    8.1.6 - set to eight
SQL> REM
SQL> INSERT INTO props$
  2          SELECT  'EXPORT_VIEWS_VERSION', '8', 'Export views revision #'
  3          FROM    sys.dual
  4          WHERE   NOT EXISTS (
  5                      SELECT  'x'
  6                      FROM    sys.props$
  7                      WHERE   name = 'EXPORT_VIEWS_VERSION')
  8  /

0 rows created.

SQL> UPDATE props$ SET value$ = 8 WHERE name = 'EXPORT_VIEWS_VERSION'
  2  /

1 row updated.

SQL> COMMIT
  2  /

Commit complete.

SQL> 
SQL> REM
SQL> REM Exclude the system.help table from export
SQL> REM but avoid duplicates upon multiple runs of catexp.sql
SQL> REM
SQL> insert into noexp$
  2      select 'SYSTEM', 'HELP', 2 from sys.dual
  3      where not exists (
  4         select 'x'
  5         from   sys.noexp$
  6         where name  = 'HELP' AND
  7                   owner = 'SYSTEM' )
  8  /

0 rows created.

SQL> COMMIT
  2  /

Commit complete.

SQL> PROMPT Skipping Oracle OLAP because it is not installed or versions mismatch...
Skipping Oracle OLAP because it is not installed or versions mismatch...
SQL> PROMPT Skipping Oracle OLAP API because it is not installed or versions mismatch...
Skipping Oracle OLAP API because it is not installed or versions mismatch...
SQL> ALTER SESSION SET current_schema = SYS;

Session altered.

SQL> PROMPT Updating registry...
Updating registry...
SQL> INSERT INTO registry$history
  2    (action_time, action,
  3     namespace, version, id,
  4     bundle_series, comments)
  5  VALUES
  6    (SYSTIMESTAMP, 'APPLY',
  7     SYS_CONTEXT('REGISTRY$CTX','NAMESPACE'),
  8     '11.1.0.7',
  9     6,
 10     'CPU',
 11     'CPUJul2010');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> SPOOL off
SQL> SET echo off
Check the following log file for errors:
/oracle/product/v11.1.0.7/cfgtoollogs/catbundle/catbundle_CPU_DRCT0S_APPLY_2010Sep22_12_31_24.log
SQL> SELECT * FROM registry$history where ID = '6452863';

no rows selected

SQL> quit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/rdbms/admin
$ cd $ORACLE_HOME/cpu/view_recompile
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/cpu/view_recompile
$ sqlplus /nolog

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 12:33:44 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.

SQL> CONNECT / AS SYSDBA
Connected.
SQL> SELECT * FROM registry$history where ID = '6452863';

no rows selected

SQL> @recompile_precheck_jan2008cpu.sql

Running precheck.sql...

Number of views to be recompiled :2310
-----------------------------------------------------------------------

Number of objects to be recompiled :4390
Please follow the README.txt instructions for running viewrecomp.sql

PL/SQL procedure successfully completed.

SQL> quit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/cpu/view_recompile
$ cd $ORACLE_HOME/cpu/view_recompile
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/cpu/view_recompile
$ sqlplus /nolog

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 12:35:07 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.

SQL> CONNECT / AS SYSDBA
Connected.
SQL> SHUTDOWN IMMEDIATE
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> STARTUP UPGRADE
ORACLE instance started.

Total System Global Area 1043886080 bytes
Fixed Size                  2160352 bytes
Variable Size             985663776 bytes
Database Buffers           50331648 bytes
Redo Buffers                5730304 bytes
Database mounted.
Database opened.
SQL> @view_recompile_jan2008cpu.sql





PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


1 row created.


Commit complete.

No. of Invalid Objects is :40
Please refer to README.html to for instructions on validating these objects

PL/SQL procedure successfully completed.

Logfile for the current viewrecomp.sql session is : vcomp_DRCT0S_22Sep2010_12_36_44.log
SQL> shutdwonown;
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> SHUTDOWN;
ORA-01012: not logged on
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/cpu/view_recompile
$ sqlplus /nolog

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 12:41:28 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.

SQL> conn / as sysdba
Connected to an idle instance.
SQL> startup;
ORACLE instance started.

Total System Global Area 1043886080 bytes
Fixed Size                  2160352 bytes
Variable Size             985663776 bytes
Database Buffers           50331648 bytes
Redo Buffers                5730304 bytes
Database mounted.
Database opened.
SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/cpu/view_recompile
$ cd 
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/cpu/view_recompile
$ cd $ORACLE_HOME/rdbms/admin
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/rdbms/admin
$ sqlplus /nolog

SQL*Plus: Release 11.1.0.7.0 - Production on Wed Sep 22 12:42:19 2010

Copyright (c) 1982, 2008, Oracle.  All rights reserved.

SQL> CONNECT / AS SYSDBA
Connected.
SQL> @utlrp.sql

TIMESTAMP
--------------------------------------------------------------------------------
COMP_TIMESTAMP UTLRP_BGN  2010-09-22 12:42:34

DOC>   The following PL/SQL block invokes UTL_RECOMP to recompile invalid
DOC>   objects in the database. Recompilation time is proportional to the
DOC>   number of invalid objects in the database, so this command may take
DOC>   a long time to execute on a database with a large number of invalid
DOC>   objects.
DOC>
DOC>   Use the following queries to track recompilation progress:
DOC>
DOC>   1. Query returning the number of invalid objects remaining. This
DOC>      number should decrease with time.
DOC>         SELECT COUNT(*) FROM obj$ WHERE status IN (4, 5, 6);
DOC>
DOC>   2. Query returning the number of objects compiled so far. This number
DOC>      should increase with time.
DOC>         SELECT COUNT(*) FROM UTL_RECOMP_COMPILED;
DOC>
DOC>   This script automatically chooses serial or parallel recompilation
DOC>   based on the number of CPUs available (parameter cpu_count) multiplied
DOC>   by the number of threads per CPU (parameter parallel_threads_per_cpu).
DOC>   On RAC, this number is added across all RAC nodes.
DOC>
DOC>   UTL_RECOMP uses DBMS_SCHEDULER to create jobs for parallel
DOC>   recompilation. Jobs are created without instance affinity so that they
DOC>   can migrate across RAC nodes. Use the following queries to verify
DOC>   whether UTL_RECOMP jobs are being created and run correctly:
DOC>
DOC>   1. Query showing jobs created by UTL_RECOMP
DOC>         SELECT job_name FROM dba_scheduler_jobs
DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
DOC>
DOC>   2. Query showing UTL_RECOMP jobs that are running
DOC>         SELECT job_name FROM dba_scheduler_running_jobs
DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
DOC>#

PL/SQL procedure successfully completed.


TIMESTAMP
--------------------------------------------------------------------------------
COMP_TIMESTAMP UTLRP_END  2010-09-22 12:42:49


PL/SQL procedure successfully completed.

DOC> The following query reports the number of objects that have compiled
DOC> with errors (objects that compile with errors have status set to 3 in
DOC> obj$). If the number is higher than expected, please examine the error
DOC> messages reported with each object (using SHOW ERRORS) to see if they
DOC> point to system misconfiguration or resource constraints that must be
DOC> fixed before attempting to recompile these objects.
DOC>#

OBJECTS WITH ERRORS
-------------------
                  0

DOC> The following query reports the number of errors caught during
DOC> recompilation. If this number is non-zero, please query the error
DOC> messages in the table UTL_RECOMP_ERRORS to see if any of these errors
DOC> are due to misconfiguration or resource constraints that must be
DOC> fixed before objects can compile successfully.
DOC>#

ERRORS DURING RECOMPILATION
---------------------------
                          0


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

SQL> select object_name from dba_objects where status = 'INVALID';

OBJECT_NAME
--------------------------------------------------------------------------------
INITJVMAUX
RMJVM
JVMFCB
GETPW_PRC
GETPW_PRC

SQL>  select object_name,owernner from dba_objects where status = 'INVALID';

OBJECT_NAME
--------------------------------------------------------------------------------
OWNER
------------------------------
INITJVMAUX
SYSTEM

RMJVM
SYSTEM

JVMFCB
SYSTEM


OBJECT_NAME
--------------------------------------------------------------------------------
OWNER
------------------------------
GETPW_PRC
ETADMIN

GETPW_PRC
PUBLIC


SQL> select object_name,owner@@utlrp.sql.

TIMESTAMP
--------------------------------------------------------------------------------
COMP_TIMESTAMP UTLRP_BGN  2010-09-22 12:44:13

DOC>   The following PL/SQL block invokes UTL_RECOMP to recompile invalid
DOC>   objects in the database. Recompilation time is proportional to the
DOC>   number of invalid objects in the database, so this command may take
DOC>   a long time to execute on a database with a large number of invalid
DOC>   objects.
DOC>
DOC>   Use the following queries to track recompilation progress:
DOC>
DOC>   1. Query returning the number of invalid objects remaining. This
DOC>      number should decrease with time.
DOC>         SELECT COUNT(*) FROM obj$ WHERE status IN (4, 5, 6);
DOC>
DOC>   2. Query returning the number of objects compiled so far. This number
DOC>      should increase with time.
DOC>         SELECT COUNT(*) FROM UTL_RECOMP_COMPILED;
DOC>
DOC>   This script automatically chooses serial or parallel recompilation
DOC>   based on the number of CPUs available (parameter cpu_count) multiplied
DOC>   by the number of threads per CPU (parameter parallel_threads_per_cpu).
DOC>   On RAC, this number is added across all RAC nodes.
DOC>
DOC>   UTL_RECOMP uses DBMS_SCHEDULER to create jobs for parallel
DOC>   recompilation. Jobs are created without instance affinity so that they
DOC>   can migrate across RAC nodes. Use the following queries to verify
DOC>   whether UTL_RECOMP jobs are being created and run correctly:
DOC>
DOC>   1. Query showing jobs created by UTL_RECOMP
DOC>         SELECT job_name FROM dba_scheduler_jobs
DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
DOC>
DOC>   2. Query showing UTL_RECOMP jobs that are running
DOC>         SELECT job_name FROM dba_scheduler_running_jobs
DOC>            WHERE job_name like 'UTL_RECOMP_SLAVE_%';
DOC>#

PL/SQL procedure successfully completed.


TIMESTAMP
--------------------------------------------------------------------------------
COMP_TIMESTAMP UTLRP_END  2010-09-22 12:44:15


PL/SQL procedure successfully completed.

DOC> The following query reports the number of objects that have compiled
DOC> with errors (objects that compile with errors have status set to 3 in
DOC> obj$). If the number is higher than expected, please examine the error
DOC> messages reported with each object (using SHOW ERRORS) to see if they
DOC> point to system misconfiguration or resource constraints that must be
DOC> fixed before attempting to recompile these objects.
DOC>#

OBJECTS WITH ERRORS
-------------------
                  0

DOC> The following query reports the number of errors caught during
DOC> recompilation. If this number is non-zero, please query the error
DOC> messages in the table UTL_RECOMP_ERRORS to see if any of these errors
DOC> are due to misconfiguration or resource constraints that must be
DOC> fixed before objects can compile successfully.
DOC>#

ERRORS DURING RECOMPILATION
---------------------------
                          0


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

SQL> select object_name,owner from dba_objects where status = 'INVALID';

OBJECT_NAME
--------------------------------------------------------------------------------
OWNER
------------------------------
INITJVMAUX
SYSTEM

RMJVM
SYSTEM

JVMFCB
SYSTEM


OBJECT_NAME
--------------------------------------------------------------------------------
OWNER
------------------------------
GETPW_PRC
ETADMIN

GETPW_PRC
PUBLIC


SQL> select object_name,owner,object_type from dba_objects where status = 'INVALID';

OBJECT_NAME
--------------------------------------------------------------------------------
OWNER                          OBJECT_TYPE
------------------------------ -------------------
INITJVMAUX
SYSTEM                         PACKAGE BODY

RMJVM
SYSTEM                         PACKAGE BODY

JVMFCB
SYSTEM                         PACKAGE BODY


OBJECT_NAME
--------------------------------------------------------------------------------
OWNER                          OBJECT_TYPE
------------------------------ -------------------
GETPW_PRC
ETADMIN                        PROCEDURE

GETPW_PRC
PUBLIC                         SYNONYM


SQL> alter pakcckage system.INITJVMAUX compile body;

Warning: Package Body altered with compilation errors.

SQL> alter package system.RMJVM compile body;

Warning: Package Body altered with compilation errors.

SQL> alter package system.JVMFCB compile body;

Warning: Package Body altered with compilation errors.

SQL> exitalter SYNONYM GETPW_PRC compile;
alter SYNONYM GETPW_PRC compile
*
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> alter public SYNONYM GETPW_PRC compile;

Synonym altered.

SQL>  select object_name,owner,object_type from dba_objects where status = 'INVALID';

OBJECT_NAME
--------------------------------------------------------------------------------
OWNER                          OBJECT_TYPE
------------------------------ -------------------
INITJVMAUX
SYSTEM                         PACKAGE BODY

RMJVM
SYSTEM                         PACKAGE BODY

JVMFCB
SYSTEM                         PACKAGE BODY


OBJECT_NAME
--------------------------------------------------------------------------------
OWNER                          OBJECT_TYPE
------------------------------ -------------------
GETPW_PRC
ETADMIN                        PROCEDURE

GETPW_PRC
PUBLIC                         SYNONYM


SQL> select status from v$encryption_wallet;

STATUS
---------
CLOSED

SQL> eshutdown immediate;
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> startup;
ORACLE instance started.

Total System Global Area 1043886080 bytes
Fixed Size                  2160352 bytes
Variable Size             985663776 bytes
Database Buffers           50331648 bytes
Redo Buffers                5730304 bytes
Database mounted.
Database opened.
SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
drct0s @ oem0stl0:/oracle/product/v11.1.0.7/rdbms/admin
$ SETetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 3

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [doem1s]    ORACLE_HOME = [/oracle/product/v10.2.0.4]

doem1s @ oem0stl0:/oracle/product/v11.1.0.7/rdbms/admin
$ lsnrctl start

LSNRCTL for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production on 22-SEP-2010 12:49:15

Copyright (c) 1991, 2007, Oracle.  All rights reserved.

Starting /oracle/product/v10.2.0.4/bin/tnslsnr: please wait...

TNSLSNR for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production
System parameter file is /var/opt/oracle/listener.ora
Log messages written to /oracle/product/v10.2.0.4/network/log/listener.log
Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oem0stl0)(PORT=1527)))
TNS-01201: Listener cannot find executable /oracle/product/v11.2.0.1/bin/oracle for SID drctbk0s

Listener failed to start. See the error message(s) above...

doem1s @ oem0stl0:/oracle/product/v11.1.0.7/rdbms/admin
$ cd
doem1s @ oem0stl0:/oracle/home
$ lsnrctl start

LSNRCTL for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production on 22-SEP-2010 12:49:33

Copyright (c) 1991, 2007, Oracle.  All rights reserved.

Starting /oracle/product/v10.2.0.4/bin/tnslsnr: please wait...

TNSLSNR for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production
System parameter file is /var/opt/oracle/listener.ora
Log messages written to /oracle/product/v10.2.0.4/network/log/listener.log
Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oem0stl0)(PORT=1527)))
TNS-01201: Listener cannot find executable /oracle/product/v11.2.0.1/bin/oracle for SID drctbk0s

Listener failed to start. See the error message(s) above...

doem1s @ oem0stl0:/oracle/home
$ SetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 4

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [drct0s]    ORACLE_HOME = [/oracle/product/v11.1.0.7]

drct0s @ oem0stl0:/oracle/home
$  lsnrctl start

LSNRCTL for IBM/AIX RISC System/6000: Version 11.1.0.7.0 - Production on 22-SEP-2010 12:49:53

Copyright (c) 1991, 2008, Oracle.  All rights reserved.

Starting /oracle/product/v11.1.0.7/bin/tnslsnr: please wait...

TNSLSNR for IBM/AIX RISC System/6000: Version 11.1.0.7.0 - Production
System parameter file is /var/opt/oracle/listener.ora
Log messages written to /oracle/product/v11.1.0.7/log/diag/tnslsnr/oem0stl0/listener/alert/log.xml
Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oem0stl0)(PORT=1527)))
TNS-01201: Listener cannot find executable /oracle/product/v11.2.0.1/bin/oracle for SID drctbk0s

Listener failed to start. See the error message(s) above...

drct0s @ oem0stl0:/oracle/home
$ cd /oracle/product/v11.2.0.1/bin/
ksh: /oracle/product/v11.2.0.1/bin/:  not found
drct0s @ oem0stl0:/oracle/home
$ cd  /var/opt/oracle/
drct0s @ oem0stl0:/var/opt/oracle
$ ls -lrt
total 312
-rw-r--r--    1 oracle   dba           11037 May 21 2005  tnsnames.ora.20050521
-rw-r--r--    1 oracle   dba           11073 May 21 2005  tnsnames.ora_D2005-09-19
-rw-r--r--    1 oracle   dba            1746 Sep 19 2005  sqlnet.log
drwxr-xr-x    2 oracle   dba             256 Sep 20 2005  passwds/
lrwxrwxrwx    1 root     system           11 Oct 12 2009  oratab@ -> /etc/oratab
-rw-r--r--    1 oracle   dba             982 Dec 15 2009  appsinit.log.old
-rw-r--r--    1 oracle   dba            1124 Jan 25 2010  typescript
-rw-r--r--    1 oracle   dba             147 Apr 29 10:12 oratab.042910
-rw-r--r--    1 oracle   dba             573 Apr 29 13:32 listener.ora042910
-rw-r--r--    1 oracle   dba             650 May 21 11:09 listener.ora
-rw-r--r--    1 oracle   dba           12410 May 22 14:02 tnsnames.ora_772010
-rw-r--r--    1 oracle   dba           13264 Jul 26 11:18 tnsnames.ora
-rw-r--r--    1 oracle   dba           27651 Aug 14 05:12 orainit.log
-rw-r--r--    1 oracle   dba           18500 Aug 14 05:12 lsnr.log
-rw-r--r--    1 oracle   dba           26214 Aug 14 05:13 appsinit.log
drct0s @ oem0stl0:/var/opt/oracle
$ cp listener.ora listener.ora.2209_2010
drct0s @ oem0stl0:/var/opt/oracle
$ vicat listener.ora
LISTENER =
(ADDRESS_LIST=
 (ADDRESS=
 (PROTOCOL = TCP)
 (HOST = oem0stl0)
 (PORT = 1527)
 )
)
 
SID_LIST_LISTENER=
 (SID_LIST=
 (SID_DESC=
 (SID_NAME=doem1s)
 (ORACLE_HOME=/oracle/product/v10.2.0.4)
 (ENVS='LD_LIBRARY_PATH=/oracle/product/v10.2.0.4/lib')
 )
 (SID_DESC=
 (SID_NAME=drct0s)
 (ORACLE_HOME=/oracle/product/v11.1.0.7)
 )
 (SID_DESC=
 (SID_NAME=drctbk0s)
 (ORACLE_HOME=/oracle/product/v11.2.0.1)
 )
)
 
#
# Default params
#
STARTUP_WAIT_TIME_LISTENER = 0
CONNECT_TIMEOUT_LISTENER = 10
#TRACE_LEVEL_LISTENER = USER
#TRACE_LEVEL_CLIENT   = USER
TRACE_DIRECTORY_LISTENER = 
TRACE_FILE_LISTENER = listener.trc
TRACE_FILE_CLIENT   = sqlnet.trc
drct0s @ oem0stl0:/var/opt/oracle
$ SETetDb drctbk0s
The SID drctbk0s is not in /var/opt/oracle/oratab. Oracle environment
variables not set.  To set Oracle environment, run SetDb.
USAGE:

  SetDb 
  SetDb [-h] 
  SetDb <$ORACLE_SID>

Examples:

  SetDb
        -- prompt for a SID
  SetDb psid2s
        -- set Oracle env for instance psid2s
  SetDb -h
        -- prints usage


HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [unset]     ORACLE_HOME = [unset]

oem0stl0:/var/opt/oracle
$ SETetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 2

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [OMS_HOME]  ORACLE_HOME = [/oracle/product/oem/oms10g]

OMS_HOME @ oem0stl0:/var/opt/oracle
$ STetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 1

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [AGENT_HOME]        ORACLE_HOME = [/sys_apps_01/oem/agent10g]

AGENT_HOME @ oem0stl0:/var/opt/oracle
$ ps -ef | grep agent
    root  4718630  4784236   0   Aug 14      - 23:34 /sys_apps_01/tivoli/ITM/agent/aix526/ux/bin/stat_daemon 8 
    root  4784236        1   0   Aug 14      - 13:36 /sys_apps_01/tivoli/ITM/agent/aix526/ux/bin/kuxagent 
    root  5308564  4718630   0   Aug 14      -  2:32 /sys_apps_01/tivoli/ITM/agent/aix526/ux/bin/nfs_stat AIX 30 
    root  5570686  3867060   0   Aug 14      -  1:03 /usr/ecc/exec/mstragent -s 
  oracle  6422700        1   0   Sep 13      -  1:58 /sys_apps_01/oem/agent10g/perl/bin/perl /sys_apps_01/oem/agent10g/bin/emwd.pl agent /sys_apps_01/oem/agent10g/sysman/log/emagent.nohup 
  oracle  7995536  6422700   0   Sep 13      - 133:29 /sys_apps_01/oem/agent10g/bin/emagent 
    root  1835476  2163170   0   Aug 14      - 30:05 /sys_apps_01/tlcm/itlm/tlmagent.bin 
    root  2163170  1901032   0   Aug 14      -  0:00 /bin/ksh /sys_apps_01/tlcm/itlm/tlmagent 
    root  2884064        1   0   Aug 14      -  5:27 /sys_apps_01/tivoli/ITM/agent/aix526/um/bin/kuma620 
    root  3735938        1   0   Aug 14      -  0:56 /sys_apps_01/security/acx/bin/seagent SEOSD 
    root  3801368  4718630   0   Aug 14      -  5:27 /sys_apps_01/tivoli/ITM/agent/aix526/ux/bin/kux_vmstat 30 6 
    root  3867060        1   0   Aug 14      - 17:09 /usr/ecc/exec/mstragent 
    root  4129122  4718630   0   Aug 14      -  0:09 /sys_apps_01/tivoli/ITM/agent/aix526/ux/bin/ifstat 30 7 
   best1  5898664        1   0   Aug 14      - 117:59 /usr/adm/best1_7.4.10/bgs/bin/bgsagent -b /usr/adm/best1_7.4.10 -a 6767 -d 6768 -u best1 -i 10.158.160.214 
    root  6423030        1   0   Aug 14      -  2:00 java -Xms32M -Xmx256M -DATEVAL_CHAN=jni -showversion -DZIP=1 -DARCH=aix4-r1 -DLCF_DATDIR=/sys_apps_01/lcf/dat/1 -DLCF_BINDIR=/sys_apps_01/lcf/bin/aix4-r1/mrt -DLCF_EPLABEL=oem0stl0 -DTRACE_LEVEL=0 -DTRACE_SIZE=5000000 -DREBOOT=true -DIP_ADDRESS=10.158.160.145 -DFQHOSTNAME=oem0stl0.mastercard.com -DREHOSTNAME=oem0stl0 -DINTERP=aix4-r1 -Ddb2j.stream.error.file=/sys_apps_01/lcf/dat/1/LCFNEW/AMW/logs/db2j.log -Ddb2j.stream.error.logSeverityLevel=50000 -Ddb2j.infolog.append=false -Ddb2j.language.logStatementText= -Ddb2j.locks.waitTimeout=360 -Ddb2j.drda.host=10.158.160.145 com.tivoli.dmunix.ep.agent.Main 
  oracle 18809114  9306188   0 12:52:35  pts/6  0:00 grep agent 
AGENT_HOME @ oem0stl0:/var/opt/oracle
$ SETetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 
AGENT_HOME @ oem0stl0:/var/opt/oracle
$ cat oratab
#drctbk0s:/oracle/product/v11.2.0.1:N
OMS_HOME:/oracle/product/oem/oms10g:N
AGENT_HOME:/sys_apps_01/oem/agent10g:N
doem1s:/oracle/product/v10.2.0.4:Y
drct0s:/oracle/product/v11.1.0.7:N
AGENT_HOME @ oem0stl0:/var/opt/oracle
$ cd /oracle/product/v11.2.0.1
ksh: /oracle/product/v11.2.0.1:  not found
AGENT_HOME @ oem0stl0:/var/opt/oracle
$ vi 
AGENT_HOME @ oem0stl0:/var/opt/oracle
$ cd /var/opt/oracle
AGENT_HOME @ oem0stl0:/var/opt/oracle
$ ls -lrt
total 320
-rw-r--r--    1 oracle   dba           11037 May 21 2005  tnsnames.ora.20050521
-rw-r--r--    1 oracle   dba           11073 May 21 2005  tnsnames.ora_D2005-09-19
-rw-r--r--    1 oracle   dba            1746 Sep 19 2005  sqlnet.log
drwxr-xr-x    2 oracle   dba             256 Sep 20 2005  passwds/
lrwxrwxrwx    1 root     system           11 Oct 12 2009  oratab@ -> /etc/oratab
-rw-r--r--    1 oracle   dba             982 Dec 15 2009  appsinit.log.old
-rw-r--r--    1 oracle   dba            1124 Jan 25 2010  typescript
-rw-r--r--    1 oracle   dba             147 Apr 29 10:12 oratab.042910
-rw-r--r--    1 oracle   dba             573 Apr 29 13:32 listener.ora042910
-rw-r--r--    1 oracle   dba             650 May 21 11:09 listener.ora
-rw-r--r--    1 oracle   dba           12410 May 22 14:02 tnsnames.ora_772010
-rw-r--r--    1 oracle   dba           13264 Jul 26 11:18 tnsnames.ora
-rw-r--r--    1 oracle   dba           27651 Aug 14 05:12 orainit.log
-rw-r--r--    1 oracle   dba           18500 Aug 14 05:12 lsnr.log
-rw-r--r--    1 oracle   dba           26214 Aug 14 05:13 appsinit.log
-rw-r--r--    1 oracle   dba             650 Sep 22 12:50 listener.ora.2209_2010
AGENT_HOME @ oem0stl0:/var/opt/oracle
$ vi listener.ora
"listener.ora" 36 lines, 650 characters LISTENER =
(ADDRESS_LIST=
 (ADDRESS=
 (PROTOCOL = TCP)
 (HOST = oem0stl0)
 (PORT = 1527)
 )
)

SID_LIST_LISTENER=
 (SID_LIST=
 (SID_DESC=
 (SID_NAME=doem1s)
 (ORACLE_HOME=/oracle/product/v10.2.0.4)
 (ENVS='LD_LIBRARY_PATH=/oracle/product/v10.2.0.4/lib')
 )
(SID_DESC=
 (SID_NAME=drct0s)
 (ORACLE_HOME=/oracle/product/v11.1.0.7)
 )
(SID_DESC=
 (SID_NAME=drctbk0s)
 (ORACLE_HOME=/oracle/product/v11.2.0.1)
 )
)

#
# Default params
#
STARTUP_WAIT_TIME_LISTENER = 0
CONNECT_TIMEOUT_LISTENER = 10
#TRACE_LEVEL_LISTENER = USER
#TRACE_LEVEL_CLIENT   = USER
TRACE_DIRECTORY_LISTENER =
TRACE_FILE_LISTENER = listener.trc
TRACE_FILE_CLIENT   = sqlnet.trc
~"listener.ora" 36 lines, 650 characters




















~~~~:wq"listener.ora" 32 lines, 573 characters 
AGENT_HOME @ oem0stl0:/var/opt/oracle
$ SETetetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 4

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [drct0s]    ORACLE_HOME = [/oracle/product/v11.1.0.7]

drct0s @ oem0stl0:/var/opt/oracle
$ SetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 3

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [doem1s]    ORACLE_HOME = [/oracle/product/v10.2.0.4]

doem1s @ oem0stl0:/var/opt/oracle
$ lsnrctl stattart

LSNRCTL for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production on 22-SEP-2010 12:54:56

Copyright (c) 1991, 2007, Oracle.  All rights reserved.

Starting /oracle/product/v10.2.0.4/bin/tnslsnr: please wait...

TNSLSNR for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production
System parameter file is /var/opt/oracle/listener.ora
Log messages written to /oracle/product/v10.2.0.4/network/log/listener.log
Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oem0stl0)(PORT=1527)))

Connecting to (ADDRESS=(PROTOCOL=TCP)(HOST=oem0stl0)(PORT=1527))
STATUS of the LISTENER
------------------------
Alias                     LISTENER
Version                   TNSLSNR for IBM/AIX RISC System/6000: Version 10.2.0.4.0 - Production
Start Date                22-SEP-2010 12:54:56
Uptime                    0 days 0 hr. 0 min. 0 sec
Trace Level               off
Security                  ON: Local OS Authentication
SNMP                      OFF
Listener Parameter File   /var/opt/oracle/listener.ora
Listener Log File         /oracle/product/v10.2.0.4/network/log/listener.log
Listening Endpoints Summary...
  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oem0stl0)(PORT=1527)))
Services Summary...
Service "doem1s" has 1 instance(s).
  Instance "doem1s", status UNKNOWN, has 1 handler(s) for this service...
Service "drct0s" has 1 instance(s).
  Instance "drct0s", status UNKNOWN, has 1 handler(s) for this service...
The command completed successfully
doem1s @ oem0stl0:/var/opt/oracle
$ ps -ef | grep smon
  oracle 12058684        1   0 12:48:08      -  0:00 ora_smon_drct0s 
  oracle  3998148  9306188   0 12:55:59  pts/6  0:00 grep smon 
doem1s @ oem0stl0:/var/opt/oracle
$ sqlplus "/ as sysdba"

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Sep 22 12:56:12 2010

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.

Connected to an idle instance.

SQL> startup;
ORACLE instance started.

Total System Global Area 1996488704 bytes
Fixed Size                  2085136 bytes
Variable Size             905973488 bytes
Database Buffers         1073741824 bytes
Redo Buffers               14688256 bytes
Database mounted.
Database opened.
SQL> exit
Disconnected from Oracle Database 10g Enterprise Edition Release 10.2.0.4.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options
doem1s @ oem0stl0:/var/opt/oracle
$ STetDb
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 4

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [drct0s]    ORACLE_HOME = [/oracle/product/v11.1.0.7]

drct0s @ oem0stl0:/var/opt/oracle
$ date
Wed Sep 22 13:00:32 CDT 2010
drct0s @ oem0stl0:/var/opt/oracle
$ SETetDbn
Select $ORACLE_SID:
1) AGENT_HOME
2) OMS_HOME
3) doem1s
4) drct0s
5) *Exit*
#? 3

HOSTNAME = [oem0stl0]    USERNAME = [oracle]
ORACLE_SID = [doem1s]    ORACLE_HOME = [/oracle/product/v10.2.0.4]

doem1s @ oem0stl0:/var/opt/oracle
$ 